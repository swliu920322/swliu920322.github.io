<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序员必读的事业规划书</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员必读的事业规划书"><a href="#程序员必读的事业规划书" class="headerlink" title="程序员必读的事业规划书"></a>程序员必读的事业规划书</h1><h2 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h2><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>你的价值不在于你的技术，而在于你为公司提供的价值，即使用价值，提升解决问题能力</p><h3 id="供需"><a href="#供需" class="headerlink" title="供需"></a>供需</h3><p>信息不对称影响价值，短时间争取大量机会</p><h3 id="跳槽"><a href="#跳槽" class="headerlink" title="跳槽"></a>跳槽</h3><p>不只是价值，看未来发展和感受， 之前要考虑得失， 永远不要因为现在很差而跳槽，要用未来更好，保证一直往上走</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>应届生-小组长-主管-部门经理-总监-CTO，提升能力，如果长时间得不到成长再选择跳槽。脑子里要有清晰的模板</p><h2 id="2-准备篇"><a href="#2-准备篇" class="headerlink" title="2. 准备篇"></a>2. 准备篇</h2><h3 id="自我认识和自我实现"><a href="#自我认识和自我实现" class="headerlink" title="自我认识和自我实现"></a>自我认识和自我实现</h3><ol><li>找不到目标的话，定1年期目标，  </li><li>多挣钱</li></ol><h3 id="四大象限"><a href="#四大象限" class="headerlink" title="四大象限"></a>四大象限</h3><ul><li>E象限 雇员  低风险低收益，天花板明显。</li><li>S象限 自己  做标准化产品 免费+收费定制，做细分、专业的工具。</li><li>B象限 创业 规模化为前提 投资，上市 出售，不喜欢伺候一群爷（用户），别做CEO。<br>A轮融资之前寻找商业模式，变更频繁，敏捷开发，A之后着力规模化，高并发高可用，处理团队和资源。</li><li>I象限 投资</li></ul><h3 id="分析招聘需求"><a href="#分析招聘需求" class="headerlink" title="分析招聘需求"></a>分析招聘需求</h3><ul><li>简历模板 <a href="https://github.com/geekcompany/ResumeSample/blob/master/web.md">https://github.com/geekcompany/ResumeSample/blob/master/web.md</a></li><li>调整自己定位 1.学会观察技术趋势 坚持在发展方向上   2.投资新兴市场和细分市场  每个企业都有可取之处，</li></ul><h3 id="职业画布"><a href="#职业画布" class="headerlink" title="职业画布"></a>职业画布</h3><h3 id="个人品牌-高价值输出"><a href="#个人品牌-高价值输出" class="headerlink" title="个人品牌 高价值输出"></a>个人品牌 高价值输出</h3><ul><li>github博客</li><li>微博加V， 大小问题在这里处理</li><li>技术社区账号StackOverFlow  大量内容的文章在这里发表</li></ul><h3 id="沟通和写作"><a href="#沟通和写作" class="headerlink" title="沟通和写作"></a>沟通和写作</h3><p>金字塔原则 </p><ul><li>条理 </li><li>逻辑</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>充分交流</p><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>可以做技术尝试.  从小做起， 真实的需求  持续更新的毅力</p><h3 id="架构能力"><a href="#架构能力" class="headerlink" title="架构能力"></a>架构能力</h3><ul><li>dry  </li><li>尽量自动化 </li><li>正交性（隔离）</li></ul><h2 id="3-操作篇"><a href="#3-操作篇" class="headerlink" title="3. 操作篇"></a>3. 操作篇</h2><h3 id="简历的本质-约面试"><a href="#简历的本质-约面试" class="headerlink" title="简历的本质 约面试"></a>简历的本质 约面试</h3><h4 id="FAB原则"><a href="#FAB原则" class="headerlink" title="FAB原则"></a>FAB原则</h4><ul><li>是什么</li><li>比别人好在哪点</li><li>如果雇佣我，得到的价值是什么</li><li>原则是数字化,没有成绩 讲成长<h3 id="书写工具"><a href="#书写工具" class="headerlink" title="书写工具"></a>书写工具</h3>markDown,尽量提供pdf的，文件名，xxx简历.WEB开发工程师.pdf</li></ul><h3 id="内推-猎头-网站投"><a href="#内推-猎头-网站投" class="headerlink" title="内推 猎头 网站投"></a>内推 猎头 网站投</h3><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><ol><li>遍历简历知识点</li><li>技能树</li><li>多用咱</li><li>离职原因，要以未来更好</li><li>遇到的最大挑战， 可以讲一个最近发生的</li><li>你希望三年后成为什么样的人  考察职业规划</li><li>有什么要问我们的，带兴趣指标的问题，技术或者产品</li></ol><p><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E8%B1%A1%E9%99%90.png"><br><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E7%94%BB%E5%B8%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视力从0.1到1，不开刀不吃药</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="视力从0-1到1，不开刀不吃药"><a href="#视力从0-1到1，不开刀不吃药" class="headerlink" title="视力从0.1到1，不开刀不吃药"></a>视力从0.1到1，不开刀不吃药</h1><p>本书的根据是人体自身是一个可自我调节修复的系统，参考人体使用指南。我主要关注了如何恢复，原因就不说了</p><h2 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h2><ol><li>有氧运动，书上说时弹跳500次或深蹲100，排除内脏脂肪</li><li>眼保健操，书上说按摩眼睛和头，来回敲打手臂上半部分和小腿两侧</li><li>揉搓耳朵，很多眼睛的穴位</li><li>腹式呼吸，多吸入氧气，提高氧气的摄取。</li><li>远眺，保持放松</li><li>均衡饮食，早睡，拒烟酒</li><li>在看清的基础上，后退，努力继续看清，相信自己可以看清</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 养生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包在vue3的使用</title>
      <link href="2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包在vue3的使用"><a href="#闭包在vue3的使用" class="headerlink" title="闭包在vue3的使用"></a><a href="/images/%E5%88%98%E5%9C%A3%E4%BC%9F%E7%AE%80%E5%8E%86.docx">闭包在vue3的使用</a></h1><ul><li>早期做项目，基于简单这一个出发点，所谓的封装也只是一些执行顺序的问题。<br>对闭包用的也少。</li><li>最近看了一个开源vue3后台的处理方式，可能这就是闭包该有的写法吧。<br>本质是闭包内部维持状态，暴露闭包set函数的集合和内部状态的set，通过vue的emit传回到组件本身。<br>把属性合并作为v-bind的对象体，使用者只关心函数调用即可。</li><li>封装本身用来控制抽象的内容，分可预测和难预测的部分，通常解决掉是重复的可预测内容。<br>之前简单的封装一部分是对于模板的，wrapper函数，一部分是逻辑的logic函数，之前是做了2份的，本身还得配合使用。<br>现在wrapper函数和模板通过内部闭包状态合并了，对于使用者来说是一个很舒服的状态。</li></ul><h2 id="vue3配合闭包目前的封装思想"><a href="#vue3配合闭包目前的封装思想" class="headerlink" title="vue3配合闭包目前的封装思想"></a>vue3配合闭包目前的封装思想</h2><h3 id="真实组件使用"><a href="#真实组件使用" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">const</span> app <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;BasicTable @register="register" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      register<span class="token punctuation">,</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装"><a href="#组件内部封装" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initialProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> loadingRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token comment">// 监听props之后的变化，更新状态</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      getLoadingRef<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>loadingRef<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> Table <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ATable ref="tableRef" v-bind="getBindValue" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> innerPropsRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 始终获取最新的props</span>    <span class="token keyword">const</span> getProps <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoadingRef<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">setInnerPropRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      innerPropsRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 使用最新的状态</span>    <span class="token keyword">const</span> getBindValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>attrs<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token function">unref</span><span class="token punctuation">(</span>getLoadingRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tableAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> setLoading<span class="token punctuation">,</span> setInnerPropRef <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 把闭包函数集合emit为事件参数</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">,</span> tableAction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> tableRef<span class="token punctuation">,</span> getBindValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部"><a href="#useTable内部" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    actions<span class="token punctuation">.</span><span class="token function">setInnerPropRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> otherMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> otherMethods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js通过闭包简单实现"><a href="#js通过闭包简单实现" class="headerlink" title="js通过闭包简单实现"></a>js通过闭包简单实现</h2><h3 id="真实组件使用-1"><a href="#真实组件使用-1" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件类本身会自动实例化，我这边是手动</span>  <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">register</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自己逻辑处理位置</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装-1"><a href="#组件内部封装-1" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假设的loading响应式函数</span>  <span class="token keyword">let</span> loading <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> loading<span class="token punctuation">,</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loading <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 一个假设的状态响应式函数 同上</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> state <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>state <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 真实table组件内部状态</span><span class="token keyword">function</span> <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoading<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    setState<span class="token punctuation">,</span>    setLoading<span class="token punctuation">,</span>    getComputedLoading<span class="token punctuation">,</span>    getComputedState<span class="token punctuation">,</span>    <span class="token function">setProps</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setState</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// emit的东西暂时存起来</span>  actions <span class="token operator">=</span> setMethods<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    getMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span> getComputedLoading<span class="token punctuation">,</span> getComputedState <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    setMethods<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部-1"><a href="#useTable内部-1" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 解析业务逻辑的核心</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>    actions<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心</title>
      <link href="2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/"/>
      <url>2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="心-稻盛和夫一生嘱托"><a href="#心-稻盛和夫一生嘱托" class="headerlink" title="心 - 稻盛和夫一生嘱托"></a>心 - 稻盛和夫一生嘱托</h1><ol><li>提到稻盛和夫，大家都知道他是一个很厉害的企业家，<br>现在也有自己的心学系统和企业管理法阿米巴。<br>读完这本书。</li><li>他是一个伟人，一个谦虚的伟人。<br>谦虚到什么程度呢，虽然做好了很多企业，但是他认为才能不是自己的，是上天暂时给他的，所以不能傲慢。<br>我也反思，有时候做好就会慢慢傲慢，反而出现问题。</li><li>核心观就是’利他’二字，人活一辈子，大都是为自己活，<br>真正为了别人好而活的人太少，所以为什么他能成功。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/images/%E5%BF%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稻盛和夫 </tag>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么而工作</title>
      <link href="2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/"/>
      <url>2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="你为什么而工作"><a href="#你为什么而工作" class="headerlink" title="你为什么而工作"></a>你为什么而工作</h1><ul><li><p>之前从来没有考虑过工作的意义，最舒服的时候是做出公司的组件， 服务于大众的时候。能够让大家开发的舒服，真是特别的满足。 尤其是人性那块，因为我都是尽自己努力在做事情，</p></li><li><p>最近说在管理，也不算管理，从领导上来看，他希望我可以多做一点。 我早期本着技术的角度，在技术上承担的比较多，在人性上从来没有考虑过。 最近的人员流动率过于高了，我也开始在想管理这方面的事情了。<br>这本书从人性上讲了如何驱动大家，从使命和环境上开始改变。 让大家都可以尽其所能，找到自己更伟大的使命和意义。 ￼</p></li></ul><p><img src="/images/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人性 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇特的一生</title>
      <link href="2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/"/>
      <url>2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="奇特的一生"><a href="#奇特的一生" class="headerlink" title="奇特的一生"></a>奇特的一生</h1><p>奇特的一生这本书很奇怪，如何阅读比正本反而更容易看，可能是正本是他的朋友写的，主要是介绍他的才华什么的，<br>而指导阅读的确实围绕着管理时间的核心来讲的。</p><p>柳比歇夫 从26岁开始执行记录时间的习惯，一直到去世，56年没有断过，到了老年还是保持的高效的工作能力。<br>我从中学到了一些东西</p><ol><li>记录时间，可以主要是自己有效的工作和阅读时间，</li><li>每天每周每月每年去回顾一下，好好统计下做一个回顾，时间就了就可以精准的感知时间，</li><li>立下广大的志向，通过跟时间做朋友去慢慢的接近他。</li><li>围绕着自己的终极目标，完善自我，管理学，数学，文学，音乐，运动缺一不可</li><li>等到年老了，累了马上就休息，高效休息高效工作、</li><li>目前要好好想想自己的终点，陪着时间去慢慢接近他。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
