<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年中总结</title>
      <link href="2022/07/28/%E7%9B%AE%E6%A0%87/2022-mid/"/>
      <url>2022/07/28/%E7%9B%AE%E6%A0%87/2022-mid/</url>
      
        <content type="html"><![CDATA[<h2 id="2022年中总结"><a href="#2022年中总结" class="headerlink" title="2022年中总结"></a>2022年中总结</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>在大连干了3年多了，技术能力一般，也就代码整洁一个特点而已。</li><li>上了二期项目快2个月了</li><li>每天早上通勤50分钟，晚上通勤1个小时。 工作时间8.30-11.30  13.30-17.30</li><li>开启了scrum敏捷管理方式</li><li>技术没太多难度，每天主要在修改前人的历史代码。感觉工作提升的意义很小</li><li>考研倒计时148天了，进度拉胯。</li><li>这个月开支5k多，感觉存不下什么钱，事业进展看不到未来，一路艰难险阻。</li></ul><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><ul><li>灰心 事业看不到希望，生活也看不到未来</li><li>沮丧 考研大概率落榜，未来的变化也似乎没有变化</li><li>失望 对工作内容失望，对测试提出的各种额外修改抵触</li></ul><h3 id="开导"><a href="#开导" class="headerlink" title="开导"></a>开导</h3><ul><li>考研政治和吴军的书让我从生活中看到了很多哲理，以往都是忽视掉的。</li><li>思考了主动性的问题，工作中也不乏很多困难，我没有新技术的土壤，但是有攻克困难的土壤。</li><li>技术人员需要有自己的沉淀，即标准化的产品，公司是一个试验田</li></ul><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><ul><li><p>根据工作中的困难，主动选择可行但是不是自己擅长的方案，做中练。最后能形成标准化方案。</p></li><li><p>如果实在没东西学，就学自己想学的，一切以个人职业发展路线为主</p></li><li><p>一切要用发展的眼光看问题，坚持实事求是，从偶尔中寻找必然，从矛盾的斗争性中慢慢积累自己的量变，从而实现质变。</p></li><li><p>考研继续努力，不合别人相比，每个人的发展阶段不一样，要坚持从实际出发，发挥意识的主观能动性，通过实践发展自己。</p></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>人生是一场马拉松，虽然国内可能只有半马，积极的接纳自己，寻找自己可以做的事情，将可能转化为现实。做好准备和行动，从而达到自己想要的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 年度目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回顾 </tag>
            
            <tag> 年中总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2022/05/13/%E6%8B%89%E9%92%A9%E8%AE%A4%E7%9F%A5%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%9B%9B%E8%AF%BE%E9%97%BB%E6%80%9D%E4%BF%AE/"/>
      <url>2022/05/13/%E6%8B%89%E9%92%A9%E8%AE%A4%E7%9F%A5%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%9B%9B%E8%AF%BE%E9%97%BB%E6%80%9D%E4%BF%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="第四课闻思修——-五湖四海追光者-刘圣伟-2022-年-5-月-11-日-23-05"><a href="#第四课闻思修——-五湖四海追光者-刘圣伟-2022-年-5-月-11-日-23-05" class="headerlink" title="第四课闻思修—— 五湖四海追光者-刘圣伟 2022 年 5 月 11 日 23 : 05"></a>第四课闻思修—— 五湖四海追光者-刘圣伟 2022 年 5 月 11 日 23 : 05</h3><h4 id="朋友圈回顾"><a href="#朋友圈回顾" class="headerlink" title="朋友圈回顾"></a>朋友圈回顾</h4><ul><li><strong>起因</strong> 因为我有紧迫感，觉得再不发时间就不够收集评论了</li><li><strong>过程</strong> <ul><li>第一条 介绍了自己，介绍了课程情况。</li><li>第二条 介绍了小组的情况，如何理解课，和大家分享</li><li>第三条 看有人咨询，就把课程相关的图配上了</li></ul></li><li><strong>回顾</strong><ul><li>本身没有太在意别人的反馈，我做事都是自我满足，所以结果很明显。<h4 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h4></li></ul></li><li>听了之后意识到我做事不会换位思考，没有考虑背后的事情，</li><li>从老师说的面试和考试来看<ul><li>背后说的是换位思考的道理。</li><li>能力模型的匹配，而不只是面试</li><li>我理解为站在更高的位置，可以看的更清楚。<h4 id="之后行动"><a href="#之后行动" class="headerlink" title="之后行动"></a>之后行动</h4></li></ul></li><li>这一次发朋友圈好好设计一下，考虑到大家需要什么。</li><li>约2个面试，按照老师设计的去做</li></ul><h3 id="单单训练营换位思考之面试篇"><a href="#单单训练营换位思考之面试篇" class="headerlink" title="单单训练营换位思考之面试篇"></a>单单训练营换位思考之面试篇</h3><ul><li>之前面试都是只准备了专业技能，觉得面试的也不错，却一直没有后文。</li><li>最近听了许单单分析面试不只是你问我答，面试是需要精心准备的，一定要把面试官聊开心了。除了硬实力外，也要准备很多内容。<ul><li>第一步 调研公司，公司的产品，公司的文化，和竞品做比较，分析优势，劣势</li><li>第二部 将话题引到面试官的优势领域，让面试官充分分享他的优势，</li><li>第三步 将话题引到公司的劣势领域，并自己分析出解决方案，让面试官觉得你是一个有洞察力和善于发现解决问题的人。</li><li>认识只占10%，行动才是大头，欢迎大家去实践</li></ul></li></ul><p>###单单训练营职业成长篇</p><ul><li>职业成长是一个有目的的路径，我一直都是只管自己做好，从来没有刻意去思考，怎么提升快，这么多年来我一直做着我非常擅长的事情，进步很慢。</li><li>单单分享到一定要挑战自己。如果像我这样，陷在自己擅长的地方，就比较难突破。因为进步就是做自己不擅长的事情。</li><li>还要找竞争目标，比你强一点的那种，太强的适合做榜样，但不适合做目标。通过进步超越他，再重新找竞争目标超越。不断的让自己成为自己的1.01倍。</li><li>对于太强的，就做榜样。经常请他吃饭，跟他学习职业发展的心得，站在高维度上帮你审视自己，帮助会很大。</li><li>认识只占10%，行动才是大头，欢迎大家去实践</li></ul><h4 id="朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发"><a href="#朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发" class="headerlink" title="朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发"></a>朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发</h4><ul><li>这次改变了一下，没有只分享思想了，主要分享如何行动，效果好像还是不太好。</li><li>这次我是想好好分享给大家，对于换位思考还是没有运用的很好吧，对于其他人想要什么，我还是很难想出来的。</li><li>有人看到了留言了一些疑问，帮她解释了一下，后来没回复了。</li><li>仔细一想，我的职业生涯也并不优秀，也没有资格教别人把。即使上了几节课，算不算半桶水乱晃呢，这种想法很快就被我忘记了，因为我的性格就是不管怎么，我觉得好的我就会一直推。</li></ul><h4 id="关于朋友"><a href="#关于朋友" class="headerlink" title="关于朋友"></a>关于朋友</h4><p>小组会，大家都有点事情，没开成，下周一起补一下。</p><ul><li><p>我有个表兄弟是我的好朋友，我们从小就结识了，我叫她妈为干妈。从小一起玩。长大后有了各自的生活，基本上就是围绕着各自的家庭。</p><ul><li>不过我们之所以为朋友，是因为我们心中彼此认定了对方。</li><li>有空就一起玩一起聊天，紧急的时候借钱也是非常容易的事情。</li><li>不管我有什么紧急的事情，他总能第一时间帮我。</li><li>他有什么事情，我有时间也都会帮他去做的，我们更像是手足的感觉。</li></ul></li><li><p>除了他以外，我其他朋友大都是学生时代结识的，经常一起玩。</p><ul><li>有一个朋友，因为一起玩了好几年就当成好朋友了。现在其实想想，只是玩伴不算朋友。</li><li>曾经有事找他，他总是推脱。我也开始意识到我们只能做个玩伴了。<h4 id="成年人难教朋友"><a href="#成年人难教朋友" class="headerlink" title="成年人难教朋友"></a>成年人难教朋友</h4></li></ul></li><li><p>觉得成年人交朋友不简单，好朋友更难了。</p></li><li><p>成年人的世界充斥着利益与交换，很难有单纯的友情了。</p></li><li><p>友情的诞生也是需要媒介的，一旦离开了媒介，基本上就断了根，友情慢慢死亡，也不再联系了。</p></li><li><p>那份信任也慢慢的褪色，回归了空白。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2022/05/11/%E6%8B%89%E9%92%A9%E8%AE%A4%E7%9F%A5%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E8%AF%BE%E9%97%BB%E6%80%9D%E4%BF%AE/"/>
      <url>2022/05/11/%E6%8B%89%E9%92%A9%E8%AE%A4%E7%9F%A5%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E8%AF%BE%E9%97%BB%E6%80%9D%E4%BF%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="第三课闻思修——-五湖四海追光者-刘圣伟-2022-年-5-月-11-日-23-05"><a href="#第三课闻思修——-五湖四海追光者-刘圣伟-2022-年-5-月-11-日-23-05" class="headerlink" title="第三课闻思修—— 五湖四海追光者-刘圣伟 2022 年 5 月 11 日 23 : 05"></a>第三课闻思修—— 五湖四海追光者-刘圣伟 2022 年 5 月 11 日 23 : 05</h3><ul><li><p>闻：今天的第三课我听到了哪些内容？</p><ul><li>生命的突破一般是<strong>贵人</strong>和<strong>困难</strong></li><li>读书不等于认知，<strong>行动</strong>后反馈才是认知</li><li>打造个人ip，让自己被看见。</li><li>舍得请比你厉害很多的人吃饭，向他学习，要<strong>假装</strong>自己很专业。</li></ul></li><li><p>思：许总今天的分享，给我带来哪些触动和思考？</p><ul><li>回顾了一下过去的突破口，我觉得<strong>选择</strong>也是一个突破口，选择对了，事半功倍。</li><li>早期读书，没有功利心，只是坐马观花罢了，现在读书，功利心太重，反而特别沉重，更不谈提升认知了。</li><li>结合来看应该就是以行动来驱动读书，按需所读，及时反馈比较好。</li><li>目前也在打造个人ip。去年发现竞争力慢慢变差。面试不能完全发挥能力。但是打造ip要细水长流，要专业和高产，属实不易。</li><li>也和厉害的人交谈过，感觉：格局大的人，看什么都视若无物，而自己看什么都是雾里看花。这种认知上带来的差距，帮助自己提升有限。应该要循序渐进，不是每个人都能有和大佬聊的到的地方。</li></ul></li><li><p>修：我将在今后的生活和工作中，践行哪些改变？</p><ul><li>每天回顾下来其实都是道理，思想却没有真正改变，我要积极去改变思想，把道理付诸行动。</li><li>坚持打造个人ip，最近写读书的写多了，专业性反而写少了，要加强。</li><li>工作上有了选择，选择做困难的事，并且积极认真的完成。不管对我有没有用，毕竟是为了被看见。</li><li>读书还是要读的，要把书带到自己的生活细节中去思考。</li></ul><h3 id="朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发"><a href="#朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发" class="headerlink" title="朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发"></a>朋友圈我得到了什么反馈、这个反馈作为一个镜子给我什么思考和启发</h3></li><li><p>我发了3个朋友圈，一个小时发了三个，还都是<strong>长文</strong>，效果可想而知，点赞的3-5个。对未来迷茫的人会点赞留言，因为他看不清前方的路；爱学习的人会点赞，因为看到了我们学习的决心；陌生的专业人士会点赞，因为他们为你改变而骄傲。</p></li><li><p>我自己事后想起来，觉得也是理论分享多了，其实大部分人看到理论都是一笑而过的，我们每天被各种东西熏陶，多看几个道理也提不起精神。</p></li><li><p>从自我认知角度出发，我之前确实不是一个很主动学习，乐于分享的人，所以这一次，大家对这样的我，觉得很奇怪，可能又是三分钟热度吧，我决心要坚持下去，我要突破原来的我。早点分享专业的东西。</p></li><li><p>今天下班又兴奋的像爱人传递积极的道理，我那一刻似乎又是雄心壮志。但她跟我说，你自己怎么去践行你说的这样道理，你的计划是什么？我当时语塞了，我对于认知还是一直停留在我想的程度，当我要落地的时候，我竟不知道如何明确。或许头脑发热，我从未细想，我总是觉得好的东西要吸收，最后只是嘴吸收了。她有时候让我发誓，如果做不到我要损失什么时，我却又觉得太过分了，怎么可以发誓呢，想必还是不想承担后果罢了。<br>我总想，为什么要下那么大的决心，不能一点点改变么，一定要那么痛彻前非么。</p></li><li><p>或许，真正的成长就是打破自己，破釜沉舟。没有决心的前进，犹如水中浮萍，把自己交给了命运。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="2022/05/05/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BF%AE%E8%A8%80/"/>
      <url>2022/05/05/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BF%AE%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前端设计模式"><a href="#前端设计模式" class="headerlink" title="前端设计模式"></a>前端设计模式</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>程序员的核心竞争力 </p><ul><li>编码能力   健壮的代码解决具体问题</li><li>设计思维   抽象的思维应对复杂的系统</li><li>计算机基础 工程化思想规划更大规模的业务</li></ul><p>而设计模式可以帮助我们写出健壮的代码，这样看来我居然是第一阶段都还没到。</p><ul><li>基本围绕着 单一职责 开放封闭 2个原则</li><li>核心思想 封装变化</li></ul><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul><li><strong>工厂模式</strong><ul><li>构造器解决是多个对象实例的问题</li><li>简单工厂模式解决多个构造器的问题, 将创建对象的过程单独封装</li></ul></li><li><strong>抽象工厂</strong><ul><li>完美的践行开放封闭原则， 围绕一个超级工厂创建其他工厂<ul><li>抽象工厂 （理解为专利,操作系统)<ul><li>申明共性</li><li>每一个抽象工厂对应的这一类的产品，被称为“产品族”。</li></ul></li><li>具体工厂 (理解为使用专利的工厂，有安卓的ios)<ul><li>继承自抽象工厂、实现了抽象工厂里声明的那些方法</li><li>用于创建具体的产品的类。</li></ul></li><li>抽象产品 （理解为设计，设计具体的操作系统，比如flyme，mui）<ul><li>这些具体产品类的共性各自抽离，便对应到了各自的抽象产品类</li></ul></li><li>具体产品 （理解为真实产品，使用了安卓）<ul><li>生成产品族里的一个具体的产品所依赖的更细粒度的产品</li></ul></li></ul></li><li>抽象工厂具体只是一个代号，可以理解为一个商标，不自己生产，找代工。</li></ul></li><li><strong>单例模式</strong><ul><li>概念 <strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点</strong></li><li>通过内部维护一个单一的实例，再次调用时会直接使用之前的实例</li></ul></li><li><strong>原型模式</strong><ul><li>概念 原型编程范式的核心思想就是<strong>利用实例来描述对象，用实例作为定义对象和继承的基础</strong></li><li>构造器 =&gt; 原型对象 &lt;= 实例对象</li></ul></li></ul><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul><li><strong>装饰器</strong> 不会对原有的功能产生任何影响，仅仅是具备了一种新的能力。<ul><li>将原有逻辑保留，将行为传递给装饰器，</li><li>function 三个参数， 原型对象实例，name，descriptor(object.definedProperty)</li></ul></li><li><strong>适配器</strong><ul><li>例子  耳机口 分圆孔方孔， 中间的转换头</li><li>不修改原有表现，在其内部使用原有行为进行新行为的处理</li></ul></li><li><strong>代理模式</strong><ul><li>含义 某些情况下，出于种种考虑/限制，一个对象不能直接访问另一个对象，需要一个第三者（代理）牵线搭桥从而间接达到访问目的，这样的模式就是代理模式。</li><li>通常用proxy代理，对于属性的访问和设置会进行一层拦截。</li><li>与装饰器的区别就是他控制了对对象的引用</li><li><strong>常用四种代理</strong><ul><li>事件代理 <ul><li>冒泡点击代理到父级</li></ul></li><li>虚拟代理<ul><li>图片懒加载</li><li>图片预加载 先占位，后加载，真实图片取缓存 virtualImage</li></ul></li><li>缓存代理<ul><li>将已经计算的项和结果做缓存</li></ul></li><li>保护代理<ul><li>对于实例的保护，在满足条件下开发入口</li></ul></li></ul></li></ul></li></ul><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul><li><strong>策略模式</strong><ul><li>将if else的多重判断改为多个类内部独立逻辑</li><li>具体含义是通过一系列算法，将散逻辑一个个封装起来，并且使它们可相互替换。</li></ul></li><li><strong>状态模式</strong> <ul><li>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li><li>主要解决控制一个对象状态的条件表达式过于复杂，把状态的判断逻辑转移到表示不同状态的类中，将复杂的判断逻辑简化。</li><li>和策略模式的区别，主要是策略模式的独立逻辑不依赖类的内部，可以独立出去。行为模式的处理逻辑需要感知类内部</li></ul></li><li><strong>观察者模式</strong><ul><li>定义了一对多的依赖关系，多个监听者对某一个目标</li><li>观察者模式 发布者直接触及到订阅者 <ul><li>适用于模块间耦合的情况</li></ul></li><li>发布订阅 发布者不直接触及到订阅者、而是由统一的第三方来完成实际的通信的操作，类似eventBus<ul><li>实现了解耦</li></ul></li></ul></li><li><strong>迭代器模式</strong><ul><li>主要是为了遍历</li><li>在jquery中抹平了心智负担，</li><li>主要手写迭代器，模拟es6的iterator，利用闭包实现</li></ul></li></ul><h3 id="个人心得"><a href="#个人心得" class="headerlink" title="个人心得"></a>个人心得</h3><ul><li>面向对象的思想，前端用的不太多，具体看框架。<ul><li>一般在逻辑复杂的独立逻辑，且有明显继承关系，分层较多的时候才会使用。</li><li>vue2帮前端处理的太多了，就像填词一样，大部分都是面向过程</li><li>react理念是函数式编程,函数式编程在运行效率和可测试性优势很大，对业务逻辑起来会比较麻烦</li></ul></li><li>希望在以后的使用中，用面向对象包装整体，用函数式编程控制个体</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用能力 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化原理与实践</title>
      <link href="2022/05/05/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>2022/05/05/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="前端性能优化原理与实践"><a href="#前端性能优化原理与实践" class="headerlink" title="前端性能优化原理与实践"></a>前端性能优化原理与实践</h2><h3 id="1-整体"><a href="#1-整体" class="headerlink" title="1.整体"></a>1.整体</h3><p>从输入 URL 到页面加载完成，发生了什么？</p><ol><li>dns寻址<ul><li>浏览器 DNS 缓存和 DNS prefetch</li></ul></li><li>tcp连接<ul><li>长连接、预连接、接入 SPDY 协议</li></ul></li><li>http请求<ul><li>在减少请求次数和减小请求体积方面</li></ul></li><li>http响应<ul><li>静态资源放cdn</li></ul></li><li>解析渲染<ul><li>资源加载优化、服务端渲染、浏览器缓存机制的利用</li><li>DOM 树的构建、网页排版和渲染过程、回流与重绘的考量</li><li>DOM 操作的合理规避</li></ul></li></ol><h4 id="1-1-webpack优化与gzip"><a href="#1-1-webpack优化与gzip" class="headerlink" title="1.1 webpack优化与gzip"></a>1.1 webpack优化与gzip</h4><ul><li>webpack 的优化瓶颈，主要是两个方面<ul><li>webpack 的构建过程太花时间</li><li>webpack 打包的结果体积太大</li></ul></li><li>webpack 构建过程提速策略<ul><li>不要让 loader 做太多事情——以 babel-loader 为例<ul><li>loader: ‘babel-loader?cacheDirectory=true’</li></ul></li><li>不要放过第三方库<ul><li>DllPlugin <ul><li>会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库，</li><li>这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。</li></ul></li></ul></li><li>Happypack——将 loader 由单进程转为多进程<ul><li>Happypack 会充分释放 CPU 在多核并发方面的优势，帮我们把任务分解给多个子进程去并发执行，大大提升打包效率</li></ul></li><li>tree-shaking UglifyJsPlugin</li><li>按需加载 require.ensure(dependencies, callback, chunkName)</li><li>Gzip 压缩原理<ul><li>HTTP 压缩就是以缩小体积为目的，对 HTTP 内容进行重新编码的过程</li><li>Gzip 的内核就是 Deflate，目前我们压缩文件用得最多的就是 Gzip。可以说，Gzip 就是 HTTP 压缩的经典例题。</li><li>Gzip 压缩背后的原理，是在一个文本文件中找出一些重复出现的字符串、临时替换它们，从而使整个文件变小。根据这个原理，文件中代码的重复率越高，那么压缩的效率就越高，使用 Gzip 的收益也就越大。反之亦然。</li><li>Webpack 中 Gzip 压缩操作的存在，事实上就是为了在构建过程中去做一部分服务器的工作，为服务器分压。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通用能力 </tag>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.跟着华为学管理-团队激励</title>
      <link href="2022/04/27/%E7%AE%A1%E7%90%86/6.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9B%A2%E9%98%9F%E6%BF%80%E5%8A%B1/"/>
      <url>2022/04/27/%E7%AE%A1%E7%90%86/6.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9B%A2%E9%98%9F%E6%BF%80%E5%8A%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="6-跟着华为学管理-团队激励"><a href="#6-跟着华为学管理-团队激励" class="headerlink" title="6.跟着华为学管理-团队激励"></a>6.跟着华为学管理-团队激励</h2><h3 id="6-1-团队激励有哪些工具和方法"><a href="#6-1-团队激励有哪些工具和方法" class="headerlink" title="6.1 团队激励有哪些工具和方法"></a>6.1 团队激励有哪些工具和方法</h3><ul><li>激励就是激发和鼓励，是指通过调动人的积极性，把潜在的能力充分发挥出来</li><li>从心理学的角度来看，激励是激发人的内在动机，使其心理过程始终保持在激奋的状态之中，维持一种高昂的情绪，促使人们朝着所期望的目标来采取行动的过程。</li></ul><h4 id="6-1-1-一个目标"><a href="#6-1-1-一个目标" class="headerlink" title="6.1.1 一个目标"></a>6.1.1 一个目标</h4><ul><li>激励要尽量公平和公正，但公平和公正却不是激励的目标</li><li>激励最重要的目标是激发组织的活力，因为只有组织有了活力才能激发创造力<ul><li>好的激励手段可以吸引更多的优秀人才，工资高、待遇好的公司，吸引优秀人才的能力就比较强，当然留住优秀人才的概率也会比较高</li><li>好的激励政策能够帮助企业构建起一个良性的公平竞争环境，员工做得多就会收获得多，因此，能够激发组织内部的公平竞争氛围</li><li>在激励力度很大的情况下，还能最大限度地发挥员工的主观能动性，让员工在实现目标和达成业绩方面更加主动和努力<h4 id="6-1-2-两个理论"><a href="#6-1-2-两个理论" class="headerlink" title="6.1.2 两个理论"></a>6.1.2 两个理论</h4></li></ul></li><li><strong>双因素理论</strong> 又叫作激励保健理论<ul><li>*<em>保健因素</em><ul><li>是工作以外的因素,主要包括公司的政策与管理、监督、工资、同事关系和工作条件等。</li><li>如果满足了这些因素，就能消除员工的不满情绪，让员工维持原有的工作效率，但是这部分因素并不能激励员工产生更积极的行为。</li></ul></li><li><strong>激励因素</strong><ul><li>是跟工作本身或工作内容强相关的一些因素，包括成就、赞赏、工作本身的意义和挑战性、责任感、晋升、发展等。</li><li>这些因素如果能得到满足的话，可以让员工产生很大的工作热情；但如果得不到满足，也不会让员工像保健因素不被满足那样产生不满的情绪。</li></ul></li><li><strong>企业在调动员工积极性方面也可以采取两种不同的做法</strong><ul><li>针对工作任务本身的一些需求，可以直接满足，因为这些需求能够让员工快速地提升工作积极性</li><li>针对工作任务以外的需求，需要间接满足，虽说这些需求的满足也会提高员工的积极性，但并不显著和直接，</li><li>而且工作任务以外的需求很容易增加企业的成本，因此对于这类需求，我们更应该把它看成是一种“锦上添花”。</li></ul></li></ul></li><li><strong>需求层次理论</strong><ul><li>介绍<ul><li>马斯洛的需求层次理论把人的需求分成了生理需求、安全需求、社交需求、尊重需求和自我实现需求</li><li>企业的员工对其中不同等级的需求是一个从下往上、从低级往高级的过程</li><li>在实际工作中，管理者就要经常和各级员工进行沟通，搞清楚团队内不同员工的需求，“对症下药”，进行有针对性的激励。</li></ul></li><li><strong>生理需求</strong><br>这是最基本的需求层次，所以这个需求必须要被很好地满足，包括增加工资、提高福利待遇、改善工作环境和条件等。</li><li><strong>安全需求</strong><ul><li>确保员工在工作中的人身安全，提供医疗保险、失业保险，强化针对工作安全的规章制度和保障体系等。</li></ul></li><li><strong>社交需求</strong><ul><li>为员工创造和谐融洽的工作环境，加强企业的团队凝聚力建设，让员工有更强的归属感。</li></ul></li><li><strong>尊重需求</strong><ul><li>这一需求的满足更多是在精神层面的褒奖，通过多种方式，对优秀员工进行公开奖励和表扬等。</li></ul></li><li><strong>自我实现需求</strong><ul><li>这一需求是最高层次的需求，很多时候企业无法主动提供条件，但在员工想要实现的时候，可以予以协助</li><li>比如余承东的“要带领华为终端做到世界第一”，这就是他对自我实现的需求。<h4 id="6-1-3-三个方法"><a href="#6-1-3-三个方法" class="headerlink" title="6.1.3 三个方法"></a>6.1.3 三个方法</h4></li></ul></li></ul></li><li><strong>激励的分类</strong><ul><li><strong>物质激励</strong><ul><li>顾名思义，是指跟金钱、物质相关的激励</li></ul></li><li><strong>机会激励</strong><ul><li>主要针对员工在职场的发展、个人能力提升而给予的激励</li></ul></li><li><strong>情感激励</strong><ul><li>针对个人情感、荣誉感等方面给予的激励</li></ul></li></ul></li><li><strong>如何激励</strong><ul><li><p><strong>对团队的激励</strong>        </p><ul><li><strong>物质激励</strong><ul><li>通常都是简单而直接的，就是通过奖金包的方式来体现，业绩越好，奖金包越大。</li></ul></li><li><strong>机会激励</strong><ul><li>如果团队的业绩越好<ul><li>团队管理者的职级也就越高</li><li>团队中会有更多干部被提拔</li><li>整个团队职级破格提升（针对关键事件，比如 2020 年的武汉抗疫团队）</li><li>团队内员工的个人绩效打 C 或者 D 的比例会降低甚至豁免</li><li>团队有更多机会挑战更有价值的工作和任务</li></ul></li></ul></li><li><strong>情感激励</strong><ul><li>更多的是团队荣誉奖、团体表彰等方式。</li><li>在华为，对于团队做出的不同贡献，会有不同层级的褒奖，包括公司级和部门级等，涵盖的范围也很广，连驻外的餐厅、厨师都会有正式的激励。</li></ul></li></ul></li><li><p><strong>对团队中个体的激励</strong></p><ul><li><strong>物质激励</strong><ul><li>相对比较简单，都是比较常用的一些方式，通常来说，包括工资、奖金、股票、期权等。</li><li>在相同的绩效考核标准下，个人业绩越好，工资就应该越高，奖金和股票也越多，这一点是很容易理解的。</li></ul></li><li><strong>机会激励</strong><ul><li>对于个体来说，如果个人的业绩越好，那么就会获得越多的培训机会以及轮岗历练的机会，当然，职级提升的可能性也越大。</li><li>职级提升的可能性也越大。和团队的机会激励一样，个体也会有更多的机会去做有难度和有挑战性的工作，让个体展现出自身的价值，这样对于他的成长会有很大的促进作用。</li></ul></li><li><strong>情感激励</strong><ul><li>每家企业都会设定常规的情感激励项目，比如各种各样的荣誉奖、荣誉称号等，这些项目通常由公司政策和制度来支撑。</li><li>管理者要不断地和员工进行沟通，持续地优化这些项目，以确保这些情感激励的项目能够真正起到打动人、激励人的作用</li><li>必要的时候，辅以物质和机会激励，会有“1+1&gt;2”的效果。</li></ul></li><li><strong>非常规激励</strong><ul><li>个人的非常规激励大都来自管理者自发的行为，内容并不固定，有时候会有一定的偶然性</li><li>在员工生日或者重要纪念日的时候送上一份祝福，在员工取得一些成绩时给予赞美和表扬，邀请员工共进午餐</li><li>对于管理者的要求会比较高，管理者要非常了解自己的员工，也要对于人际关系的处理非常敏感</li><li>90后认可的激励方式<ul><li><strong>榜样力量和领导魅力</strong>。通常来说，员工更倾向于在优秀的管理者手下工作，这本身对他们来说就是一种激励。</li><li><strong>表扬和赞美</strong>。对于新生代员工来说，他们的自我意识更加强烈，相对于其他年龄段的员工而言，他们更加看重被认可，如果在公司能有更多的机会被表扬和赞美，对他们就是非常好的激励。</li><li><strong>平等和信任</strong>。这些年轻员工的成长环境更加讲究平等沟通和对话，所以如果能够给他们创造出更加平等和信任的工作环境，对他们来说也是一种不错的激励。</li><li><strong>责任和成就</strong> 于新生代员工来说，如果他们有机会去做自己觉得有价值的工作，而且能够让他们承担相应的责任，那么他们在工作过程中就会很有成就感，这也是一种非常好的激励方式。</li></ul></li></ul></li></ul><h4 id="6-1-4-四个误区"><a href="#6-1-4-四个误区" class="headerlink" title="6.1.4 四个误区"></a>6.1.4 四个误区</h4></li></ul></li><li><strong>把激励等同于物质激励</strong><ul><li>其实发钱是最简单，也是最没有创意的激励。物质方面的激励只是激励的一种，不是全部。</li><li>管理者可以尝试在机会激励和情感激励上面做一些策划</li></ul></li><li><strong>把福利当作激励</strong><ul><li>公司的福利只是消除员工的不满情绪，但却不能激发员工的工作积极性。</li><li>以华为为例，长期以来，华为都是比较弱化福利这一概念的，任正非认为福利是相对通用的，大家都能得到的东西，往往就不会珍惜。</li><li>在保证员工基础福利的基础上，更多地从物质和情感上体现激励，这样就可以确保团队中的个人能够有更强的工作主动性和积极性。</li></ul></li><li><strong>把激励公平等同于激励平均</strong><ul><li>大家拿的奖金都差不多，第一名和最后一名差距也不大，情感激励也是人人有份。这就是典型的把制度上的激励公平误解为结果上的激励平均。</li></ul></li><li><strong>把激励当成万能药</strong><ul><li>有些管理者把激励当成万能药，认为只要激励到位，一切问题都会迎刃而解，这是一个巨大的误解。</li><li>激励只是解决员工自身的内在动力问题，但员工个人的能力、组织的管理水平、企业的战略方向等，都不是激励能够完成的，因此管理者必须消除把激励当作万能药的思想。</li></ul></li></ul><h3 id="6-2-如何设计团队整体激励方案"><a href="#6-2-如何设计团队整体激励方案" class="headerlink" title="6.2 如何设计团队整体激励方案"></a>6.2 如何设计团队整体激励方案</h3><h4 id="6-2-1-明确团队激励的导向"><a href="#6-2-1-明确团队激励的导向" class="headerlink" title="6.2.1 明确团队激励的导向**"></a>6.2.1 明确团队激励的导向**</h4><ul><li><strong>目的</strong><ul><li>对团队进行激励的目的主要有两个：一是为了肯定团队的成绩，二是激发团队接下来持续做贡献的积极性。其中，第二个目的更为重要。</li><li>团队激励方案的设计，不能偏离企业的战略目标和业务目标，要做到和业务方向相匹配。</li></ul></li><li><strong>初创企业和小规模企业</strong><ul><li>建议把激励更多导向支持业务成功的主航道团队，加大对这些团队的激励力度。</li><li>某企业的目标是进行市场扩张，那么在做团队激励时，就要多考虑市场拓展团队和产品解决方案团队。</li></ul></li><li><strong>规模比较大的企业</strong><ul><li>像华为、阿里、腾讯等，团队激励会追求更大的覆盖范围</li><li>就拿华为来说，除了有针对研发团队、销售团队、服务团队等的常规激励以外，每年甚至还会有针对外派到海外的厨师团队的特色激励，</li></ul></li><li>在团队层面也需要明确激励的导向。团队激励的导向通常可以是出色的业绩、良好的团队协作、积极创新、难点工作突破等。<h4 id="6-2-2-团队激励的方案设计"><a href="#6-2-2-团队激励的方案设计" class="headerlink" title="6.2.2 团队激励的方案设计"></a>6.2.2 团队激励的方案设计</h4></li><li><strong>物质激励</strong> 在设置激励方案的时候，要时刻考虑人性            <ul><li>对于团队的整体激励而言，物质激励的最重要方式是以奖金包的形式来体现的。<ul><li>为了体现激励的有效性，团队的奖金包通常要跟组织绩效结果挂钩。</li><li>奖金包系数的计算也不是很简单，还需要各种考量和评估。除了收入、利润等硬指标以外，还有一些其他相关要素会影响激励结果。</li><li>团队所在区域的艰苦程度、项目的难度、市场区域的重要性等，都可以设计成关联系数。</li></ul></li><li>如果为了激发员工工作主动性、刺激团队之间的良性竞争，是可以让这种“不均衡状态”存在的。<ul><li>如果希望拉开差距，又不至于激励过分失衡，那就需要对奖金包系数的浮动区间做一些设定。</li><li>既可以针对团队的不同目标情况拉开差距，使得奖金和业务结果正相关，但又不至于偏离正常的激励框架，是一种比较好的控制方法。</li></ul></li><li>还有一个关键点需要考虑，那就是团队负责人的奖金如何分配。<ul><li>以华为为例，华为的团队奖金包中，不包括团队负责人的奖金。</li><li>果团队负责人的奖金也放在团队的奖金包里，那么在进行分配的时候，可能有些负责人会出于私利，把自己的奖金分得特别多，员工的分得很少；</li><li>又或者有些负责人为了避免落下口实，只能选择把自己的部分留少，但实际上心里又觉得不舒服，使得对负责人的激励效果就打了折扣。</li><li>华为采取的方法是把团队负责人的奖金放到上一级团队的奖金包里进行考虑。没有了自己的利益考虑，负责人在团队奖金分配时就能保持更公平的视角。</li></ul></li></ul></li><li><strong>机会激励</strong><ul><li><strong>更高的组织和个人岗位价值</strong><ul><li>如果业绩好的话，那么组织价值定位和管理者的价值定位也会高。</li><li>称重越高的，对应的管理者的个人职级也会提高。同时，不管是对于管理者还是对于团队成员而言，个人价值也会得到一定程度的提高。</li><li>有了更高的组织价值定位，团队也会更受公司的重视。公司在安排战略性的、有难度的工作任务时，就会优先考虑分配给更高价值的团队。</li></ul></li><li><strong>更多员工可得优良评价</strong><ul><li>对于业绩好的、目标达成度高的团队，团队成员的个人绩效被评价为“优秀”或者“良好”的比例可以更高，打“中等”和“差”的比例可以更低。</li><li>对于团队成员而言，为团队取得更好业绩，也会反过来作用于个人，对个人也是有实实在在好处的。于是，团队成员也会更乐意拼尽全力去达成团队目标，这样就形成了一个良性循环。</li></ul></li><li><strong>更多的岗位晋级和人员提拔</strong><ul><li>任正非曾经说过，出成绩的地方就要出人才。</li><li>业绩好的团队，内部成员被提拔升职的机会也就越大。</li><li>华为的干部，很多都是从业绩优良的艰苦地区进行选拔。这样会让员工更有干劲、也更愿意去往条件艰苦的地区工作。</li></ul></li></ul></li><li><strong>情感激励</strong><ul><li>关于团队的情感激励，我建议跟企业文化和价值观导向相结合。</li><li><strong>精神层面</strong><ul><li>把业绩好的团队，作为典型的代表，拔高到企业文化和价值观的角度进行表彰。</li><li>这会让团队成员有很强的荣誉感，会更加以团队为荣，也会更加愿意为团队做出贡献。</li><li>华为对探索，前沿失败的团队和成员进行激励，奖金，升职，精神激励，<ul><li>可以帮助企业少走弯路，应该追溯他们的贡献</li></ul></li></ul></li></ul></li><li>**总结 **<ul><li>在设计团队激励的方案时，不要仅仅局限于其中的某一种形式，而是要综合运用多种方法，使激励效果最大化。<h4 id="6-2-3-跨部门团队的激励"><a href="#6-2-3-跨部门团队的激励" class="headerlink" title="6.2.3 跨部门团队的激励"></a>6.2.3 跨部门团队的激励</h4></li></ul></li><li>谈团队激励时，会默认为激励对象是一个部门，企业内部还存在很多需要跨部门来运作的项目</li><li><strong>关键点</strong><ul><li><strong>团队负责人要有足够的权限</strong><ul><li>为了更好完成团队的激励，跨部门团队管理者（通常为项目经理）要有更大的权限和自主权，</li><li>在项目的进行过程中和项目结束以后，管理者要有足够的权限对项目组的成员进行评价，并且做出相应的奖金分配。</li><li>过程对于项目经理的个人能力也提出了很高的要求，非常考验项目经理的主观能动性和项目管理能力。</li><li>优秀的项目经理一定是一个好的人力资源管理者，除了能很好地完成项目交付和管理工作以外，也应该具有对团队成员的培养、考核和激励的能力.</li></ul></li><li><strong>根据项目的阶段分批激励</strong><ul><li>由于工作任务的阶段性比较强，团队的成员通常不是长期固定的，而是根据项目的工作内容来调配的</li><li>团队负责人要对不同阶段的工作内容合理分配激励比重，结合团队成员的投入度情况，设计阶段性的激励方案，</li><li>避免忽略做出了成绩但中途调离的团队成员。</li></ul></li><li><strong>激励要及时</strong><ul><li>在做出了阶段性的激励方案以后，就要根据工作的进度和里程碑达成情况，及时实施激励方案。</li><li>只有这样，才能激发团队的工作氛围，让团队成员保持更高昂的工作热情，促进团队绩效的提升。</li></ul></li></ul></li></ul><h3 id="6-3-如何设计团队个人激励方案"><a href="#6-3-如何设计团队个人激励方案" class="headerlink" title="6.3 如何设计团队个人激励方案"></a>6.3 如何设计团队个人激励方案</h3><h4 id="6-3-1-华为个人激励的导向"><a href="#6-3-1-华为个人激励的导向" class="headerlink" title="6.3.1 华为个人激励的导向"></a>6.3.1 华为个人激励的导向</h4><ul><li><strong>华为导向</strong><ul><li>华为认为，如果要全面提升员工能力、激活员工的主动性和创造力，</li><li>不管员工的职位高低，只要员工有能力、在工作中有主动性和创造力、能够真正为企业创造价值，就应该是被激励的对象。</li></ul></li><li><strong>三个典型导向</strong><ul><li><strong>不让雷锋吃亏</strong><ul><li>在华为只要你是一个“雷锋式”的员工，勤勤恳恳，一丝不苟地做好本职工作，那就是对组织、对企业的价值贡献，也就一定会得到合理的、有竞争力的回报。</li></ul></li><li><strong>让拉车的比坐车的拿得多，拉车人在拉车的时候比不拉车的时候拿得多</strong><ul><li>让真正在努力拼搏的、为企业创造价值的人，能够获得比不需要努力拼搏的人更多的收益</li><li>当员工从压力大的一线业务岗位换到压力较小的中后台支持岗位时，收入是会下降</li></ul></li><li><strong>猛将必发于卒伍，宰相必取于州郡</strong><ul><li>华为在员工的选拔上，更倾向于从一线部门、从真正为公司创造价值的部门来选拔人才。</li><li>我们看到华为的高管，除了极少数专家型高管外，几乎全部是从一线成长起来的，这样的管理者才是真正懂业务、懂团队、懂员工、懂客户的。<h4 id="6-3-2-华为个人激励方案"><a href="#6-3-2-华为个人激励方案" class="headerlink" title="6.3.2 华为个人激励方案"></a>6.3.2 华为个人激励方案</h4></li></ul></li></ul></li><li>介绍<ul><li>物质激励分为短期和中长期这两个部分。短期激励主要包括工资和奖金，中长期激励包括虚拟受限股和时间单位计划</li></ul></li><li>介绍<ul><li><strong>工资</strong><ul><li>华为将工资水平定位在行业中的高位，用以吸引优秀的人才。</li><li>每个岗位的工资也有差异，岗位价值不同，岗位对应的工资也不同。</li><li>工资管理的“十六字方针”：<ul><li><strong>以岗定级</strong>，基于岗位价值来确定岗位的级别；</li><li><strong>以级定薪</strong>，基于岗位级别来确定岗位的薪资水平；</li><li><strong>人岗匹配</strong>，员工的任职能力要和其所在岗位的要求匹配；</li><li><strong>易岗易薪</strong>，员工的工资不是一成不变或者永远上涨的，只要岗位调整，薪资也要相应进行调整</li></ul></li><li>华为每年都会进行工资水平的审视，以确保工资水平持续保持竞争力。</li><li>针对业绩突出的员工，华为也会及时调整他们的工资。</li></ul></li><li><strong>奖金</strong><ul><li>华为一直坚持奖金要拉大差距，要打破平衡，向高绩效者倾斜，向一线作战部队倾斜，</li><li>从而发挥奖金的激励和牵引作用，加强公司的价值创造和价值管理能力。</li><li>华为的个人奖金分为项目奖和年终奖<ul><li>项目奖是指员工参与了项目并且在项目获得奖项的情况下所分配到的奖金，目的是加强分配的及时性和针对性。</li><li>年终奖是每年年底结合员工的绩效水平来分配的年终奖金，这是对员工一整年工作的激励。</li></ul></li></ul></li><li><strong>虚拟受限股</strong><ul><li>介绍<ul><li>虚拟受限股是华为对中方员工的一种长期激励，由员工按照配股的份额花钱购买，有分红权和选举董事的权力</li></ul></li><li>股东会<ul><li>2021 年 3 月份，任正非所占的股份已经只有 0.81%，而工会占有 99.19% 的股份</li><li>华为是一家真正的由全体员工持股、并且把更多的企业收益让全体员工分享的企业</li></ul></li></ul></li><li><strong>时间单位计划（TUP）</strong><ul><li>介绍<ul><li>时间单位计划（TUP）可以认为是一种中长期的特殊奖金</li><li>主要是由员工能力、贡献和未来的发展前途来确定的。一个计划周期是 5 年，员工无须花钱购买。</li><li>前 4 年递增分红权收益，最后 1 年除了获得全额分红收益之外，还可能获得 5 年中股本增值的收益。</li><li>华为的这两种模式——虚拟受限股和时间单位计划（TUP）——只是在当前条件下比较适合华为，未来随着华为的发展可能也会做出各种调整。</li><li>管理者还是要仔细地分析自己企业的特点，选择真正适合自己企业发展的中长期激励模式。<h4 id="6-3-3-个人激励的常见误区"><a href="#6-3-3-个人激励的常见误区" class="headerlink" title="6.3.3 个人激励的常见误区"></a>6.3.3 个人激励的常见误区</h4></li></ul></li></ul></li></ul></li><li><strong>未根据岗位价值定工资</strong><ul><li>很多公司是基于部门层级或者岗位名称来确定工资的</li><li>如果一刀切，只是按照岗位名称定级别，这样工资就没有差异。那么，工作压力大的岗位，就没人愿意去了。</li></ul></li><li><strong>员工岗位调动，工资不动</strong><ul><li>很多公司在员工被降级的情况下，却不敢调整员工工资。究其原因，主要是担心员工不接受，或者认为不合规。</li><li>劳动法,在员工不胜任工作的情况下，用人单位可以单方调整其工作岗位，并且可根据“岗变薪变”原则调整员工的工资。</li><li>企业可以提前制定“劳动者不胜任工作带来的岗变薪变”的管理制度，在员工入职培训的时候讲解，并由员工对培训内容和制度文件做签字确认。</li></ul></li><li><strong>奖金只跟个人业绩挂钩</strong><ul><li>很多公司的员工奖金采用提成制，或者就只跟员工的个人业绩挂钩。</li><li>这样带来的后果就是：员工只关注自身利益，不关注团队利益，甚至还有可能出现公司效益不佳，但员工奖金也不受任何影响的情况</li></ul></li><li><strong>薪酬固浮比不合理</strong><ul><li>有些老板为了降低成本，会有意识地降低员工的固定工资，增加奖金的占比。</li><li>但如果固定工资过低，就会导致没有优秀的人愿意来应聘这个岗位，久而久之，整个团队的能力都会受影响，自然业绩也很难达成。</li></ul></li></ul><h3 id="6-4-如何设计合理的负激励方案"><a href="#6-4-如何设计合理的负激励方案" class="headerlink" title="6.4 如何设计合理的负激励方案"></a>6.4 如何设计合理的负激励方案</h3><h4 id="6-4-1-什么是负激励"><a href="#6-4-1-什么是负激励" class="headerlink" title="6.4.1 什么是负激励"></a>6.4.1 什么是负激励</h4><ul><li>介绍<ul><li>负激励是相对于正激励而存在的一个概念</li><li>正激励，就是我们平时所说的激励，就是当员工的行为符合组织需要和个人目标的时候，可以对员工进行褒奖、赞扬和提拔，从而激发员工的积极性和主动性。</li><li>负激励则是指当员工的行为不符合组织需要或者个人目标的时候，通过惩罚、制裁等方式来帮助员工减少这一类的行为。</li><li>正激励和负激励都是激励形式，是相辅相成的</li></ul></li><li>原因<ul><li>正向激励会存在边际效用递减的现象<ul><li>涨薪比例越来越低的话，存在递减效应</li><li>对员工的一些负面或者不满足组织要求的行为进行适当的惩罚，虽然会让员工在群体中有一些受挫感，</li><li>但可以让员工自我警醒，重新树立对工作的热情和主动性。</li></ul></li><li>负激励往往都是标准明确、实施简单的措施，管理成本较低<ul><li>“在公司园区吸烟罚款 100 元”，这就是一条非常简洁明了的负激励标准，任何人违反了都要被处罚，实施起来也很简单，没有太多需要讨价还价的余地。</li><li>负激励方案是一种必要的激励模式,团队激励不应该只有正激励，适当的负激励也是对组织有益的。但负激励绝不只是简单的批评、罚款等，负激励的设计非常考验管理者的智慧。<h4 id="6-4-2"><a href="#6-4-2" class="headerlink" title="6.4.2"></a>6.4.2</h4></li></ul></li></ul></li><li><strong>物质负激励</strong><ul><li>主要针对的是管理者和骨干员工</li><li>公司管理层对此负有领导不力的责任,任正非签发了包括自己在内的高管问责通报，一方面体现了华为提出的“坚持自我批判”的核心价值观，另一方面也体现了最高管理层的责任担当。</li><li>在华为，除了这种被动的物质负激励，还有主动的物质负激励<ul><li>2002 年，受到 IT 行业泡沫破裂的影响，华为利润率大幅降低</li><li>向来具有高度危机意识的华为管理层，为了表示自己愿意和公司风雨同舟的精神，自愿向公司提出降薪</li><li>有 400 多位高管提交了自愿降薪的申请，公司最后审批通过了 362 位总监以上的领导降薪 10% 的申请。</li></ul></li><li>物质的负激励用在管理者层面，使得负激励的积极影响力进一步得到了放大。在制定物质负激励方案时，核心就是要关注负激励的放大效应。</li></ul></li><li><strong>机会负激励</strong><ul><li>末位淘汰制<ul><li>末位淘汰并不只针对员工层，也包括管理者</li><li>末位淘汰不是简单地解除和员工的合约，也可以是让员工接受培训、转岗等，也有员工转岗后经过努力获得了优秀的成绩。</li></ul></li><li>市场部集体大辞职</li><li>机会负激励更像是一种“激将法”，用压力去激发人内心更大的动力。</li></ul></li><li><strong>情感负激励</strong><ul><li>研发的自我批判大会<ul><li>2000 年，华为在深圳体育馆召开了一次有 6000 多人参加的、以研发体系为主的自我批判大会，</li><li>会上任正非等高管给华为的研发骨干和领导发奖，奖品是研发体系在历年开发过程中浪费的呆死料，以及在产品出问题以后工程师为解决问题而产生的飞机票。</li></ul></li><li><strong>从零起飞奖</strong> <ul><li>“表彰”的是过去一年里虽然奋勇拼搏但绩效结果并不如意的团队负责人<h4 id="6-4-3-负激励使用的两个误区"><a href="#6-4-3-负激励使用的两个误区" class="headerlink" title="6.4.3 负激励使用的两个误区"></a>6.4.3 负激励使用的两个误区</h4></li></ul></li></ul></li><li><strong>不愿用负激励</strong><ul><li>有些管理者“宅心仁厚”，不愿意使用负激励作为管理手段。因为负激励往往伴随着警告、罚款、降薪甚至淘汰等措施，所以他们就减少甚至拒绝使用这些措施，因为害怕伤害到员工。</li><li>负激励本身就是要带给员工一定的负面影响，否则是达不到激励效果的。</li><li>在实际操作过程中，也不要把负激励搞得特别严肃，在相对轻松的氛围中，也可以达到负激励的效果。</li></ul></li><li><strong>过度使用负激励</strong><ul><li>对于提高团队绩效和活力并没有任何意义，反而还让员工变得缩手缩脚</li><li>过度使用负激励的团队对他们是不会有吸引力的。</li><li>负激励的目的不是惩罚，如果用力过猛容易挫败团队士气，而用力不足也会让团队感受不到压力。</li></ul></li></ul><h3 id="6-5-如何设计荣誉激励福利方案"><a href="#6-5-如何设计荣誉激励福利方案" class="headerlink" title="6.5 如何设计荣誉激励福利方案"></a>6.5 如何设计荣誉激励福利方案</h3><ul><li>情感激励并不完全是无形的，也会通过一些有形物品来承载</li><li>以激发荣誉感为主的情感激励方式有很多，<br>大到国家级别的奖项，比如“全国劳动模范”“三八红旗手”、<br>（国家授予钟南山院士的）“共和国勋章”等，小到学校里的“学习标兵”“积极分子”等，<br>通常还会伴随着高规格的颁奖或表彰仪式，用以体现激励的重要性，及扩大示范效应。</li></ul><h4 id="6-5-1-荣誉激励"><a href="#6-5-1-荣誉激励" class="headerlink" title="6.5.1 荣誉激励"></a>6.5.1 荣誉激励</h4><ul><li><strong>丰富的荣誉激励主题</strong><ul><li><strong>针对管理变革</strong><ul><li>华为设立了“蓝血十杰”奖，奖励那些为华为的长期管理改进做出突出贡献的个人，包括外部顾问。</li></ul></li><li><strong>针对年度优秀的团队和员工</strong><ul><li>华为设立了“金牌团队”和“金牌个人”奖，奖励那些业绩非常突出的员工，这个奖也是非常难拿的奖。</li></ul></li><li><strong>针对团队里业绩优良的员工</strong><ul><li>华为设置了获奖比例高达 20% 的“明日之星”奖，鼓励这些员工继续努力，成为未来的“明星”。</li></ul></li><li><strong>针对常年在海外工作的员工</strong><ul><li>对于在海外工作超过 10 年的员工，华为设置了“天道酬勤”奖；对于在海外艰苦地区工作超过 5 年的员工，华为设置了“海外艰苦奋斗奖”。</li></ul></li><li><strong>针对支持一些重大突发事件的集体和个人</strong><ul><li>华为也有相应的激励，比如，2008 年，华为就曾经给参加汶川抗震救灾的 600 多名员工颁发了“抗震英雄奖”。</li></ul></li><li>荣誉激励不能是一种临时起意的行为，而应该是一个长期的计划。</li><li>在激励主题不变的情况下，要持续进行激励方案的创新，使激励变成员工高度认可并渴求的东西</li></ul></li><li><strong>广覆盖的荣誉激励奖项</strong><ul><li>很多企业的荣誉激励是围绕核心人员来做的，比如营销、研发等岗位的员工，这些人员对企业的发展确实很重要，获奖也是无可厚非的。</li><li>但支撑和推动企业发展的不仅仅是这些主要的业务部门，平台部门（如人力资源、财务、行政等）也有优秀的员工，他们也对企业发展贡献了价值，也是值得被授予荣誉的。</li><li>以华为为例，华为的荣誉激励奖项设置得就比较全面，<ul><li><strong>针对不同岗位</strong><ul><li>结合岗位贡献特征，会设立相应的荣誉奖，</li><li>不论是价值链上重要的业务人员，还是中后台的支撑人员，甚至后勤人员（如厨师），都有相应的专项荣誉激励。</li></ul></li><li><strong>针对不同级别</strong><ul><li>华为在授予荣誉称号的时候，虽然中基层员工的奖励会更多一些，</li><li>但对于为公司中长期发展做出贡献的管理者，也有机会获奖，</li></ul></li></ul></li><li>如果要设计荣誉激励方案，建议做到更全面和广泛的覆盖，不能仅仅局限于核心岗位，同时也要根据实际贡献来授予，而不能仅仅局限于某个或某些层级的员工。</li></ul></li><li><strong>高质量的荣誉激励实施</strong><ul><li>华为的荣誉激励却总是让人印象深刻，</li><li>华为有一个专门负责荣誉激励的部门——员工沟通部，负责荣誉激励方案的策划和实施。</li><li>每年华为都会结合公司当年的战略主题设计“明日之星”奖的奖牌，每年的主题和设计方案都是不同的，并且还会将奖牌设计和制造的过程拍成视频，在公司论坛上提前展播</li><li>奖牌均由全球著名的造币厂设计和制作，不论是质量还是艺术性，都是非常吸引人的，对于获奖的员工而言，放在家里也是一件精美的艺术品。这种能够被认可的激励，才是有价值的激励。</li></ul></li><li>管理者在设计荣誉激励方案时，要多花点心思，多一些创意，这会带来事半功倍的效果。</li></ul><h4 id="6-5-2-福利方案"><a href="#6-5-2-福利方案" class="headerlink" title="6.5.2 福利方案"></a>6.5.2 福利方案</h4><ul><li>介绍<ul><li>在企业中，能让员工有归属感和对企业有认同感的，除了荣誉激励，还有福利方案</li><li>福利是一种保健因素：如果福利让员工得到了比较大的满足，那就可以很好地消除员工的负面情绪，但却无法激发员工更积极的动力</li><li>在福利上的投入，管理者还是要谨慎地去考虑</li></ul></li><li><strong>如何做好企业个性化福利方案</strong><ul><li><strong>保障性福利要有针对性</strong><ul><li>保障性福利对于员工来说是很重要的，因为这通常都会关系到员工工作开展过程中的便利性、安全性等基本需求。</li><li>保障性福利如果实施不到位，就会对员工的稳定性产生很大的影响。</li><li>华为分享<ul><li>比如，华为的海外员工，有一个很重要的福利就是覆盖当地的商业保险，如果这一点不能满足，那员工的安全性需求就无法得到满足。</li><li>还有一个需求就是家属探亲的安排，这一点对于常驻海外的员工来说，也是一项基本的福利，这可以让他们更加安心地在所在国投入工作。</li></ul></li><li>很多企业都会有的班车福利，这对于集中办公的大中型企业而言是非常重要的，没有班车的话，很多员工上班会非常折腾，工作的吸引力也会明显下降。</li><li>所以对于这样的保障性福利，主管部门一定要予以重视，仔细分析自己公司不同部门相应的保障性福利到底是什么，并在此基础上做出好的解决方案，使得员工不需要为这些工作以外的事情分心。</li></ul></li><li><strong>个性化福利要有创意</strong><ul><li>随着现在越来越多的年轻员工加入职场，特别是 95 后和 00 后员工的数量越来越多，他们对于福利的个性化要求也会比较高<ul><li>有一些互联网企业，还有效益比较好的其他类型企业，会向员工提供低息甚至无息贷款用于买房，这就是一种福利的创新，帮助一些有购房需求的员工解决实际的问题</li><li>有些企业，会针对有各种爱好的员工提供一些费用，帮助他们建立社群，请各种大咖级的老师来进行指导，促进员工在非工作时间的沟通；</li><li>还有一些年轻人比较多的公司，每年的节日福利不再是以前一成不变的发一盒月饼这样的模式，而是给员工提供更多的自主选择的机会，公司提供福利平台，员工可以在平台选择自己喜欢的商品，让员工获得自己真正想要的物品，提升员工体验。</li></ul></li><li>要多去了解员工的真实想法，并给出适合这些年轻人的福利方式</li></ul></li><li><strong>福利可以社会化、货币化</strong><ul><li>一开始做员工福利的时候，提供的福利质量很高，大家都非常满意，但随着时间的推移，慢慢地就会出现各种各样的问题，</li><li>在没有引入竞争机制的情况下，这个问题出现的可能性是非常大的。</li><li>华为分享<ul><li>把日常福利货币化和社会化，引入社会上的商业机构来提供服务，而公司把福利以钱的形式发给员工，让员工自己选择。</li><li>华为现在的班车都是要收费的，公司会把坐车的补贴发给员工，员工根据服务质量，自己选择是不是要坐班车，这样还能反过来促进班车服务质量的提高；</li><li>华为的食堂都是收费的，每家食堂都有多个商户提供餐饮服务，充分竞争，对于员工满意度高的商户，华为会降低租金，而对于员工满意度低的商户，会提高租金，或者直接予以淘汰。</li><li>华为针对被外派海外的员工，将租房也做了货币化改革，把租房的补贴发给员工，由员工自己去租房，减少行政平台在此方面的投入。</li></ul></li></ul></li></ul></li></ul><h3 id="6-6-如何设计人员提拔晋升方案"><a href="#6-6-如何设计人员提拔晋升方案" class="headerlink" title="6.6 如何设计人员提拔晋升方案"></a>6.6 如何设计人员提拔晋升方案</h3><ul><li>人员的提拔晋升，在员工的激励中，属于机会激励的范畴，主要针对的是绩效突出、表现优秀的员工，为他们的发展提供更多的机会和途径。</li><li>很多企业的优秀员工最后都是走上管理岗位，成为管理干部，但是也有一些优秀的员工，可能更愿意在自己的专业上不断深入、不断钻研，因此，对员工的选拔和晋升需要考虑专业通道的设计。</li><li>华为的人员发展通道包括管理通道和专家通道<h4 id="6-6-1-干部选拔"><a href="#6-6-1-干部选拔" class="headerlink" title="6.6.1 干部选拔"></a>6.6.1 干部选拔</h4></li><li><strong>四个要求</strong><ul><li><strong>华为要求干部必须拥有正确的价值观，这是衡量员工能否成为干部的核心基础</strong><ul><li>如果员工的个人价值观与公司价值观不能做到高度契合，那这样的员工是无法被选拔为干部的。</li><li>华为认为，选干部就是要选同心人，干部的首要责任就是践行和传承公司的价值观和文化。</li><li>而员工真正要能够在内心深处认同这样的价值观，并且愿意向周围的同事、下属传递，这本身就需要一个较长时间的熏陶和领悟。</li><li>华为的各位中高层管理者，就会发现几乎全部是从普通员工开始，在多年的工作中被一步一步提拔上来的。</li></ul></li><li>对于干部价值观的考察<ul><li>围绕“以客户为中心”开展工作，把“为客户创造商业价值”作为主要目标，而不是以上级为中心开展工作；</li><li>持续保持奋斗激情，尤其是具备艰苦奋斗的精神，工作充满激情，有干劲，不惰怠</li><li>坚持自我批判，能听进不同的声音，保持开放包容的心态。</li></ul></li><li><strong>华为非常看重干部的品德，并且越是高层的干部，品德和作风就越重要</strong><ul><li>华为大学进门口处有一块石碑，上面刻着 8 个大字：小胜靠智，大胜在德。</li><li>对于员工和干部的品德，华为主要通过关键事件来考察。干部在任前会接受 360° 调查，如品德作风方面有问题，会被一票否决。</li><li>另外，公司的党委还会负责受理相关投诉，但要求举报必须实名制，党委会为举报者保密。<ul><li><strong>3 个维度去评价干部的品德与作风</strong><ul><li>客观公正地用人：无私，不拉帮结派，不按个人喜好来评价人和任用人，公平对待下属。</li><li>真正对事情负责：实事求是，敢讲真话，敢于批评公司及上级，不捂盖子，不谎报军情，报喜更报忧，不夸大业绩。</li><li>能经受住不公平：耐得住寂寞，受得了委屈，懂得妥协，能处理好大我与小我的关系。</li></ul></li></ul></li></ul></li><li><strong>绩效是干部选拔的分水岭</strong><ul><li>在华为，绩效排名前 25% 的员工才能获得干部选拔的资格</li><li>同时，对于某些工作业绩良好，但在级别、资历上尚不满足要求的员工，华为也提供了破格提拔的可能性。</li><li>华为主要通过以下 3 个方面来进行评价绩效<ul><li>个人努力带来了绩效：评价干部绩效不是简单地看财务指标，还要看干部具体做了什么，干部只做上传下达的工作，不指导、不思考、不决策，这样的行为属于不作为。</li><li>为客户做出了贡献：要和客户共创商业成功，要帮助客户解决痛点，帮助客户更好地发展业务。</li><li>持续拥有高绩效：衡量干部绩效要看该干部的绩效是持续的高绩效，还是一两次的偶然事件，长期持续的高绩效才能体现干部的真实绩效水平。</li></ul></li></ul></li><li><strong>素质和能力是管理者能带领团队持续取得高绩效的关键要素</strong><ul><li>干部九条<table><thead><tr><th>建立客户的能力</th><th>建立华为公司的能力</th><th>建立个人能力</th></tr></thead><tbody><tr><td>关注客户</td><td>团队领导</td><td>成就导向</td></tr><tr><td>与之建立伙伴关系</td><td>塑造组织能力，跨部门合作</td><td>组织承诺，战略思想，理解他人</td></tr></tbody></table></li><li>干部四力</li></ul></li></ul></li></ul><table><thead><tr><th>干部四力</th><th>决断力</th><th>执行力</th><th>理解力</th><th>人际连接力</th></tr></thead><tbody><tr><td>解读</td><td>战斗决断力</td><td>业务执行力</td><td>战略洞察力</td><td>客户拓展力</td></tr><tr><td>维度</td><td>善于抓住主要矛盾及矛盾的主要方向（战略思维）敢于决策和承担责任（战略风险承担）</td><td>目标结果导向，在资源和时间约束下出色的完成工作（目标结果导向）组织运作能力建设与持续改进（组织发展)激励与发展团队跨部门协作、协调与推动（跨部门合作）</td><td>理解业务（商业敏感）理解文化（跨文化融合）理解环境（横向思维）</td><td>开放性，善于与客户打成一片（建立客户伙伴关系）妥协、灰度</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li><strong>三个优先</strong><ul><li>满足了以上四个要求的员工，实际上就具备了被选拔为领导干部的必要条件。在华为的干部选拔过程中，还有三个优先原则，也是值得学习的。</li><li><strong>三个优先</strong><ul><li><strong>从一线选拔原则</strong><ul><li>只有在一线长期战斗过、在实践中取得成功经验的人，他们的能力和眼界才足以带领更大的团队。</li><li>任正非曾经说过“都江堰疏导不了太平洋”“秦淮河边上产生不了世界领袖”，就是对于从一线选拔原则的最好阐述。</li></ul></li><li><strong>从优秀团队选拔原则</strong><ul><li>华为主张在英勇善战、不畏艰苦、能够为公司创造价值的员工群体中选拔后备干部，因为在“打下山头”的人里，一定有人可以做“连长”。</li><li>华为给予在艰苦地区工作的员工更多晋升机会。认同公司价值观、吃苦耐劳、有艰苦奋斗精神的人是可以被优先提拔为干部的，而做不到这一点的人就只能做基层员工。</li></ul></li><li><strong>坚持干部年轻化</strong><ul><li>为从成立之初，就不拒绝任用年轻干部，只要是德才兼备，就有可能被提拔，</li><li>对于年轻干部的选拔，华为更看重关键事件，会给予一定层级主管破格提拔的权力；对于破格提拔的人选，还会加大宣传力度，让其他员工明白人人都有被提拔的机会。</li></ul></li></ul></li></ul></li><li><strong>“之”字形发展</strong><ul><li>如果一名员工被提拔为管理干部，并不意味着从此一劳永逸，反而会对员工的各项能力和素质提出更高的要求。</li><li>与很多企业干部在同一部门不断提升的直线型发展不同，华为干部的成长路径呈现的是一种“之”字形发展路线，<ul><li>很多时候干部面对的是不同的管理场景和业务模式，</li><li>他们往往需要在不同的部门甚至是完全不同的业务方向上进行轮换。</li></ul></li><li>以余承东为例，他的晋升就是典型的“之”字形发展，<ul><li>从 1993 年加入华为时候的研发工程师，</li><li>到产品行销总裁，再到地区部总裁，</li><li>最后成为华为终端公司的 CEO，</li><li>整个发展路径就是职位职级不断向上升，同时岗位又在不同的大部门之间轮换。</li></ul></li><li>“之”字形的干部发展方式，对于企业发展的作用也非常大<ul><li>管理干部的职位在企业内部进行轮换，可以将优秀的管理经验和技能传播到各个部门，有利于企业各部门均衡发展。</li><li>管理干部在不同的部门工作中可以不断积累实践经验，自身的认知宽度也会得到加强，这样能够有效加深对企业的了解，对公司的发展方向也能有更加清晰的认识</li><li>管理干部的轮换，客观上也减少了企业内部腐败发生的概率</li></ul></li></ul></li></ul><h4 id="6-6-2-员工晋升"><a href="#6-6-2-员工晋升" class="headerlink" title="6.6.2 员工晋升"></a>6.6.2 员工晋升</h4><ul><li><strong>取得良好的绩效</strong><ul><li>员工首先要有优良的绩效，要能够为企业、为客户创造价值。</li><li>华为就规定了，员工必须取得 B 以上的绩效成绩，才有机会参加任职资格认证。</li></ul></li><li><strong>通过任职资格认证</strong><ul><li>任职资格认证的价值是帮助员工“照镜子”，指引员工持续提升工作能力。</li><li>员工必须通过任职资格评定，才能获得晋升，进而获得薪酬调整的机会。</li><li><strong>介绍</strong><ul><li>员工可以提出任职资格认证的申请，并经过上级主管确认，也可以由主管直接推荐</li><li>认证采用分层分级的方式，2 级以下认证采用逐项评议方式，3 级及以上认证采用答辩会和集体评议方式；</li><li>为增加认证的透明度，任职申请材料或认证结果其中一项需进行公示；</li><li>在认证过程中，评审专家们会对员工进行提问，并在认证结束后进行点评，反馈员工的优点和改进点，认证结果由上级主管负责沟通。</li></ul></li></ul></li><li><strong>人岗匹配后提升职级</strong><ul><li>任职资格体现了员工的能力级别。而华为针对每个职位，也设定了职级。员工获得任职资格后，就可以进行人岗匹配。</li><li>基于这样的逻辑，华为就能有效地牵引员工努力的方向，</li><li>逐渐提高一线岗位的职级，逐渐提高一些新产业、新市场、艰苦地区的岗位职级</li><li>业务专家的岗位职级，可以不低于甚至高于所在部门的行政主管的职级。</li></ul></li><li><strong>以职级匹配相应的薪酬</strong><ul><li>华为工资管理的“十六字方针”：以岗定级、以级定薪、人岗匹配、易岗易薪。</li><li>员工走技术专家路线，一样可以拿高薪，这对于华为这样一个技术导向型的企业有着非常重大的意义。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.跟着华为学管理-绩效管理</title>
      <link href="2022/04/27/%E7%AE%A1%E7%90%86/5.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E7%BB%A9%E6%95%88%E7%AE%A1%E7%90%86/"/>
      <url>2022/04/27/%E7%AE%A1%E7%90%86/5.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E7%BB%A9%E6%95%88%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="5-跟着华为学管理-绩效管理"><a href="#5-跟着华为学管理-绩效管理" class="headerlink" title="5.跟着华为学管理-绩效管理"></a>5.跟着华为学管理-绩效管理</h2><h3 id="5-1-如何设置团队绩效考核内容"><a href="#5-1-如何设置团队绩效考核内容" class="headerlink" title="5.1 如何设置团队绩效考核内容"></a>5.1 如何设置团队绩效考核内容</h3><ul><li>绩效管理不仅可以引导员工行为，还可以指引组织内部的管理改进，最终支撑战略的落实和达成。</li><li>从绩效管理的全过程看，绩效上接战略，下接激励，以文化为基础，以能力为支撑，</li></ul><h4 id="5-1-1-团队绩效考核的误区"><a href="#5-1-1-团队绩效考核的误区" class="headerlink" title="5.1.1 团队绩效考核的误区"></a>5.1.1 团队绩效考核的误区</h4><ol><li><strong>通过制定很高的绩效目标来拉动结果</strong><ul><li>但对于这种员工经过自己的努力也无法完成的目标，不仅起不到鼓动员工的作用，反而让员工工作中总是疲于奔命，并且成就感很低，甚至还会给员工造成极大的心理压力</li></ul></li><li><strong>通过设置大而全的考核内容来代替日常管理</strong><ul><li>基本上你能想到的工作内容都变成了考核项，使得员工花了很多精力来应付考核，而真正有价值的工作反而做得不好。</li></ul></li><li><strong>只设置本部门的考核内容, 忽略了上下关联和左右协同</strong><ul><li>团队负责人没有关注公司整体的业绩，而只是关注自身团队的任务，</li></ul></li><li><strong>只关注短期，忽视长期性的工作考核</strong><ul><li>比如，对销售团队，管理者会制订今年完成多少销售额，却不太关注产品的渠道体系建设和客户满意度这样的长期性工作。</li></ul></li></ol><h4 id="5-1-2-团队绩效考核的导向"><a href="#5-1-2-团队绩效考核的导向" class="headerlink" title="5.1.2 团队绩效考核的导向"></a>5.1.2 团队绩效考核的导向</h4><ul><li>绩效管理工具——平衡计分卡<ul><li>平衡计分卡通过财务、客户、内部运营、学习与成长这四个维度，指引企业把战略目标分解为各部门乃至每个员工的考核指标。</li><li>平衡计分卡反映了财务与非财务衡量方法之间的平衡、长期目标与短期目标之间的平衡、外部和内部的平衡、结果和过程平衡，以及管理业绩和经营业绩的平衡等多个方面。<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/5.balance-card.png"></li><li>维度<ul><li><strong>能否牵引业务增长</strong> <strong>财务维度</strong><ul><li>这里所说的业务增长，是一个长期动态的过程</li><li>必须跟客户长期接触，真正理解客户需求，且能适配客户需要的产品解决方案，才能获得客户认可。</li><li>只有客户发自内心认可你，认可你的产品是真正有价值的，才会成为你的长期合作伙伴。</li><li>华为帮助得到和自己的客户建立联系，得到了和得到合作的机会。</li><li><strong>对于销售类和产品解决方案类直接面向客户的创造业绩的团队，在设置绩效考核内容的时候，不能仅仅把销售额当作考核指标，而是要兼顾客户的认可度和满意度。</strong></li></ul></li><li><strong>能否牵引客户满意度提升</strong> <strong>客户维度</strong><ul><li>在企业中，销售团队和产品解决方案团队经过种种努力，把企业的产品或者服务销售出去，才仅仅是一个开始。</li><li>对于客户而言，他们付钱以后，是要拿到真正令人满意的产品，或者享受到令人满意的服务。而这些就是交付相关团队的工作。</li><li>以研发团队为例，向销售团队提供技术支撑、帮交付团队解决技术问题，都是很重要的服务内容<ul><li>这里的销售团队、交付团队对于研发团队而言，就是内部客户。因此，对于企业内的团队而言，能否同时很好地服务于内、外部客户，也是团队考核的重要内容。</li></ul></li><li><strong>举例</strong><ul><li><strong>研发部门</strong><ul><li>更多的是考核客户对于产品的满意程度，看重的是产品的商业成功，</li><li>同时还要考核给销售、交付部门提供支撑服务和解决技术问题的能力。</li></ul></li><li><strong>售后服务团队</strong><ul><li>能否为客户解决这些问题，是提高客户满意度的最重要指标。</li><li>良好的售后服务能让客户的忠诚度迅速得到提升。</li><li>对这个部门的考核，最重要的是如何快速高效地解决客户的问题。</li></ul></li><li><strong>HR 部门和财务部门</strong><ul><li>都是非常重要的需要同时服务于内、外部客户的部门</li><li>除了常规的业务完成情况等指标以外，</li><li>能否很好地服务内、外部客户,以及提高客户的满意度等指标都是这些部门非常重要的考核内容。</li></ul></li></ul></li></ul></li><li><strong>能否牵引组织运作效率提升</strong> <strong>内部运营维度</strong><ul><li>在企业中，一些部门运营能力的高低会直接影响企业运营的成本，</li><li>比如生产和供应链部门，如果生产的产品质量好，故障率低，供应链部门效率高，就会帮助企业大大降低成本。</li><li>与咨询公司合作后，对供应链进行了重大变革，可以大大降低成本</li><li>对于生产和供应链等部门，在考核内容的设置上，要把能否为企业节约运营成本作为重点，这会直接牵引团队在降低运营成本上做出更多的努力。</li></ul></li><li><strong>能否牵引组织能力提升</strong> <strong>学习与成长维度</strong><ul><li>要想满足上述的业务增长、客户满意度和组织运作效率提升，最重要的是组织能力的提升。</li><li><strong>在所有团队的绩效考核内容中，一定要有一定的比重考核组织能力建设相关的工作</strong></li></ul></li><li></li></ul></li><li>总结<ul><li>虽然团队绩效最容易看到的是业绩，但团队的考核却应该全面均衡来设定，这样才能支撑业绩达成。</li></ul></li></ul></li></ul><h3 id="5-2-如何设置团队绩效评价周期"><a href="#5-2-如何设置团队绩效评价周期" class="headerlink" title="5.2 如何设置团队绩效评价周期"></a>5.2 如何设置团队绩效评价周期</h3><ul><li>绩效评价周期的制定是非常玄妙而又非常重要的，如果能设定出合适的评价周期，对于团队的绩效管理会有很大促进作用。<h4 id="5-2-1-不同团队类型的评价周期特点"><a href="#5-2-1-不同团队类型的评价周期特点" class="headerlink" title="5.2.1 不同团队类型的评价周期特点"></a>5.2.1 不同团队类型的评价周期特点</h4></li><li><strong>研发团队</strong><ul><li>较多地以项目作为评价维度,经常会把项目里面的“里程碑”作为考核或评价节点。</li><li>因为研发项目通常不可能很快达到一个结果，所以如果把评价周期定成按天或者是按月，那就不是非常合理和科学。</li><li>但如果周期设定太长，往往又失去了评价的意义。</li></ul></li><li><strong>销售团队</strong><ul><li>To B 的项目，通常决策链是比较复杂的，因此评价周期就会相对比较长；<ul><li>华为的运营商销售，项目特别复杂，决策链也复杂，那对他们的评价就有可能是按照季度或者半年来进行了。</li></ul></li><li>To C 的项目，通常决策会相对比较简单，因此评价周期也会较短。<ul><li>手机店的销售人员，决策链就比较简单，所以他们可以按天来进行考核或评价；</li></ul></li></ul></li><li><strong>服务运营团队</strong><ul><li>通常可以按照月或者季度这样一个周期来统计。</li><li>对于一些特殊日期，比如春节、春运，就得针对这些关键节点制定那段时间的特殊保障服务和评价“小周期”，</li></ul></li><li><strong>中后台的一些职能团队</strong><ul><li>通常都是以季度为评价周期，因为中后台确定性的工作会比较多，</li><li>如果以月作为评价周期的话，颗粒度划分过细，没有太大的必要。</li></ul></li><li><strong>管理者也看作是“一个团队”</strong><ul><li>层级越高的管理者，评价周期会设置得越长，因为他们有更多的工作内容是面向未来、面向公司战略层面的<ul><li>考核的周期可以长达 2~3 年（一个任期），普通的可以是 1 年</li></ul></li><li>而层级越低的管理者，评价周期会设置得越短，这是因为他们要完成的工作更多是细节的、待落地和待执行的<ul><li>而某些基层管理者的评价周期就有可能是季度甚至月度的。</li></ul></li></ul></li></ul><h4 id="5-2-2-设置评价周期的考虑维度"><a href="#5-2-2-设置评价周期的考虑维度" class="headerlink" title="5.2.2 设置评价周期的考虑维度"></a>5.2.2 设置评价周期的考虑维度</h4><ul><li><strong>团队的工作性质</strong><ul><li><strong>工作复杂度</strong><ul><li>通常对成员的个人能力、知识水平和素质的要求以及团队协同工作的要求也越高</li><li>通常相应的绩效评价周期设置得也就越长；相反，工作难度越低，对员工的要求相应也就越低，评价周期也应该相应地设短。</li></ul></li><li><strong>工作成果确定度</strong><ul><li>工作成果确定程度越高，绩效评价周期就应该越短；</li><li>而不确定程度越高，相应的评价周期就应该越长，因为这就需要更多的时间去验证工作的成功与否。</li><li>比如，生产型团队工作成果的确定程度就比研发团队的确定程度高</li></ul></li><li><strong>工作成功要素的多元程度</strong><ul><li>团队工作的成功要素越多元，难度越大，评价周期的设置就越长</li><li>做企业管理的团队。但如果工作成功的要素比较单一，难度也没有很大，那么评价周期就应该短一些</li></ul></li></ul></li><li><strong>团队的整体层级</strong><ul><li>层级越高的团队，评价周期的设置可以越长；层级越低的团队，评价周期设置得越短。</li><li>通常越是层级高的团队，工作成果的验证周期也会相对比较长，如果评价周期设置得太短了，就失去了考核的本来意义。</li><li>高层级的团队也是从低层级慢慢提拔上来的，本身的自我管理能力、自我约束能力以及工作的主动性都比较强，因此将评价周期设置得长一点，也不会影响团队的工作态度和成果。</li></ul></li><li><strong>企业的管理成熟度</strong><ul><li>企业的管理成熟度越高，企业内部团队的评价周期就可以设置得越长<ul><li>对于管理成熟度高的企业而言，其内部整体的工作流程、工作机制以及团队内部、团队间的协作体系都是比较完善的，</li><li>团队成员的工作可以被企业的日常管理所牵引和拉动，</li></ul></li><li>而初创或者小规模企业，在管理成熟度还不够的情况下，就可以将评价周期设置得相对较短些，以确保团队管理的有效性。</li><li><strong>分享</strong><ul><li>2009 年之前，华为的绩效评价都是按照季度来进行的，也就是说每年有 4 次季度考核、1 次年度考核，总计 5 次，考核的频率是相对比较高的。</li><li>但从 2009 年开始，华为改变了绩效评价的频次，每年只有上半年结束以后的年中考核和年底的年度考核，总共只有 2 次。从 5 次变成 2 次，考核频率大大降低，但大家都觉得绩效管理的效果却没有降低。</li><li>华为从 20 世纪 90 年代后期开始管理变革，到 2009 年已有十多年的时间，这个过程中，华为的管理成熟度已经有了很大的提升。</li><li>华为持续每年推行末位淘汰制，所以真正沉淀下来的都是自我管理意识和管理能力很强的员工。</li></ul></li></ul></li><li><h4 id="5-2-3-合理设置团队绩效评价周期"><a href="#5-2-3-合理设置团队绩效评价周期" class="headerlink" title="5.2.3 合理设置团队绩效评价周期"></a>5.2.3 合理设置团队绩效评价周期</h4><ul><li><strong>观察所在行业的整体情况</strong><ul><li>去观察行业内通行的做法，并将其作为自己设置评价周期的依据。</li><li>比如，一家企业内同时有 To B 业务和 To C 业务，那么负责这两部分业务的团队，在评价周期的设置上就要采取不同的策略。</li></ul></li><li><strong>自我评估企业的管理成熟度</strong><ul><li>理性客观地进行自我评价</li><li>必要的时候还可以请第三方中立机构来协助做这样的评估，这样得出的结果会更加精准</li></ul></li><li><strong>评估具体团队的管理水平</strong><ul><li>在对不同的团队设置评价周期的时候，还要参考团队当前具体水平</li><li>包括团队内部的协同能力、员工的自我约束能力和工作主动性等</li></ul></li><li><strong>总结</strong><ul><li><strong>绩效评价的目的是促进业务的发展，评价本身只是一个手段</strong></li><li>如果频率太密的话，会浪费时间和精力，对员工的工作连续性也会有所破坏</li><li>条件允许的时候，就把周期放长些，以降低评价成本。</li><li>在能力不成熟的情况下，周期过长也会造成反馈太迟、不利于牵引工作绩效的改进、失去了绩效考核的价值等不太好的情况发生。</li></ul></li></ul></li></ul><h3 id="5-3-如何进行团队组织绩效评价"><a href="#5-3-如何进行团队组织绩效评价" class="headerlink" title="5.3 如何进行团队组织绩效评价"></a>5.3 如何进行团队组织绩效评价</h3><ul><li>即使团队的目标是可量化的，但往往由于工作难度不同和业务差异化，用简单的数据加总打分，往往无法客观反映团队的绩效水平高低。</li></ul><h4 id="5-3-1-组织绩效的评价要素"><a href="#5-3-1-组织绩效的评价要素" class="headerlink" title="5.3.1 组织绩效的评价要素"></a>5.3.1 组织绩效的评价要素</h4><ul><li><strong>战略目标和经营目标是同等重要的, 考核要关注数字，但是不能唯数字论，需要多方面的平衡。</strong><ul><li>华为<ul><li>任正非给当时俄罗斯市场的负责人定了一个战略目标：把俄罗斯欧洲侧的市场打下来</li><li>在后续的两年间，俄罗斯的各项年度财务指标都完成了，可就是“把欧洲侧市场拿下”的目标没达成</li><li>整体的组织绩效目标就没有完成，这位负责人也因此被撤换了。</li></ul></li><li>手套企业，由于疫情原因，订单越来越多，如何对销售团队做考核<ul><li>要看销售团队的工作做得好不好，一定要关注工作事实，要基于事实来分析，做出综合的判断。</li><li>销售团队的工作和去年比有哪些不同？是更容易了，还是更难了？</li><li>销售团队做了哪些关键的行为？这些行为只是简单地被动式响应和对接，还是主动出击寻找客户？</li><li>从实际销售数据分析，新增的业务中有多少是销售团队努力带来的？有多少是客户主动找上门的？</li></ul></li><li><strong>对于团队的评价，不能仅仅只看结果，还要看结果背后的过程、团队的关键行为，以及这些关键行为是不是真正能起到作用，在达成结果的过程当中又起到了多大的作用。</strong></li><li><strong>总结来说</strong><ul><li>对组织绩效的评价，要看结果，也就是经营目标和战略目标，这是第一个要素；</li><li>但只看结果一定是不客观的，还需要看绩效结果是如何得来的，也就是要关注过程和过程性结果这两个要素。</li></ul></li></ul></li></ul><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/5.revelate.png"></p><h4 id="5-3-2-组织绩效的评价维度"><a href="#5-3-2-组织绩效的评价维度" class="headerlink" title="5.3.2 组织绩效的评价维度"></a>5.3.2 组织绩效的评价维度</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/5.compare.png"></p><ul><li><p><strong>和自己比</strong></p><ul><li><strong>和前期设定的目标比</strong></li><li><strong>和自己的历史最高水平比</strong><ul><li>团队的工作完成得好与不好，仅仅以是否完成目标来评价显然是不够的。</li><li>因为目标可能设置得不完全精准，又或者因为外部环境变化，目标的合理性会有偏差</li><li>和历史业绩对比会是一个非常直观地体现绩效水平的方式</li><li>通过和历史业绩的对比，也等于从组织能力维度进行了评价。</li></ul></li></ul></li><li><p><strong>和对手比</strong></p><ul><li>如果组织绩效评价只关注“和自己比”，那么很容易出现“一叶障目，不见泰山”的局面。</li><li>反过来，如果大环境很差，虽然企业的目标没有完全达成，但如果同行业的对手普遍完成得更不好，那企业的绩效应该还能排在前列。</li><li><strong>“和对手比”这个评价维度，能给到企业更全面和客观的视角来看待自身的组织绩效，以做出更合理的判断。</strong></li></ul></li><li><p>总结</p><ul><li>对团队的组织绩效评价，最终目的是支撑公司的持续发展，达成短期和长期目标。因此，对于团队组织绩效的评价，既要看团队内部的因素，也要看团队外部的因素，包括市场环境等方面的因素。通过多个要素、多个维度的考量，尽可能做到客观公正。</li></ul></li></ul><h3 id="5-4-如何与落后者进行绩效沟通"><a href="#5-4-如何与落后者进行绩效沟通" class="headerlink" title="5.4 如何与落后者进行绩效沟通"></a>5.4 如何与落后者进行绩效沟通</h3><ul><li>跟业绩好的员工做绩效沟通，多以正面表扬为主，整体气氛会比较轻松和融洽</li><li>但跟业绩不好的员工沟通，情况就不同了，往往需要谈及工作中不好的一面。</li><li>对于那些长期业绩不好且经过多次沟通还是没有明显改进的员工，管理者就要考虑安排其转岗或者直接予以淘汰。</li></ul><h4 id="5-4-1-绩效沟通的四个环节"><a href="#5-4-1-绩效沟通的四个环节" class="headerlink" title="5.4.1 绩效沟通的四个环节"></a>5.4.1 绩效沟通的四个环节</h4><ul><li><strong>准备环节</strong> 全面客观地了解事情的背景<ul><li>复盘一下这个员工在这个考核周期里，哪些工作是比较欠缺的，哪些工作是做得比较好的</li><li>回顾一下员工绩效较差的核心原因是什么，找几个周边同事沟通一下，看看大家的反馈</li><li>分析一下员工可能的问题，并跟人力资源的同事也碰头讨论一下，达成基本的判断；</li><li>针对员工的问题，提前考虑对应的改进建议，作为绩效沟通的素材</li></ul></li><li><strong>倾听环节</strong><ul><li>管理者要给员工主动权，让员工自己回顾工作，通过员工总结，尽可能多地了解员工的想法。<ul><li>不至于让员工有压迫感，以保证沟通顺畅进行</li><li>基于前期准备环节中了解到的情况，先在头脑中验证一下，了解员工的自我认知，识别员工是真正意识到了问题，还是在找借口推脱责任。</li></ul></li><li>员工会自觉或不自觉地把业绩不好的原因归结为外部因素，不要打断。这是人的一种自我保护意识，也是人性的弱点——人还是害怕面对自己的不足的。</li></ul></li><li><strong>引导探讨环节</strong><ul><li>管理者就需要引导员工的沟通方向，把纠结于外部因素变成面对自身的问题</li><li>不纠结过去，要面向未来。因为只有面向未来，员工才不至于那么抵触，也就会卸下一些压力，愿意主动去讲对未来工作的思考</li><li>如何引导呢<ul><li>错误 你来说说你前一段的工作业绩不理想的原因是什么。</li><li>正确 假如你要从三个方面来改进自己未来的工作，你觉得最重要的是哪三点<br>员工回答出未来在哪三个方面来改进自己工作的时候，就是承认自己过去工作的不足之处了。但这个谈论“面向未来”的过程，能降低员工的沟通压力，让问题得以自然而然地曝光。<ul><li>管理者就可以引导员工思考后续的工作重点，和员工讨论执行的内容，并达成共识了。这其实也是员工个人绩效改进计划的形成过程。</li></ul></li><li>如果员工在谈这三点的过程中还是避重就轻，管理者就要直接说出自己的看法了</li><li>我观察到上个季度你在 XX 方面的工作进展是延迟的，希望接下来的这个季度要重点关注，及时达成成果</li><li>重点还是面向未来，而不是纠结于过去</li><li>在说出员工不足的同时，管理者还要给出一些有针对性的建议。这个时候，员工通常还是愿意接受的，因为员工会感受到管理者在关注他未来的工作，而不是在指责他过去那些不好的工作结果。</li></ul></li><li>引导探讨的目标就是用共同探索未来来替代指责员工的问题，降低员工的排斥感和抗拒感。</li></ul></li><li><strong>听取反馈环节</strong><ul><li>听取反馈环节，是让员工向管理者提建议的过程。</li><li>因为，要帮助绩效不好的员工进步，也需要让员工开诚布公地谈谈他对管理者的意见和建议。</li><li>这也是管理者进行自我反思和自我提升的一个很重要的手段。</li><li>在华为，有一个管理共识是：如果下属的业绩不好，那管理者也有责任。<ul><li>管理者要给员工这样的机会，让员工来讲一讲他希望管理者怎么做、在哪些方面给他提供帮助等。</li><li>这个环节很有现实意义，可以营造一种平等沟通的氛围，使员工更愿意和管理者沟通。<h4 id="5-4-2-绩效沟通的四个避免"><a href="#5-4-2-绩效沟通的四个避免" class="headerlink" title="5.4.2 绩效沟通的四个避免"></a>5.4.2 绩效沟通的四个避免</h4></li></ul></li></ul></li><li><strong>避免空谈主观感受</strong><ul><li>管理者在沟通过程中要尽量避免把自己的主观感受作为跟员工沟通的依据</li><li>管理者在跟员工沟通的过程中，要尽可能围绕“事情”来谈，避免围绕“人”来谈</li><li>可以说：“这件事情应该这样做会更合理。”而不是说：“我觉得你在这些地方、那些地方做得不好。</li><li>围绕“人”来谈，会陷入一种个人批判的状态，而围绕“事情”来谈，体现的是复盘的思维，会让人感觉比较客观和理性。</li></ul></li><li><strong>避免家长式沟通</strong><ul><li>管理者在面对绩效落后的员工时，会有恨铁不成钢的感觉，于是就会把自己认为正确的方法用家长式的口吻传递给员工，要求员工接下来如何去做。</li><li><strong>哪怕管理者说得确实有道理，但方式不对，员工的接受程度就会下降</strong></li><li>在面对员工的一些问题时，管理者要多引导员工自己来思考，而不要代替员工回答问题。</li><li>通过启发式的引导，让员工自己找出解决问题的方法和措施，</li><li>一方面帮助员工解决具体的问题，另一方面也可以帮助员工持续进步。</li></ul></li><li><strong>避免不合适的沟通环境</strong><ul><li>管理者在跟员工进行沟通的过程中，要把沟通的场所和氛围也作为一个重要的因素考虑进去</li><li>避免在一些气氛比较压抑的办公室、经常讨论严肃问题的会议室等场所进行沟通，这样的场所会让员工，特别是绩效比较落后的员工，有一种被封闭审判的感觉</li><li>通常来说，咖啡馆、茶座或者办公室的活动区等场所会是不错的选择，又或者在户外边走边聊，这样的方式，双方都会感觉比较轻松，更能够敞开心扉进行沟通。</li></ul></li><li><strong>避免无行动的沟通</strong><ul><li>沟通完后，只是让员工明白了问题所在，却没有后续的行动计划。这样的话，员工就很有可能没有很好地落实沟通的解决方案，在下一次考核中依然没能改进。</li><li>一定要记住，沟通是为了改进。因此，在沟通的最后，一定要制订后续的行动计划并持续跟进。</li><li>跟进的方式可以是不定期地检查员工工作的进度和质量，也可以是确定下一次的面对面沟通。这样，员工会觉得这个沟通是非常正式的，也会更重视行动计划的落地。<h4 id="5-4-3-四种意外情况的应对"><a href="#5-4-3-四种意外情况的应对" class="headerlink" title="5.4.3 四种意外情况的应对"></a>5.4.3 四种意外情况的应对</h4></li></ul></li><li><strong>员工情绪崩溃，开始哭泣</strong><ul><li>管理者在面对这个情况的时候，要充分理解员工，毕竟面对业绩压力的时候，员工承受不住，情绪崩溃也是常有的事。</li><li><strong>恢复情绪</strong><ul><li>不要急着说话，可以沉默片刻</li><li>递上面巾纸，让员工情绪平复</li><li>员工停止哭泣时，询问其是否愿意谈谈刚才心里的想法</li><li>如果当天员工的状态一直很低落，再约另外的时间</li></ul></li></ul></li><li><strong>员工与管理者发生冲突或争执</strong><ul><li>先冷静一两分钟</li><li>告诉员工争吵解决不了任何问题</li><li>重申沟通的目的，建议谈具体的问题</li><li>如果争执持续，那就暂停沟通，另行安排时间</li><li>让员工以邮件的方式反馈他的态度</li></ul></li><li><strong>员工不愿意发言</strong><ul><li>再次向员工说明沟通的目的，让他放下顾虑</li><li>告诉员工，他的发言是沟通的基础</li><li>与员工一起探索未来发展的可能性</li><li>让员工先说说对管理者的反馈意见</li></ul></li><li><strong>员工把绩效不好的原因归咎于管理者</strong><ul><li>倾听，但不要反击</li><li>确定员工所说的内容有没有一些是客观的</li><li>跟员工回顾工作目标和绩效评价的问题，要有具体明确的例子</li><li>与员工共同制订下一个评价周期的目标和行动计划</li></ul></li></ul><h3 id="5-5-如何设计绩效改进计划"><a href="#5-5-如何设计绩效改进计划" class="headerlink" title="5.5 如何设计绩效改进计划"></a>5.5 如何设计绩效改进计划</h3><p>如何团队层面的绩效改进</p><h4 id="5-5-1-组织绩效的问题及诊断"><a href="#5-5-1-组织绩效的问题及诊断" class="headerlink" title="5.5.1 组织绩效的问题及诊断"></a>5.5.1 组织绩效的问题及诊断</h4><ul><li><strong>三个层面</strong> <ul><li><strong>业务层面</strong><ul><li>战略方向对不对、战略目标设定是否合理，以及公司的业务设计、产品设计是否符合客户需求这几个视角来进行分析，从而识别业务方面的问题所在。</li><li>业务经营问题会严重影响企业的绩效结果，要引起高度重视。</li></ul></li><li><strong>组织层面</strong><ul><li>通常可以从组织架构是否适配业务周期、团队内部的流程体系是否能够让组织流畅运行，以及组织的定位、内部的分工协同机制是否合理等这几个视角来进行分析。</li><li>组织和业务的关系，可以比作是路和车的关系：业务是车，组织是路。再好的车开在田间小路上，也开不出速度来。</li><li>好的组织运作体系下，所有人按照规则来工作和协同，就很容易达成“一加一大于二”的效果。但如果组织体系无法很顺畅地运行，就会把人的价值降低，组织绩效也就很难有保障了。</li></ul></li><li><strong>个人层面</strong><ul><li>通常可以从人员配置的合理性以及员工的知识、技能、经验和工作意愿等方面来分析。</li><li>人不对，事情就不可能对。因为工作需要人来做，人是重要的生产要素。</li></ul></li></ul></li><li><strong>两个工具</strong><ul><li><strong>韦斯伯德的”六个盒子”</strong> 组织运作中非常重要的六个因素<ul><li>使命和目标、组织和架构、关系和流程、绩效和激励、支持和帮助、领导和管理</li><li>不少互联网企业也都在用这个工具对组织现状进行整体盘点，从而能够更宏观和全面地审视组织。</li></ul></li><li><strong>华为常用的麦肯锡的“7S 模型”</strong><ul><li>共同的价值观和企业文化、组织架构、战略、技能、人员、风格、体系。</li><li>麦肯锡认为，共同的价值观和企业文化是最为核心和重要的部分，这也是企业取得良好的组织绩效的根本要素。</li><li>其他六个维度都是围绕这一根本要素展开的，都需要符合共同的价值观和企业文化。<h4 id="5-5-2-华为的组织绩效改进"><a href="#5-5-2-华为的组织绩效改进" class="headerlink" title="5.5.2 华为的组织绩效改进"></a>5.5.2 华为的组织绩效改进</h4></li></ul></li></ul></li><li>介绍<ul><li>任正非认为，西方公司在过去的一百多年里，已经沉淀下来非常好的企业运作和管理体系，也诞生了很多百年企业，这些企业的领先实践能够带来好的绩效结果。</li><li>华为的组织绩效改进史，就是一段不断发现问题、不断变革的历史。</li></ul></li><li>分享<ul><li><strong>供应链和研发体系变革</strong><ul><li><strong>问题</strong> 产品研发的效率不高，研发的整体成功率也不是很高。</li><li><strong>解决</strong> <ul><li>华为引入了 IBM 的 IPD（集成产品开发）体系，来提升研发部门的组织绩效和组织能力。</li><li>也开始了 ISC（集成供应链）体系的变革,ISC 变革更侧重于将供应链的端到端业务运作流程进行集成，通过数据打通以及将供应链的各个流程之间的断点进行连接等各个方面的工作，达到在运作中降低内耗、提高生产效率、降低成本和缩短交付周期等良好的效果。</li></ul></li></ul></li><li><strong>销售和服务体系变革</strong><ul><li>2005 年，华为通过一次整体组织变革，把销售部门和服务部门做了一个整合，变成了一个一级部门——销售和服务体系</li><li>打破了部门墙，使得售前和售后团队变成一个利益共同体，真正站在客户视角来协作。</li><li>还构建了从线索到回款的 LTC 流程来匹配整个组织运作,做到了端到端拉通，提升了组织运作效率和客户体验，进而也有效地提升了销售和服务团队的绩效结果。</li></ul></li><li><strong>财务和人力资源体系变革</strong><ul><li>财务和人力资源在很多企业都是支撑和辅助性的定位，但通过持续变革，华为的财务和人力资源部门已经成为业务不可或缺的“左膀右臂”，是非常核心的战略部门。</li><li>华为财务体系从 2007 年开始进行变革，引入了 IBM 的顾问来做财务体系的集成。<ol><li>基于财务共享服务平台，提升员工的财务共享服务体验</li><li>从业务端，以业务流程为核心，构建和业务流程融合的财务流程，并全面适配到业务流程中，实现了业财融合。</li></ol></li><li>人力资源专业度比较强，但是对业务的融合和支持较弱，更多是管控。<ul><li>华为人力资源体系在 2009 年开始变革，把 HR 的运作模式从原来的职能模式变成三支柱模式。</li><li>新设 HRBP 这个角色来服务业务部门</li><li>整合基础的人事服务成为共享服务中心，提升基础人事服务效率和员工的服务体验</li><li>在集团层面建立和优化人力资源业务运作流程，使人力资源的专业能力也得到提升</li><li></li></ul></li></ul></li></ul></li></ul><h4 id="5-5-3-绩效改进的关键要素"><a href="#5-5-3-绩效改进的关键要素" class="headerlink" title="5.5.3 绩效改进的关键要素"></a>5.5.3 绩效改进的关键要素</h4><ul><li>绩效改进并没有标准的方案，一定要结合具体问题具体分析</li><li><strong>三个关键要素</strong><ul><li><strong>基于全面诊断</strong><ul><li>问题导向是一种务实的管理思维，只有问题明确，才能进行优先级的排序，然后遵循影响度和紧迫性从大到小的顺序，逐一去解决。</li><li>不光要自己来看问题，最好还要让客户来提意见，必要情况下可以请第三方机构帮助诊断问题。</li><li>在识别出问题后，不仅要关注眼前问题的解决，更要想办法避免类似的问题再次出现。</li><li>要从机制上去改进，避免“头痛医头，脚痛医脚”这种不究病根的做法，要从全局考虑其根本。</li><li><strong>只有从本质上解决问题，绩效改进的成果才能得以巩固。</strong></li></ul></li><li><strong>有效的资源投入</strong><ul><li>组织的绩效改进计划通常是一个专项的工作，需要有持续的资源投入，否则，就会出现“问题都看到了，就是没有人去解决”的状况。</li><li>在华为，很多专项改进计划是列入公司层级的重点工作中的<ul><li>印度代表处，前期一直业绩不太好，主要是公司没有适合印度市场的低成本产品</li><li>后来公司成立了“印度低成本解决方案项目组”，并由公司副总裁挂帅做小组组长。</li><li>有了这样的资源投入力度，才使得这个项目很快能出成果，也直接带来了印度市场的大发展</li></ul></li></ul></li><li><strong>关注低绩效员工</strong><ul><li>人作为组织中很重要的要素，个人能力对组织绩效的影响也是巨大的。</li><li>团队里的“小白兔”是危害最大的，他们兢兢业业、勤勤恳恳，就是没有业绩</li><li>管理者如果心软，做不到拿下“小白兔”，对组织的危害是非常大的</li></ul></li></ul></li></ul><h3 id="5-6-如何有效提高团队绩效结果"><a href="#5-6-如何有效提高团队绩效结果" class="headerlink" title="5.6 如何有效提高团队绩效结果"></a>5.6 如何有效提高团队绩效结果</h3><ul><li>“有效”包含两个含义：①要足够快，②要足够显著。</li><li>华为的每个团队，都在努力打赢每一场必赢之战，最终成就了企业的成功。<h4 id="5-6-1-营造高昂的团队士气"><a href="#5-6-1-营造高昂的团队士气" class="headerlink" title="5.6.1 营造高昂的团队士气"></a>5.6.1 营造高昂的团队士气</h4></li><li>不惧怕对手，积极进攻，这是华为能够快速取得胜利的主要原因之一。<ul><li><strong>坚持积极的价值观和企业文化</strong><ul><li>价值观和企业文化是团队士气的基础。</li><li><strong>积极的价值观和企业文化建设，对鼓舞团队士气非常重要</strong></li><li>华为秉持的以客户为中心、以奋斗者为本的价值观，使团队长期保持高昂的斗志，为团队取得好的业绩成果起到了催化剂的作用</li></ul></li><li><strong>选择能提振士气的团队领导者</strong><ul><li>兵熊熊一个，将熊熊一窝.一个自己就很保守、很“温和”的管理者，要想带出狼性铁军，那是不可能的。</li><li>在华为，业绩好的部门领导，都有着很强的进取心和获胜意识。</li><li>余承东曾经在一次演讲中提到：“我的字典里没有第二，我做任何事情都要是第一，而且是全球第一。</li></ul></li><li><strong>组织能提振士气的动员活动</strong><ul><li>在团队士气的营造和保持上，仪式感也是非常重要的，一场成功的动员活动会极大鼓舞士气，激发员工的动力。</li><li>2000 年，华为在深圳最高级的酒店五洲宾馆，举行了一次盛大的集会，欢送一批员工走出国门。华为把这批员工称作“一线将士”<ul><li>任正非发表了讲话，他说：“是英雄儿女，要挺身而出，奔赴市场最需要的地方。哪怕那儿十分艰苦，工作十分困难，生活寂寞，远离亲人。为了祖国的繁荣昌盛，为了中华民族的振兴，也为了华为的发展与自己的幸福，要努力奋斗</li></ul></li><li>2016 年，华为举办了一次名为“出征·磨砺·赢未来”的研发将士出征仪式，欢送 2000 名华为高级研发人员和专家奔赴市场一线<ul><li>会场上大大的“春江水暖鸭先知，不破楼兰誓不还”就很好地反映了这次大会的基调。</li></ul></li><li>2019 年 3 月 29 日,任正非、郭平、徐直军、余承东在终端公司独立成军的誓师大会上，带领华为终端公司高管集体宣誓<ul><li>会上全员喊出了“终端铁军，王者之师，勇往直前，势不可挡，胜利！胜利！胜利！”的口号，</li><li>对未来的目标预期，喊出了“3 年 1000 亿，5 年 1500 亿”，简单明了，非常直观。这给终端团队以及外界带来了巨大的震撼，也大大提振了团队的士气。</li></ul></li></ul></li></ul></li></ul><h4 id="5-6-2-制定巧妙的业务策略"><a href="#5-6-2-制定巧妙的业务策略" class="headerlink" title="5.6.2 制定巧妙的业务策略"></a>5.6.2 制定巧妙的业务策略</h4><ul><li>介绍<ul><li>取得胜利不但需要有战斗的意志，也需要有战斗的智慧。</li><li>在企业经营上，要提高团队的绩效结果，仅仅有精神是不够的，更要有经营的智慧和策略。这就非常依赖于管理层的能力和水平</li><li>管理层要善于借力，能够有效地统筹和调配资源，可以合理地运用策略，只有这样才能真正做到“四两拨千斤”，提升团队的绩效和企业的业绩。</li></ul></li><li>策略<ul><li><p><strong>设计互补的业务组合</strong></p><ul><li>早期的华为在市场上跟对手展开竞争的时候，面临的局面是：技术含量和产品质量跟竞争对手有着不小的差距，并且在品牌认可度、市场口碑等方面也都明显落后于它们。</li><li>在这种情况下要想取得竞争的胜利，就必然要在销售策略上下功夫。</li><li>华为当时的策略就是避开技术实力和质量上的弱势，不在这方面跟对手硬碰硬，而是通过种种努力把产品价格降到对手的 60%~70%，同时还把客户关系和服务质量都提升到一个很高的地位。</li><li>正是通过这样的组合，华为在一定程度上把在技术实力上落后的部分补回来了一些，这也使得华为当时的交换机产品在市场上有了一定的竞争力。</li></ul></li><li><p><strong>制定最优的作战策略</strong> 田忌赛马</p><ul><li>华为早期的市场拓展采用的是“农村包围城市”的战略，先在农村和偏远地区，集中优秀的团队进行攻坚，避免了在发达地区和大城市跟竞争对手的“硬碰硬”局面。</li><li>等到农村和偏远市场完全攻克并且巩固，同时自身的产品竞争力和运营能力都得到大幅度提升，品牌的认可度也大大提高后，再大举进入发达地区和大城市市场，这就取得了巨大的成功。</li></ul></li><li><p>** 建立敏捷的响应机制**</p><ul><li><strong>高效、快速、敏捷地做出响应。</strong><ul><li>是在击毙本·拉登的过程中，奥巴马总统和他的核心领导团队通过先进的通信设备直接指挥一线的战斗小组。</li><li>华为为什么能够赢。因为华为的响应速度太快了</li><li>提出的一些问题或需求工程师没有办法直接给出答案或者决策，散会后会立马再拉出一个团队进行电话会议，高效沟通，快速形成决策。</li></ul></li></ul><h4 id="5-6-3-配置有力的作战阵型"><a href="#5-6-3-配置有力的作战阵型" class="headerlink" title="5.6.3 配置有力的作战阵型"></a>5.6.3 配置有力的作战阵型</h4></li></ul></li><li>介绍<ul><li>就如足球比赛，阵型有很多种：442、532、4132，根据自己队员的特点，以及对手的实力和技战术特点，灵活地进行配置，目的就是形成“1+1&gt;2”的效果，用作战队形来保证团队取得优秀的战绩。</li><li>在通信行业,华为的对手都惧怕跟华为作战。华为在作战中，形成了有效的作战组合，组织战斗能力就高于对手了。</li></ul></li><li>如何配置<ul><li><strong>构建有效协同的作战队伍</strong><ul><li>通过<strong>铁三角</strong>，把客户经理、解决方案经理、交付经理这三个本来分散的角色放到同一个核心管理团队中，真正形成面向客户、以项目为中心的一线作战单元，</li><li>从点对点被动响应客户到面对面主动面对客户，大大提高了对客户需求的理解，也提升了交付的质量和效率。</li></ul></li><li><strong>让一线团队拥有更多的权限</strong><ul><li>随着华为的不断发展和壮大，不可避免地出现了一些大企业病：管理部门越来越庞大，但效率却在下降，而且这样的部门并不直接产生价值。</li><li>于是，2014 年，任正非就提出“要让听得见炮声的人来呼唤炮火”。</li><li>通过这样的办法，可以让指挥权前移，使得真正面对客户的人有更大的对公司资源和人员的调配权。</li><li>这样也让一线团队在面对客户的时候，可以更快地集中更多的资源，来满足客户的需求。</li></ul></li><li><strong>对重大项目配置超级资源</strong><ul><li>任正非从美军参谋长联席会议、诺曼底登陆，以及近几十年来多次重大战役的整个过程中受到启发，认为一些关键战役，要配备超级资源。</li><li>华为也在总部为一线的重大项目储备了大量的优质资源，成立了“战略预备队”“飞虎队”“蜂群”等作战团队，以对重大项目提供强有力的支撑。</li><li>这样，在一线人员不变、员工能力没办法在短时间内有大突破的时候，通过超级资源的调配和使用，使得一线团队的绩效有了显著的提高，公司的整体业绩也有了大幅度的提升。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.跟着华为学管理-团队目标管理</title>
      <link href="2022/04/26/%E7%AE%A1%E7%90%86/4.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/"/>
      <url>2022/04/26/%E7%AE%A1%E7%90%86/4.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="4-跟着华为学管理-团队目标管理"><a href="#4-跟着华为学管理-团队目标管理" class="headerlink" title="4.跟着华为学管理-团队目标管理"></a>4.跟着华为学管理-团队目标管理</h2><h3 id="1-如何设置团队工作目标"><a href="#1-如何设置团队工作目标" class="headerlink" title="1. 如何设置团队工作目标"></a>1. 如何设置团队工作目标</h3><ul><li>不论是对于团队还是个人，目标都有非常重要的指引作用</li><li>企业不同层面的目标是不同的。企业最长远的目标就是愿景，愿景解答了企业存在的最终目的，比如，华为的愿景是“构建万物互联的智能世界”，字节跳动的愿景是“建设全球创作与交流平台”。</li><li><strong>愿景是纲领性的目标，有了愿景，还需要进一步分解战略目标。</strong></li><li>一般而言，战略目标看 3~5 年，体现了对企业全局的一种总体设想。进而，企业还会分解出年度目标。企业内部的团队和个人，还需要进一步分解季度、月度目标。更基层的岗位，需要更细化到每天的目标。</li></ul><ol><li><p><strong>目标设置的五个原则</strong> 明确原则，才能有利于团队内部达成共识，减少冲突</p><ul><li><strong>参与性原则</strong><ul><li>管理者和员工要共同参与目标的制定。</li><li>这个共同制定的过程，也是目标沟通和达成一致意见的过程，这样达成的目标，在实施的时候才更有可行性。</li></ul></li><li><strong>系统性原则</strong><ul><li>个人目标支撑部门目标，部门目标支撑公司目标。</li><li>形成有机的系统，才能确保整体目标的达成。</li></ul></li><li><strong>可行性原则</strong><ul><li>目标制定既要有挑战性又要有实现的可能性。</li><li>目标的设置，通常不能太低，也不能太高。太低的目标，无法激发员工的潜能；太高的目标，会让员工望而却步。</li></ul></li><li><strong>灵活性原则</strong><ul><li>如果外部环境发生了变化或者客户需求有重大变化，目标可能就需要做一些调整。</li><li>如果总目标发生变化，那子目标也可以随之变化；</li><li>在总目标不变的情况下，有些分目标也可以随情况的变化做调整，但前提是不影响总目标达成。</li></ul></li><li><strong>可测性原则</strong><ul><li>目标的制定要量化或行为化，数据要可获取，以便于最终成果的统计测评。</li></ul></li></ul></li><li><p><strong>目标设置的四个步骤</strong></p><ol><li><strong>设置目标及达成共识</strong> 你需要明确目标的来源以及通过沟通来达成共识。</li></ol><ul><li><strong>上一级团队目标的分解</strong><ul><li>团队工作目标必须有效承载公司战略落地，因此，需要将企业的战略目标层层向下进行分解，将公司的大目标分解为每个团队可执行的具体目标。</li></ul></li><li><strong>团队的价值定位</strong><ul><li>企业内部的每一个组织，都有自己的独特价值。定位不同，团队的目标自然也不同。</li><li>如果销售团队定位为具体执行部门，那么团队目标就是简单地执行销售任务；</li><li>如果定位为一个销售策略规划和执行部门，那么团队的目标就不只是执行销售任务，还包括制定营销规划和策略等内容。</li></ul></li><li><strong>团队能力的薄弱项</strong><ul><li>要想把团队目标完成，团队能力是至关重要的。</li><li>在团队目标中，一定不要忘记设置团队能力提升目标。</li><li>通过设置目标，提高团队的新方向能力</li></ul></li><li>目标共识的达成通常要有两个方向，一个是自上而下，另一个是自下而上。</li></ul><ol start="2"><li><strong>梳理关键举措</strong> 关键举措，是针对目标的具体落实方法。</li></ol><ul><li>例子<ul><li>为了提高公司的年度业务收入，销售和产品团队可以采取的关键举措有：</li><li>销售团队加大对客户的拜访量，提升客户对公司和产品的了解度和接受度；</li><li>产品团队积极迭代和升级产品，增加产品功能，优化用户操作界面，进而提高产品对客户的吸引力。</li></ul></li><li>很多企业并不是没有目标，而是有了目标但没有针对目标配套的关键举措进行思考，没有找到目标落地的路径。</li><li>因为团队中不同的人，对目标的思路和想法是不尽相同的，这样大家在做事的时候就无法形成合力，资源也聚焦不起来。</li></ul><ol start="3"><li><strong>明确责任人和配套资源</strong></li></ol><ul><li><strong>责任人</strong> 需要为目标适配有能力的人来负责。<ul><li>如果目标没有责任人，或者责任人不清晰，那目标就很难落实</li><li>这样一个能力合格的责任人被指派到合适的位置后，目标实现的可能性就大大得到了提升。</li></ul></li><li><strong>配套资源</strong> 需要明确为完成目标，都要配置哪些相关的资源。<ul><li>同时适配了大量的资源来实现这个目标，包括要新增加多少人员、要匹配多少资金、要开展哪些技术合作等。</li><li>这样，目标的实现就有了适配的资源支撑，就能进一步确保目标的可行性了。</li></ul></li></ul><ol start="4"><li><strong>明确衡量标准和完成时间</strong><ul><li>要想真正地达成目标，明确目标的衡量标准和完成时间也是不可或缺的。</li><li>通常在实践中，年度目标还会被进一步拆分成更具体的子目标，比如，分区域的销售收入、分季度的销售收入等维度，以更好地支撑目标的过程管理。</li><li>团队成员就会非常清楚目标管理的要求，就能够以终为始来规划工作，甚至倒排计划，让目标管理更科学，推进过程更有节奏。</li></ul></li></ol></li><li><p><strong>目标设置的三个误区</strong></p><ol><li><strong>认为目标值设得越高，越能让团队成员更努力</strong><ul><li>最合理的做法是，设置一个“跳一跳”就能够得着的目标。这样的目标，能激发团队成员去尝试，去做力所能及的突破。</li></ul></li><li><strong>认为团队的工作目标就是团队管理者的工作目标</strong><ul><li>管理者的工作目标还应该包括本人岗位中不能授权给其他人来做的工作，比如，团队能力提升、团队资源协同、团队流程机制的设计等。</li><li>如果把团队的工作目标等同于团队管理者的工作目标，那就很容易让团队管理者沦为单纯的“传话筒”，成为无足轻重的角色。</li></ul></li><li><strong>认为目标分解就是把上级团队的目标放大后直接拆分给下一级团队</strong></li></ol></li></ol><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/target-diff.png"></p><ul><li>“错误的目标分解”只是在数字上做点文章，把公司的目标层层放大压给下面的团队，这种目标在每层组织中都是一样的，除了带来压力外，并没办法指导团队的具体工作，起不到目标的引领作用；</li><li>而“正确的目标分解”是围绕公司的大目标，结合各部门具体的价值定位、职责分工，来设置适配的工作目标。</li><li>不管是团队的管理者，还是团队中具体工作的执行者，都是更愿意跟着左边的目标分解方法来执行的，这样的方法，最终达成目标的可能性是非常大的。</li></ul><h3 id="2-如何梳理和优化工作流程"><a href="#2-如何梳理和优化工作流程" class="headerlink" title="2.如何梳理和优化工作流程"></a>2.如何梳理和优化工作流程</h3><ul><li>流程的要求是：<strong>承载优秀实践，体现业务的增值，进而为客户创造价值</strong>。</li><li>流程不只是指引员工做正确的事情，更重要的是正确地做事，即<strong>通过正确的手段达到正确的目标</strong>。</li><li>衡量一家公司的流程是否有价值，可以从如下四个维度来看<ul><li>是否能让客户觉得企业的产品和服务体验非常顺畅，遇到任何问题都能有效地解决</li><li>是否能把企业之前好的方法固化下来，推广到整个公司，提高效率和质量，提高企业的组织能力</li><li>是否能承载内控管理、质量管理等要求，降低工作过程的风险，保证工作过程可控及产出好的工作结果</li><li>是否能指引业务人员根据不同业务场景对作业模式进行更好地适配</li></ul></li></ul><h4 id="华为分享"><a href="#华为分享" class="headerlink" title="华为分享"></a>华为分享</h4><ol><li><p><strong>华为主业务流程体系</strong></p><ul><li>任正非曾经说过，“我们留给华为公司的财富只有这两样：一是管理架构、流程与 IT 支撑的管理体系，二是对人的管理和激励机制。”<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/4.main-flow.png"></li><li>华为通过流程体系的构建，把个人能力固化为组织能力，摆脱了对个体的依赖</li><li>企业不论是否在构建流程，实际上都在运行流程。流程的梳理和优化，需要掌握方法论，同时也需要持续投入。</li><li>如果不重视，就很容易出现企业越大，流程越烦琐落后，甚至出现责权不明确的状况，进而导致企业效率低下。</li></ul></li><li><p><strong>流程梳理和优化方法</strong></p><ol><li><strong>诊断分析，识别流程问题</strong></li></ol><ul><li>通常来讲，流程的问题体现在效率不高、职责不清、客户体验不佳这几个方面。</li><li>这个部分的诊断分析，可以通过问卷访谈、研讨会等方式，让大家群策群力，来进行诊断分析。</li><li>如果推动起来有难度，内部有矛盾，这时候就需要第三方专业团队介入了。</li></ul><ol start="2"><li><strong>外部对标，了解最佳实践</strong><ul><li>企业可以对标的是，行业内做得比较优秀的领军企业，甚至也可以是业界比较知名的非同行企业。</li><li>过请外部专家来分享，或者找一些参考资料来学习分析，寻找到可以借鉴的地方。比如，华为的研发、供应链和财务管理，都是借鉴了 IBM 的管理实践，并持续迭代和优化而来的。</li></ul></li><li><strong>内部研讨，明确改进方向</strong><ul><li>它需要流程的责任部门和前后关联部门的共同参与，这样才能避免本位主义。</li><li>流程改进的目标不是局部利益最大化，而是整体利益最大化。</li><li>任正非创造性地提出了“先僵化，后优化，再固化”的管理方针，为华为的流程建设铺路，明确了管理的主基调，</li></ul></li><li><strong>梳理优化，逐步推行落地</strong><ul><li>这个步骤非常重要，它是基于第三个步骤，进行流程的梳理，并进行小范围的试点推行，然后再全面铺开。</li><li><strong>流程进行试点推行的好处是：可以用敏捷的方式，投入最小的资源，更快地看到流程优化后的效果</strong></li></ul></li></ol></li><li><p><strong>流程优化的效果验证</strong></p><ul><li><strong>从客户体验和满意度来验证</strong><ol><li>流程是为客户服务的，企业业务需求的起点是客户，企业交付产品的终点也是客户。</li><li>客户体验和满意度是流程优化的方向，也是衡量的标尺。</li><li>华为要求员工对下一个环节就像对外部客户一样，下一个流程就是上一个流程的客户，如果上一个流程做得不好，下一个流程有权投诉。</li><li>造就了客户价值不断增值的业务流，通过这样一套企业内部的“操作系统”，来落实“以客户为中心”的理念。</li></ol></li><li><strong>从流程运行数据来验证</strong><ul><li><strong>多</strong>指的是流程是否能带来业务量的提升。比如：生产量、研发量、服务量等指标。</li><li><strong>快</strong>指的是流程是否能带来时间节约和效率提升。比如：生产周期缩短、服务效率提高等指标。</li><li><strong>好</strong>指的是流程是否能带来产品和服务品质的提升。比如：产品生产合格率、产品上市转化率、客户满意度等指标。</li><li><strong>省</strong>指的是流程是否能带来人力和物力的节约。比如：降低生产人员配置、降低能耗、降低采购成本等指标。</li></ul></li><li><strong>从内部协同的有效性来验证</strong></li></ul></li><li><p><strong>从是否解决责任归属来验证</strong></p></li></ol><ul><li>企业内部总是很容易出现职责不清或者“三不管地带”，因此，流程的优化也需要解决这方面的问题。</li><li>流程优化需要对流程中的角色、互相的配合关系、责权利等进行清晰界定，对原来职责重叠或者职责空白地带进行梳理与规避。</li><li>企业内部如果不能将各部门的职责和边界通过业务流程做好整体梳理，而是各自站在各自的角度来工作的话，通常很容易形成矛盾冲突，同时，还影响业务的正常开展。</li></ul><h3 id="3-如何合理进行团队分工"><a href="#3-如何合理进行团队分工" class="headerlink" title="3.如何合理进行团队分工"></a>3.如何合理进行团队分工</h3><ul><li>分工的理念，适配了企业规模化管理的需要，在<strong>提高劳动生产率的同时降低了成本，也带来了岗位专业化水平的提升</strong>，是一个非常有价值的管理思想。</li><li><strong>团队分工，是指通过科学的职责梳理和合理的人员配置，让团队整体工作的效率得到提升，让团队的协作更加高效。</strong></li></ul><h4 id="团队分工的原则"><a href="#团队分工的原则" class="headerlink" title="团队分工的原则"></a>团队分工的原则</h4><ol><li><strong>能力适配原则</strong><ul><li>把合适的人放在合适的位置上，因此，人岗匹配非常重要。</li><li>管理者就需要定义出岗位的职责及所要求的能力，然后在进行员工招聘或者内部人员选拔的时候，优先选择符合岗位要求的员工，把合适的人放在合适的岗位上。</li><li>对于这些人岗还不完全匹配的状况，管理者要关注员工技能和能力的提升，通过培训、在岗辅导等方式，使员工与岗位的匹配度持续提升。</li></ul></li><li><strong>责权对等原则</strong><ul><li>每个岗位，在承担相应的分工时，其实也需要被赋予相应的权力，这就是责权对等。</li><li>如果管理者只是给员工安排工作，但并不赋予他们一定的权力，那就会导致员工在遇到问题时，都需要找上级沟通确认。</li></ul></li><li><strong>有效协同原则</strong><ul><li>在分工的时候需要注意，不能一味地把分工分得过细。因为过细的分工会带来岗位能力的单一，但更麻烦的是增大了协同的难度。</li><li>而组织中最难的协同，往往出现在跨部门团队或岗位之间。因此，要在分工中强化协同，就需要针对要协同的岗位，设置关联的考核指标，以强化协同性。<ul><li>华为的核心价值观强调“以客户为中心”，那么不只是服务人员需要对客户满意度负责，销售人员也一样要对客户满意度负责。这样，这两个岗位的分工就能体现协同性了，这也一定程度上解决了内部冲突和矛盾的问题。</li></ul></li></ul></li></ol><h4 id="不同类型团队的分工维度"><a href="#不同类型团队的分工维度" class="headerlink" title="不同类型团队的分工维度"></a>不同类型团队的分工维度</h4><ol><li><strong>按功能分</strong><ul><li>大部分支撑部门（如人力资源部、财务部）的工作会呈现模块化的特点，日常工作就是按照这不同的模块来运作的，所以可以按功能分工。</li><li>比如，人力资源部可以分为：招聘组、培训组、绩效组、文化组等。</li></ul></li><li><strong>按流程分</strong><ul><li>有些业务部门的工作是有一定的流程顺序的，如生产部门、研发部门，</li><li>其中，研发部就可以分为：预研部、开发部、测试部等。</li></ul></li><li><strong>按区域分</strong><ul><li>有些团队的工作是有明显的地域属性的，如销售团队，他们的工作就可以按照区域来分工。</li><li>比如，海外销售部可以分为亚太销售组、北美销售组、欧洲销售组等。</li></ul></li><li><strong>按产品分</strong><ul><li>产品解决方案部门可以按照产品来分工，这个就很好理解了，</li><li>比如，产品部可以分为光网络产品部、无线产品部、固网产品部等。</li></ul></li><li><strong>按客户分</strong><ul><li>如果服务不同类型的客户，且服务模式有差异，</li><li>那么销售部门就可以按照客户，分为战略客户部、渠道客户部、中小客户部等；</li><li>甚至也可以结合区域和客户，进行双维度的分工，这样团队的职责和目标也会更加明确。</li></ul></li></ol><h4 id="新时代的分工"><a href="#新时代的分工" class="headerlink" title="新时代的分工"></a>新时代的分工</h4><ul><li>合工理论是指将流程中的活动适当合并到其他活动中，以降低流程成本，增加流程收益，使流程更具有经济性</li><li>特别是在人工智能时代，分工已经不仅仅存在于人与人之间，还可以存在于人和“机器”之间。</li></ul><ol><li><strong>让“机器”替代基础工作</strong><ul><li><strong>HR 团队的报表系统</strong><ul><li>为了提高 HR 团队的工作效率，华为的 HR 质量和运营团队专门成立了 HRSS 项目组，主要围绕 HR<br>这个群体每个月会涉及的报表进行梳理和统计，让“机器”从几个基础数据库中直接采集原始数据，并对各种数据进行汇总、比对、统计及分析，最后在系统中呈现不同维度的可视化报表，这样就解决了 HR<br>长期苦恼的“表哥”“表姐”式工作，这个项目受到大家一致好评。</li></ul></li><li><strong>供应链共享服务中心的软件机器人团队</strong><ul><li>供应链共享服务中心，从 2018<br>年开始尝试把合同到货的计划处理、生产配置生成、清关发票审核等大量确定性和重复性的信息处理工作，交给软件机器人来处理，取得的效果不错。于是，后续在此基础上设计、创造了一群被称为“数字员工”的软件机器人，如今它们的编号已经从<br>001 号增加到 120 号了。有了这双“隐形的手”，员工的重复工作量减少了，业务处理效率也是节节攀升。</li></ul></li></ul></li><li><strong>用外包模式来分工</strong><br>在每个专业领域，<strong>分工的最终极状态就是：分工形成了一定的业务规模，甚至成为一个专业的外包领域</strong>。<ul><li>苹果可以把手机 OEM 给富士康来生产，腾讯可以把软件编程给 ITO 公司来写，中国移动可以把客服服务外包给 BPO 公司来做</li><li>在团队分工过程中，当内部资源和能力无法满足的时候，又或者公司的业务定位要聚焦的时候，管理者就可以考虑将部分工作外包出去，用外部力量来完成分工。外包也是提高组织效率、降低成本的有效方法。</li><li>一方面，可以将工作重心放在更重要的技术上；另一方面，还可以减少在非核心领域的管理投入成本。从整体来看，这是一个不错的双赢策略。</li><li>小米公司，它也是将生产和供应链全部外包，而自身聚焦在研发、营销和服务方面的能力建设。</li></ul></li></ol><h3 id="4-如何召开团队各项会议"><a href="#4-如何召开团队各项会议" class="headerlink" title="4.如何召开团队各项会议"></a>4.如何召开团队各项会议</h3><p>对管理者而言，通过开会可以沟通、参与决策，以及推动各项问题的解决。</p><h4 id="4-1-会议无效的四大问题"><a href="#4-1-会议无效的四大问题" class="headerlink" title="4.1 会议无效的四大问题"></a>4.1 会议无效的四大问题</h4><ol><li><strong>会前：会议的准备不充分</strong><ul><li>会议的组织者匆匆忙忙地临时召开会议，一定会存在信息不充分、数据不全面等情况，从而导致会议结果也就不会非常有价值</li><li>参会人员没有提前对会议的情况进行了解，不太清楚事件的原因，没有全面的认知。</li></ul></li><li><strong>会中：与会人员参与度不足</strong></li><li><strong>会终：会议没有明确结论</strong><ul><li>既然是会议，那应该要有会议的结果。不论是达成一致，还是没达成一致，最终需要有一个大家共同认可的结论。</li><li>如果没有结论，又没有后续行动安排，那么这个会就没意义了。</li></ul></li><li><strong>会后：决议的执行不到位</strong><ul><li>一定要有会议决议和事项的责任人、跟踪人，这样才能保证责任清晰，事项得以有效执行。</li><li>并且，在决议的执行过程中，还需要不定期有回顾和通报机制。</li></ul></li></ol><h4 id="4-2-常见会议及组织建议"><a href="#4-2-常见会议及组织建议" class="headerlink" title="4.2 常见会议及组织建议"></a>4.2 常见会议及组织建议</h4><ol><li><strong>例行会议</strong><ul><li>含义<ul><li>例行会议是出现频率最高的一种会议，比如常见的日例会、周例会、月度例会等。</li><li>例行会议的质量对于团队管理非常重要。高效地召开例行会议，可以有效地提升团队的凝聚力，在员工之间快速地同步团队信息，并且对于工作进度的总结回顾和计划的推进也非常有意义。</li><li>但需要注意的是：一定要控制好会议的时间，越是高频的会议，时间越要压缩，否则，会议会变得越来越拖沓，最后开会成了主要工作内容，团队效率严重下降。</li></ul></li><li>建议<ul><li><strong>关注工作重点和难点</strong><ul><li>如果员工遇到了一些比较共性的、有难度的问题，那可以拿出来进行讨论；</li><li>涉及个人情绪或者比较罕见的困难，尽量不在会议上占用时间，而是等会议结束后再找到相关人员进行私下沟通。</li><li>会议的节奏安排比较紧凑，所以就得要求发言员工一定要提前做好准备，最好是把自己的总结、计划、遇到的问题以及风险预警等形成简报，发送给会议组织者，在开会的过程中直接调出来即可。这样才可以确保会议的效率。</li></ul></li><li><strong>形成团队决议</strong><ul><li>管理者一定要有大局观，而是要以团队为单位，统筹下一步的工作安排，因此<strong>管理者对于团队的整体工作信息要了然于胸</strong>。</li><li>对于工作汇报中一些问题和风险预警，管理者应该要想到这些问题和预警对于整个团队的工作计划和安排会产生哪些影响，并且在此基础上，形成以团队为单位的工作计划。</li></ul></li><li><strong>会议计划固定化</strong><ul><li>正因为会议是在相对固定的时间召开的，所以可以在公司的计划上，直接把会议时间固化，无须再进行会议通知。</li></ul></li></ul></li></ul></li><li><strong>专项会议</strong><ul><li>含义<ul><li>专项会议通常可以由项目经理或者项目的核心利益关系人来召开和主持。</li><li>专项会议要以问题的解决为目标，</li></ul></li><li>建议<ul><li><strong>沟通开会事项</strong><ul><li>所以如何识别和解决这些问题就成了关键。管理者要在会议之前提前进行沟通</li><li><strong>待解决问题</strong> 把问题识别出来，会议的召开才有意义。</li><li><strong>参会人员和时间安排</strong> 跟问题相关的人员就是要参会的人员,时间安排也需要在此过程中做出。</li><li><strong>高质量的会议纪要</strong> 做会议纪要的人首先必须对项目信息非常清楚，否则最后的纪要会跟实际的讨论情况有偏差。</li></ul></li><li><strong>精心准备</strong><ul><li>所有人都要项目的实际进展、问题发生的原因、造成的影响、可选择的措施、该措施可能对项目的影响等，都要非常清楚。</li><li>特别是问题所在项目的节点负责人，要尽量想出一些解决措施，在会上让大家进行选择和讨论。<br><strong>形成决议</strong></li><li>专项会议必须得有结果，并且这个结果还必须是能够指导问题解决的。</li><li>这样的决议，必须要包括问题、解决目标、措施、时间节点、责任人、所需资源等信息，这些信息要在会议纪要中体现出来，</li><li>并且还要合并到项目管理的过程管控中，确保问题能够真正地在最短时间内，以影响最小的方式被解决。</li></ul></li></ul></li></ul></li><li><strong>紧急会议</strong><ul><li>含义<ul><li>紧急会议所涉及的问题通常会对企业的经营或者团队的运作产生比较大的影响，但这种会议召开的频率相对较低。</li><li>紧急会议涉及的议题都是比较重要的</li></ul></li><li>把握要点<ul><li><strong>控制参会人数</strong><ul><li>只召集对相关问题有直接关系的人员参加，严格控制会议规模，以提高效率、解决问题为首要目标，</li><li>比如投标中最后的报价环节，只邀请投标决策者、销售和市场负责人、各报价模块的负责人等参加即可，目的就是由最核心的人员最直接地讨论问题。</li></ul></li><li><strong>直接进入主题</strong><ul><li>这类会议的发言和沟通，要简单明了，直接进入，除非会对结果产生影响，否则不要在前因后果等方面做过多的停留</li><li>目的只有一个：节省时间，高效决策。</li></ul></li><li><strong>对事不对人</strong><ul><li>参会人员会因为各种原因而产生分歧，甚至可能产生矛盾，组织者要鼓励员工把分歧和矛盾暴露出来</li><li>可以引起决策者更深入的思考，从而让决策的思考更加充分和全面。同时，对于过程中不同意见的员工，也要予以鼓励。</li></ul></li><li><strong>快速形成决策</strong><ul><li>因为时间非常紧急，建议组织者尽可能是在会上直接形成决议，并且第一时间下发到执行部门</li></ul></li></ul></li></ul></li><li><strong>沟通型会议</strong><ul><li>含义<ul><li>沟通型会议在企业内部也是比较常见的，通常是以座谈会、务虚会、头脑风暴等形式出现</li><li>典型特征是：<strong>只有一个大体的沟通方向，但并没有特别明确的会议目标</strong></li><li>本身主题会比较散，所以更要求管理者提高对会议的把控力度。</li></ul></li><li>注意点<ul><li><strong>选择合适的参会人员</strong><ul><li>更多的是思想的表达，因此针对不同的议题，要选择不同类型的员工来参加。</li><li>对于决定企业发展方向的战略务虚会，邀请基层员工参与意义就不大，而应该邀请企业的中高层管理团队参加</li></ul></li><li><strong>控制会议范围</strong><ul><li>包括内容和时间两个方面</li><li>一旦发现发言者有跑题和拖沓的情况，就要及时喊停，避免把沟通会变成了“侃大山”的会议。</li></ul></li><li><strong>鼓励员工发言</strong><ul><li>组织者要通过鼓励、诱导的方式，让更多的人把自己的想法、思想表达出来</li><li>一方面这样的表达本身就是有价值的，另一方面也可以启发其他的参会者。</li></ul></li><li><strong>进行记录和归档</strong><ul><li>沟通会议中所表达的内容，没有对错之分，会议的组织者要做好记录和归档，并形成文字材料，</li><li>助于决策者将这些思想提炼和总结，最终形成真正的方案。</li></ul></li></ul></li></ul></li></ol><h3 id="5-如何实施有效工作辅导"><a href="#5-如何实施有效工作辅导" class="headerlink" title="5.如何实施有效工作辅导"></a>5.如何实施有效工作辅导</h3><ul><li>工作辅导是指可以让员工获得学习和发展的手段与方法。</li><li>这里的“学习和发展”，可以包括专业知识、工作技能、工作方法，也可以包括员工在遇到困难时心理上的帮助，</li><li>对员工的激励也可以被包括在内，而这一切的手段，最终都是要让员工实现个人和组织的共同目标。</li><li>工作辅导是包括了员工培训的内容的，但同时也不仅仅是培训，还有很多是在实际工作中针对具体问题和困难所给予的指导和方法。</li></ul><h4 id="5-1-能力弱但意愿强烈"><a href="#5-1-能力弱但意愿强烈" class="headerlink" title="5.1 能力弱但意愿强烈"></a>5.1 能力弱但意愿强烈</h4><ul><li>表现<ul><li>典型代表是刚刚走进职场的应届毕业生。</li><li>主动性也特别强，愿意自己去探索和发现新的工作内容。</li><li>工作意愿和表现欲特别强烈，也特别渴望被认同。</li><li>缺乏工作技能和经验</li></ul></li><li>经验<ul><li>在新员工入职的前半年时间里，针对新员工的培训和辅导的效率会特别高，如果能够真正用好，对于员工后续的发展会非常有帮助。</li><li><strong>企业知识和经验的积累传承体系对于员工技能和工作方法的提升作用是巨大的</strong></li><li>如何部门内部的系统不完善，可以使用FAQ(Frequently Asked Questions，常见问题解答)</li><li>员工经常问的问题、员工自己工作中的经验和教训等，并且由部门秘书或者文员等整理形成文档，在新员工入职时就下发给他们。</li><li>此项举措的效果是非常明显的，对于新员工能力提升、知识上的查漏补缺非常有帮助，可以显著提升员工的工作效率。<h4 id="5-2-能力一般且意愿下降"><a href="#5-2-能力一般且意愿下降" class="headerlink" title="5.2 能力一般且意愿下降"></a>5.2 能力一般且意愿下降</h4></li></ul></li><li>表现<ul><li>进入企业工作一段时间后（通常可能会是一年左右），工作技能有了提高，但在经验的积累上还有些欠缺，</li><li>同时经过企业内一段时间的磨炼，刚刚开始工作时的激情和斗志有所消退，或者在工作上受到一些打击和挫折，造成员工的工作积极性下降。</li><li>管理者一定要予以重视，要认识到员工的这种变化是有一定必然性的，通过对员工进行辅导和帮助，就可以有效帮助员工获得提升。</li></ul></li><li>例子<ul><li>有个华为同事，他在加入华为一年左右的时候，就经历过一段这样的时期，当时他作为售后工程师，负责某省一套系统的维护，但随着对系统的熟悉程度不断提高，工作经验不断积累，每天的工作变成了重复性的劳动，渐渐地就有了疲态，积极性也有所下降。后来他跟部门经理沟通了自己的困惑和遇到的问题，经理对于工作做了以下四个方面的调整，我觉得特别适合管理者拿来作为参考。</li><li>把维护过程中解决的一个重大技术问题背后的底层技术原理分析、整理出来，这是一项难度比较大的工作，需要跟供应商的技术人员深入沟通以后才能完成。最后，他将其整理出来并形成文档，这篇文档后来也成了该产品的一篇经典维护案例，在公司内部一直流传下来。</li><li>具体的维护工作由第二年新入职的员工来完成，经理帮助他做好对新员工的指导和协助工作。</li><li>对他进行了一对一产品培训，使得他有能力同时进行部门内其他产品的交付和维护工作。</li><li>安排他兼职做服务产品的销售工作，这是一个需要更多地跟人打交道的工作，对于他来说，是一个全新的体验。</li></ul></li><li>总结<ul><li><strong>提高员工工作的难度</strong> <ul><li>这里的“难度”指的是让员工理解工作内容更深层的原理，要“知其然”，更要“知其所以然”。</li></ul></li><li><strong>提高员工工作的广度</strong> <ul><li>在给员工安排工作的时候，可以适当安排一些全新的工作内容，让员工可以有一些全新的尝试，也可以有效提升员工的自我学习意识。</li><li>当然，在此过程中，管理者不要忘了对员工做一些知识和技能的辅导和培训。</li></ul></li><li><strong>给员工一些完成以后会特别有成就感的工作任务</strong><ul><li>让员工在工作中担任更重要的角色，或者对接更高级别的客户等。</li></ul></li><li>这一切一定是要在员工能力可以达到，或者经过适当的努力可以达到的前提下。</li></ul></li></ul><h4 id="5-3-工作能力较强但工作意愿较弱"><a href="#5-3-工作能力较强但工作意愿较弱" class="headerlink" title="5.3 工作能力较强但工作意愿较弱"></a>5.3 工作能力较强但工作意愿较弱</h4><ul><li>表现<ul><li>通常都是在企业内工作了比较长的时间，知识、技能、经验已经有了很多的积累，对企业以及所处的行业也都有了很深的了解，日常的工作任务完成起来非常得心应手。</li><li>从某种意义上来说，这样的员工就是企业的中流砥柱。</li><li>可能会对岗位、收入、未来发展预期等有着自己的不同意见，有时候还可能会对管理者的日常管理工作不积极配合，甚至可能会消极抵抗。</li></ul></li><li>指导<ul><li>要减少指令式、说教式的辅导，以更加平易近人的方式进行沟通。</li><li>鼓励员工表达出自己真实的想法，让管理者知道员工真实的目标是什么，帮助员工一起清除目标障碍。</li><li>在合理范围内，对员工进行适当的激励，确保员工对自身工作的满意度。</li><li>一般来讲，企业在管理和技术上会有自己的规范体系，但很多员工在工作中会有自己的追求，工作久了可能就会在自己的经验基础上，发展自己的工作方法和技巧，有时候这些方法和技巧可能非常有效，但未必完全符合这个规范体系。</li><li>管理者对此要进行鼓励和支持，为他们的努力创造条件，避免简单地以公司规定为理由而否定，那样会极大打击员工的积极性。</li></ul></li></ul><h4 id="5-4-能力很强同时工作意愿也很强烈"><a href="#5-4-能力很强同时工作意愿也很强烈" class="headerlink" title="5.4 能力很强同时工作意愿也很强烈"></a>5.4 能力很强同时工作意愿也很强烈</h4><ul><li>表现 <ul><li>能力很强同时工作意愿也很强烈的员工，在团队里属于骨干员工</li><li>他们不仅是团队的技术带头人，同时也能深刻地影响团队氛围。</li></ul></li><li>如何辅导 <ul><li>管理者的辅导主要是为了解决他们面临的变化和形成挑战的工作内容。</li><li>可能对于管理者也是全新的课题，所以这样的辅导就不能局限在一对一或者一对多的形式，可以在团队内部形成群策群力解决问题的机制</li><li>比如通过团队“头脑风暴”的方式不断打开员工的思路，使得骨干员工有更多的灵感来解决遇到的难题。</li><li>而管理者在此过程中，可以以组织者和管理者的身份出现，以沟通型会议召集人的身份，鼓励员工参与“头脑风暴”。</li><li>同时，在骨干员工完成有难度的任务以后，管理者还要对他表示认同和感谢，让员工感受到自己是被信赖的，并且在团队中是具有权威性的。</li></ul></li></ul><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/5.coach.png"></p><ul><li>能力弱而意愿强（图中⑦区）：快速提升员工知识、技能和方法，让员工在最短时间内具备工作能力。</li><li>能力一般且意愿下降（图中②区、④区或⑤区）：提升员工工作的深度和广度，提高员工的成就感。</li><li>能力较强但意愿较弱（图中②区、⑤区、③区或⑥区）：让员工说出真实想法，管理者帮助员工解决工作和生活上的障碍，鼓励员工加强自我实现。当然，这个策略对图中⑧区的员工同样适用。</li><li>能力强且意愿强（图中⑨区）：群策群力，帮助员工解决遇到的难题，同时实现团队的共同进步。</li><li>对于落入①区的员工来说，能力和意愿都不高，进行辅导的意义是不大的，可以用适当的方法予以淘汰。</li></ul><h3 id="6-如何进行工作过程管控"><a href="#6-如何进行工作过程管控" class="headerlink" title="6. 如何进行工作过程管控"></a>6. 如何进行工作过程管控</h3><h4 id="6-1-工作结果不达标的原因"><a href="#6-1-工作结果不达标的原因" class="headerlink" title="6.1 工作结果不达标的原因"></a>6.1 工作结果不达标的原因</h4><p>工作结果不达标主要表现在：没有在既定时间内完成工作，或者工作效果不理想，又或者既没在既定时间内完成工作，也没达到预期的效果。</p><ul><li>原因<ul><li><strong>员工能力不够</strong><ul><li>企业每年都会提出更高的目标，</li><li>工作难度一定是越来越大。如果员工的能力没有同步进步，则一定会出现员工能力不足、无法达成工作结果的状况。</li></ul></li><li><strong>员工执行力低</strong><ul><li>工作任务和目标的达成是依赖于个体能动性的，如果员工工作有惰性，没有全身心投入工作，</li><li>又没有人关注过程管控，那最终的工作结果就会延迟。</li></ul></li><li><strong>资源配置不足</strong><ul><li>很多企业（特别是中小企业）在内部人员配置上，都是相对紧凑的。</li><li>随着业务的发展，可能会出现资源配置和目标不匹配的问题。</li><li>虽然目标很明确，但团队的资源不足够支撑企业完成任务。</li></ul></li></ul></li><li>总结<ul><li>但无论是哪种情况，都涉及过程管控和纠偏的步骤。管理者可以通过定期回顾业务进度和业务数据的方法，基于实际情况进行管控。</li></ul></li></ul><h4 id="6-2-有效的过程管控"><a href="#6-2-有效的过程管控" class="headerlink" title="6.2 有效的过程管控"></a>6.2 有效的过程管控</h4><p>管理者要不定期和团队进行沟通，了解工作的真实进度，并和原来的阶段性目标进行对比，确认进度和目标之间的偏差情况，以“对症下药”，采取有效的管控措施。</p><ul><li><strong>进度管控</strong><ul><li><strong>第一种，进度落后于目标</strong><ul><li>定期了解工作当前进度，以及对落后的严重程度进行评估。</li><li>华为对于工作进度会有“赛马机制”，针对不同员工工作进度的落后程度给出红黄牌。<ul><li>如果仅仅是偶发因素导致的不严重的落后，那就及时提醒员工，避免在下一阶段延续同样的问题。</li><li>但如果是员工的责任感、工作意愿的问题，管理者就要介入，对员工进行心理辅导，激发员工的工作积极性，让员工以更饱满的工作激情和更好的工作状态来完成工作。</li><li>如果是工作难度太大、员工的能力不够的话,管理者就必须要实施有效的工作辅导，帮助员工提升知识和技能水平。</li><li>但如果员工能力差距过大，管理者也必须要反思人员安排的问题，必要的时候更换人员也是一种可行的方案。</li></ul></li></ul></li><li><strong>第二种，进度基本符合目标</strong><ul><li>说明工作进度和预期的一致。但管理者也要预防这种场景可能隐含的问题</li><li>比如：员工是不是很容易就做到进度的基本符合？如果是的话，就要分析原来设计的目标是不是不够挑战。</li></ul></li><li><strong>第三种，进度领先于目标</strong><ul><li>管理者要反思一下：是不是目标设立得过于保守了？或者是不是对于员工的能力不够了解？</li><li>在此基础上，可以将下一阶段的进度目标做一些调整，同时还要加深对员工的了解</li><li>可以给员工一些新的挑战和体验，比如让员工兼做一些其他相关的工作。不过，这里需要注意：一定要对员工进行表扬和激励。</li></ul></li><li><strong>总结</strong><ul><li>管理者要做好定期的回顾和把控，确保工作的进度和计划始终保持在一个良性可控的区间范围内。</li><li>对于定期回顾的频率觉得难以把握,推荐华为秘书体系在工作进度管理中的一个方法——三日清三日结,每三天回顾和分析一次,尽量在三天内关闭</li></ul></li></ul></li><li><strong>质量管控</strong> 对实际工作成果和预期目标之间的偏离情况，以及工作结果的好坏情况进行管理纠偏。<ul><li>管理者必须对工作的方向和内容进行持续跟踪和了解，确保团队工作质量是满足团队目标要求的。</li><li><strong>第一种，工作质量符合初始目标</strong><ul><li>管理者要对员工提出表扬，也可以进行适当的激励，鼓励他们更加努力地完成后续的工作。</li></ul></li><li><strong>第二种，工作质量无法适配初始目标</strong><ul><li>犯了“方向性”错误，付出了大量的时间和精力，却并没有取得预设的工作效果。</li><li>规划非常完美，真正落地的时候需要具备转型能力的团队来承接，但现有团队成员并不具备这样的能力。</li></ul></li><li><strong>工作质量管控是过程管控中非常重要的一环</strong><ul><li>管理者在工作任务指派时，如果不与员工对如何开展工作达成共识，那么工作质量可能就会大打折扣。</li><li>管理者还要关注工作落地时组织能力的适配性问题，如果员工能力不够，就会导致无法有效控制阶段性工作成果的情况出现，最终的工作质量也会不尽如人意。</li></ul></li><li>不论是什么方面的问题，当工作质量出现偏差时，应该及时去发现、识别和纠正。越早识别出来，纠错的成本就越低；越拖延，错误的累积越多，纠错成本也会显著上升。</li></ul></li></ul><h4 id="6-3-工作过程管控的工具"><a href="#6-3-工作过程管控的工具" class="headerlink" title="6.3 工作过程管控的工具"></a>6.3 工作过程管控的工具</h4><ul><li><strong>RACI</strong> 责任分配矩阵（Responsible、Accountable、Consulted 和 Informed, 执行人、批准人、顾问和知情人)<ul><li>有时，还会被写成 RASCI，其中增加了 Support（支持者）。<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/huawei-org.png"></li><li>边第一列是分解开待完成的各项任务，横向第一行是任务相关人员，而表格内的字母代表的是各人员在不同任务中所担负的职责。</li><li>通过这样的矩阵表，就可以非常清晰地把不同任务分解和下派到不同的岗位上，同时，每一个岗位的人员也都会非常清楚地知道自己的职责以及接下来要完成的工作内容。就这样，从任务和岗位两个维度，都可以避免出现疏漏。</li><li>RACI 除了可以很好地对责任的归属进行明确以外，还可以有效协助沟通，因为每一项任务的分派非常清晰，所以每一个岗位在任务执行或者沟通遇到的问题的时候，可以通过 RACI 矩阵表简单明晰地找到对应人员，然后再通过一对一或者召集会议的方式快速进行沟通。</li><li>高效灵活地使用 RACI 矩阵表，可以帮助你有效地对工作任务进行分解，并分配给相关的人员，而这个过程，也就对具体的责任进行了明确，避免“任务等人”或者“人等任务”的现象发生。</li></ul></li><li><strong>甘特图</strong><ul><li>甘特图是一种比较常用的显示和监控项目进度的工具。</li><li>甘特图的整个逻辑比较清楚，就是用一个条形图，通过横轴的时间刻度和纵轴的任务列表来显示出特定工作任务的完成顺序以及所需要的持续时间。</li><li>通过甘特图，管理者可以非常清晰地了解到当前任务的完成阶段，也可以弄明白当前的实际进度与计划之间的差异，从而对工作的总体进度进行评估和把控。</li><li>微软的 Project、GanttProject、Excel、WPS 表格以及国内的很多在线甘特图工具等，都是很不错的选择。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.跟着华为学管理-场景识别</title>
      <link href="2022/04/24/%E7%AE%A1%E7%90%86/2.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9C%BA%E6%99%AF%E8%AF%86%E5%88%AB/"/>
      <url>2022/04/24/%E7%AE%A1%E7%90%86/2.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9C%BA%E6%99%AF%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="2-跟着华为学管理-场景识别"><a href="#2-跟着华为学管理-场景识别" class="headerlink" title="2.跟着华为学管理-场景识别"></a>2.跟着华为学管理-场景识别</h2><h3 id="1-应对团队管理的五维领导模式"><a href="#1-应对团队管理的五维领导模式" class="headerlink" title="1.应对团队管理的五维领导模式"></a>1.应对团队管理的五维领导模式</h3><ol><li>在企业面临重大危机或者某些突发事件的时候 与员工站在一起</li><li>在企业和团队发展的平和时期 给员工提供进步的空间和机会</li><li>五维领导模式”结构图<ul><li><strong>命令</strong><ul><li><strong>场景</strong> 危机时使用</li><li><strong>意义</strong> 要求被掌管的人立刻服从管理以达到预期效果</li><li><strong>战略目标</strong><ul><li>要求完全服从</li><li>紧急情况或危机环境中给予明确指示</li><li>立刻见效</li><li>减少恐慌，增加成员安全感</li></ul></li></ul></li><li><strong>愿景</strong>  愿景≠画大饼，必须要取得好的结果，然后兑现<ul><li><strong>场景</strong> 员工对工作的意义和价值迷失，企业发展失去目标和方向,或面临危机</li><li><strong>意义</strong> 为团队描绘出一幅清晰的、令人信服的、值得大家为之奋斗的蓝图，并把这个蓝图清楚地印在每一个成员的心里</li><li><strong>战略目标</strong><ul><li>激励员工为共同目标奋斗</li><li>促使员工把握机遇</li><li>团队能够团结一致迎接挑战</li><li>激励并保持员工的动力和热情</li></ul></li><li><strong>华为分享</strong><ul><li>1994 年，任正非在员工内部讲话：“十年后，全球通信行业三分天下，华为占其一。”</li></ul></li></ul></li><li><strong>参与</strong><ul><li><strong>场景</strong> 需要广泛听取意见，做出决策或未来规划时，或者需要提高工作效率、产品质量时</li><li><strong>意义</strong> 管理者通过集思广益或民主决策的方式，又或两者并用的方式，为员工营造出一种海纳百川和乐于奉献的氛围</li><li><strong>战略目标</strong> <ul><li>通过参与决策，激发员工的工作热情</li><li>提高工作效率或产品质量</li><li>集思广益，科学决策</li></ul></li><li><strong>华为分享</strong><ul><li>要求技术人员写技术建议,于审核通过的技术建议，会对相应员工给予物质奖励，并且在年底还会将比较优秀的建议汇编成册，发放学习</li><li>很多战略性的决策，需要的是更高层级的管理者来探讨,让普通员工参与研讨和决策，可能会导致决策方向偏离</li></ul></li></ul></li><li><strong>沟通</strong> 管理者与员工 员工与员工<ul><li><strong>场景</strong><ul><li>群体内部出现裂痕需要弥补时</li><li>人际关系网络需要改善或拓展时</li><li>群体中出现沟通障碍，阻碍了群体的效率和潜能的发挥时</li><li>由于压力过大而使人际关系紧张时</li></ul></li><li><strong>战略目标</strong><ul><li>在企业内部创造和谐环境</li><li>加强团队协作意识</li><li>深化群体内部成员间的相互交流，提高交流质量，增强彼此的信任感</li><li>加强各群体之间非正式的信息交流</li></ul></li><li><strong>华为分享</strong><ul><li>民主生活会<ul><li>搜集员工反映的很多问题，并且还会在此基础上做深入沟通，以确保这些问题都可以通过可落地措施得到有效解决</li><li>鼓励员工进行批评和自我批评,暴露组织氛围、员工关系的问题</li><li>同一目标下进行沟通，可以有效帮助员工排解情绪，提升组织凝聚力</li></ul></li><li>心声社区<ul><li>公司文件第一时间都会发布在该社区，员工可以直接评论（实名或者匿名皆可），可以支持、反对、吐槽和提意见</li><li>员工也可以直接在论坛发帖，反映公司现存的各种问题，其中的一些优秀作品，还会被给予稿费激励。</li><li>公司外部人员也可以以游客身份登录心声社区，最直观地看到员工对公司的认可、不满和批评，也可以深刻体会到心声社区作为“华为人的沟通家园”这一定位的真实性。</li><li>沟通机制并不是大家坐下来一起谈谈话就能建设好的，这需要有一个自上而下的执行机制</li></ul></li></ul></li></ul></li><li><strong>培养</strong><ul><li><strong>场景</strong><ul><li>当下属想要提高工作绩效时，或者管理者需要扩展领导基础时，</li><li>对于管理者而言，在员工个人的目标、价值观与集体保持一致的前提下，最大限度地帮助员工开发个人潜能，施展个人才华</li></ul></li><li><strong>战略目标</strong><ul><li>把员工的个人愿望及其才能与公司目标联系起来</li><li>提高下属的工作质量和产出率</li><li>扩展领导基础，提高领导公信力</li></ul></li><li><strong>华为分享</strong><ul><li>战略预备队 <ul><li>培养目标是为公司大结构转型培养各级专家、职员和主官，并且输送到一线，</li><li>帮助公司构筑面向未来的具备在战略无人区独立作战能力的组织，实现面向未来的知识结构的快速转化。</li><li>对员工进行培养的过程中，要提前识别员工的能力、潜能以及个人兴趣，以匹配合适的培养方向。</li><li>还要识别出一些员工是否跟集体的价值观和利益相一致，否则会导致员工把培养完全当成一个跳板，之于公司就是得不偿失。</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="2-如何有效执行命令式管理"><a href="#2-如何有效执行命令式管理" class="headerlink" title="2.如何有效执行命令式管理"></a>2.如何有效执行命令式管理</h3><ul><li>管理者要直接掌管一切，而被掌管者要立刻服从管理以达到预期效果。</li><li>管理者必须要增加此命令带来的正面和积极的效果，排除和减少负面和消极的影响。<h4 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h4></li></ul><ol><li><strong>判断</strong><ul><li>管理者可以根据现有的信息，在判断的速度和周密性上做好平衡</li><li>根据事件和状态的紧急程度，做出取舍</li><li><strong>避免</strong> 过于强调信息的完备性，很有可能会贻误战机</li></ul></li><li><strong>决策</strong><ul><li>尽可能周密, 迅速高效</li><li>决策方式必须是自上而下的</li><li>集体的利益才是第一位的，下属和团队成员的个人情绪和偏好是次要的</li><li>做出决策的管理者会承受相当大的压力</li></ul></li><li><strong>指令</strong> <ul><li>清晰而又具体</li><li>必要在发出指令时附带一些简要的理由</li></ul></li><li><strong>监控</strong><ul><li>监控可以确保团队成员按时、准确地执行命令。</li><li>监控主要是确保大方向上的事情，而过程管理则是监督具体操作过程中是否出现了什么问题。</li></ul></li><li><strong>惩戒</strong><ul><li>是绝对不允许有抵制命令的情况发生的,</li><li>执行计划的意志和能力是“命令”领导模式的内在要求，要求管理者必须具备莫大的勇气和决心。</li><li>为了使得命令可以继续被有效执行，管理者必须要有坚韧的意志，以确保命令被严格执行。</li></ul></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>根据所获得的信息，迅速判断事情的轻重缓急</li><li>迅速做出周密的决策</li><li>发出清晰的、简要说明理由的指令</li><li>对执行的速度和准确度进行监控</li><li>对违反命令者严惩不贷。</li></ol><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/mingling.png"></p><h3 id="3-如何有效执行愿景式管理"><a href="#3-如何有效执行愿景式管理" class="headerlink" title="3.如何有效执行愿景式管理"></a>3.如何有效执行愿景式管理</h3><ul><li>愿景是要为团队描绘出一幅清晰、令人信服的、值得大家为之奋斗的蓝图，并把这个蓝图清楚地印在每一个成员的心里</li><li>一个清晰且富有想象空间的愿景会让公司上下方向明确、重点明晰、干劲十足</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>描绘蓝图</strong><ol><li>蓝图必须是有吸引力的, 蓝图还要尽可能具体详尽<ul><li><strong>吸引力</strong> 让员工知道，通过努力他们可以获得什么样的理想成果</li><li><strong>详尽</strong> 下属就越容易相信该目标可以达到，也就更愿意为这个目标而努力奋斗</li></ul></li><li>蓝图必须符合员工的理想<ul><li>理想”的意思是与公司或部门成员的价值观和愿望产生共鸣</li><li>仅停留在物质激励层面，显然是不够的,涉及为公司和行业做出杰出贡献、增长知识、提高人们的生活水平这些深层次的课题</li><li>长期坚持深入基层，了解了员工的价值观和愿望的,让员工直接参与愿景的制定</li></ul></li></ol></li><li><strong>传递愿景</strong> 愿景”的宣传多多益善<ol><li>保证愿景在传递的过程中保持一贯性而不走样</li><li>作为管理者，我们的行为应当是传递愿景的一种最主要的方</li></ol></li><li><strong>员工自由选择达成愿景的方式</strong><ol><li>个人或部门被赋予的自主权越大，他们的干劲就越足，也就越能够更好地实现愿景。</li><li>是把影响员工创造力和实现愿景的障碍排除掉<ol><li>与实现愿景相对立的组织结构，这些结构往往效率低下（例如，部门墙、复杂的审批流程等）</li><li>员工技能不足，无法胜任实现愿景所要求的岗位(例如，员工的知识水平、技术能力、主动性、积极性等方面都有不足，影响到愿景的实现）)</li><li>组织制度与愿景不一致，影响员工创新的积极性（例如，绩效考核、人才选拔制度、战略规划等）</li><li>管理者自身破坏了愿景（例如，管理者自身的行为是与实现愿景背道而驰的，甚至还阻碍员工为实现愿景所做的努力</li></ol></li></ol></li><li>认可员工<ol start="2"><li>认可和表彰,如果能得到管理者的鼓励和认可，员工会更有积极性和主动性</li><li>对待员工探索过程中的错误，最有效的领导方式是鼓励他们从失败中吸取教训，而非责备他们的失败。</li></ol></li></ol><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/yuanjing.png"></p><h3 id="4-如何有效执行参与式管理"><a href="#4-如何有效执行参与式管理" class="headerlink" title="4.如何有效执行参与式管理"></a>4.如何有效执行参与式管理</h3><ul><li>定义：参与就是管理者通过集思广益或民主决策的方式，又或两者并用的方式，为员工营造出一种海纳百川和乐于奉献的氛围</li><li>特点：鼓励员工积极献计献策、参与决策的制定。</li></ul><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>邀请参与</strong><br>真诚地向员工征求意见和建议，并认真对待这些意见和建议。<ul><li>管理者确实有开放的心态，愿意从员工那里获得意见和建议；</li><li>管理者会很认真考虑以及采纳员工的意见和建议。</li><li><strong>华为分享</strong><ul><li>要求员工写“案例和合理化建议”,并且作为个人和团队考核内容的一部分。</li><li>对于审核通过的，会变成考核的加分项，并且会对员工给予物质奖励，在年底甚至还会将比较优秀的建议汇编成册，在全公司发放，号召员工学习。</li><li>让员工甚至家属都参与讨论的过程，是基本法的内容和核心思想不断地被宣贯、越来越深入人心的过程</li><li>讨论过程更为珍贵，因为那是团队参与和达成共识的全过程，大家通过“参与”统一了思想，这个过程更有现实性的意义。</li></ul></li></ul></li><li><strong>实施建议</strong><ul><li>建议被采纳，并且被实施了。 建立一套透明、公正、有效的评估程序</li><li>评估方式<ul><li>能够对员工提出的建议进行有效评估，从中筛选出真正有价值的建议</li><li>能够做到公平、公正，不因为管理者的个人喜好而做出选择</li><li>对于这样的评估方式，员工不会有不满的情绪，并且愿意接受</li></ul></li><li><strong>华为分享</strong><ul><li>对于员工提出的合理化建议，采用的是专家小组审核的方式,很快落实</li></ul></li></ul></li><li><strong>表彰员工</strong><ul><li>对于提出建议的员工,给予相应的关注和表彰</li><li><strong>华为分享</strong><ul><li>明码标价,相应的奖金就会在下个月随工资一起发放,如果被评为优秀建议，奖金会提高更多</li><li>每年的年底，公司还会评选年度优秀案例和建议，汇编成书，按照产品大类，发放到每一个员工手上，员工所提建议和经验会被所有人知道和认可，如此一来，员工的自豪感大大增强。</li><li>企业可以根据自己的实际情况，对相应的员工进行表彰，可以是物质的，也可以是精神的，或者兼而有之，方式上，邮件、会议、公告等都可以，只要能让员工感受到公司真诚的感谢和表彰就行。</li></ul></li></ul></li></ol><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/join.png"></p><h3 id="4-如何有效执行沟通式管理"><a href="#4-如何有效执行沟通式管理" class="headerlink" title="4. 如何有效执行沟通式管理"></a>4. 如何有效执行沟通式管理</h3><ul><li>“沟通”主要是指在管理者与员工之间、员工与员工之间，建立并维持和谐的人际关系。</li><li>对于一个企业而言，融洽的工作关系是保证工作顺利开展和高效产出的“润滑剂”。</li><li>如果能够加强跟员工的沟通，确保组织氛围和人际关系的和谐，对于保持组织的战斗力和员工的稳定性，都有非常重要的意义。</li></ul><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>关心员工生活</strong><ul><li>现在的年轻员工，在马斯洛需求理论中，已经脱离了底层的需求，而更加渴望的是被尊重和自我实现的需求。如果员工不能感受到被尊重，那会极大地打击他们的工作积极性；相反，如果管理者能真正发自内心地尊重员工，则将大大激发他们的工作积极性。</li><li>更好的方式是企业的管理制度和企业文化带来的。因为管理者自发地对员工关心和关怀，带有一定的偶然性.</li><li><strong>华为分享</strong><ul><li>组织在阿富汗连续工作 5 年的员工及其家属到埃及度假观光，员工可以畅快地游览开罗、红海，观摩金字塔，骑骆驼……旅行结束前，公司甚至专门给员工及其家属留下几天的时间用来购物。</li><li>对于在海外常驻的员工，华为允许未婚员工的父母和已婚员工的配偶及小孩陪同，并提供生活补助及商业保险；员工每年有 3 套回国机票，可供家属或自己回国探亲使用</li><li>对于新入职的应届毕业生，会对其入职报到时的差旅、行李托运等费用提供报销，并且还可以提前预支工资</li></ul></li></ul></li><li><strong>建立沟通平台</strong><ul><li>聊天，当然是一个不错的方式，但在大团队里面，这种一对一的聊天会是相当费时费力的</li><li>如果有一个合适的沟通平台和渠道，对于员工之间、上下级之间的沟通会起到很好的推动作用。</li><li><strong>华为分享</strong><ul><li><strong>民主生活会</strong> <ul><li>不同部门和层级都会定期开展的沟通会。在民主生活会上，员工可以反映工作中遇到的各种问题，这些问题会在会上进行充分讨论和沟通，如果问题客观存在，并且影响到工作效率和组织氛围，那么就会尽快采取措施进行整改。</li><li>另一个重要议题是管理者和员工进行自我剖析和批评，将自身存在的不足和所犯的错误说出来，自己来挖掘根源，使得员工能够自我反思和进步，也能对他人有警示作用。</li><li>严厉禁止夸大事实和人身攻击，禁止在个别问题上上纲上线和情绪化处理。</li><li>通过民主生活会，华为成功地塑造了员工的反思精神，推动了学习型组织的建设，使得整个公司在成长过程中充满了活力。</li></ul></li><li><strong>心声社区</strong><ul><li>允许员工匿名发帖，早期为了营造员工发言的安全感，每个员工都可以设置 5 个马甲。</li><li>从员工角度看，可以发泄自己的负面情绪，或者为公司献计献策；</li><li>从管理者角度看，一方面他们可以了解员工的想法，另一方面也使得他们的管理问题被公开暴露，所以也会促使他们高效地改进和回应。</li><li>只有从高层管理者开始，对于形式和目标有清楚的认知，并且有一个自上而下的执行机制，才有可能真正地搭建好这样的平台。</li></ul></li></ul></li></ul></li><li><strong>建立协作关系</strong><ul><li>在员工个人能力有保证的前提下，如果团队内部的协作关系顺畅，会有效活跃团队的氛围，并提升整体的工作效率。</li><li>为了保证团队协作能力的提升，管理者必须“身先士卒”，起好一个带头作用。</li><li>提倡员工树立团体协作意识，鼓励员工团结合作，并对他们团结合作的行为进行适当的奖励。</li><li>从制度和流程上来帮助员工建立团队协作的关系，那效率也会大大提高。</li><li><strong>集体奋斗并不会压抑个性，反而为个性的充分发挥搭建了一个广阔的平台。</strong></li></ul></li></ol><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/communication.png"></p><h3 id="6-如何有效执行培养式管理"><a href="#6-如何有效执行培养式管理" class="headerlink" title="6.如何有效执行培养式管理"></a>6.如何有效执行培养式管理</h3><ul><li>当我们跟员工有了很好的沟通，使得员工对企业和部门有了更多的认同感，并且工作的积极性也有了提升以后，如何更加有效地帮助员工成长，让他们有机会真正完成自我提升和自我价值实现</li><li>员工也会主动表达出希望得到更多的赋能，以达到更好的工作绩效</li><li>管理者也希望团队内部有更多优秀的人才</li><li>企业给予个体更多的赋能，也是挽留人才和巩固组织持续发展的基础。</li></ul><h4 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>识别潜力员工</strong></p><ul><li>培养式管理的重点是找到合适的人来培养, “小草是浇不成大树的”</li><li><strong>误区</strong><ul><li>把绩效完全等同于潜力，认为现在绩效好的员工就是有潜力的员工</li><li>绩效反映的是员工在当前工作岗位和工作任务上的胜任程度，而员工的潜力则是影响员工长期发展的因素。</li><li>潜力是很难在短期内培养出来的，需要在企业和组织内，通过长期的磨炼来培养和提升。</li></ul></li></ul><ol><li><strong>如何识别</strong></li></ol><ul><li><strong>学习能力</strong> 高潜力员工的基础<ul><li>对于新的知识和技能，总是很有学习的动机和意愿</li><li>是否乐于承担一些全新和有挑战性的工作</li></ul></li><li><strong>思维层级</strong> 高潜力员工的素质 广阔的阅读面和视野<ul><li>如果员工的眼睛只看内部，只盯着自己的职责，即使绩效很好，也很难被称为高潜力员工。</li><li>管理者需要的是可以站在更高层级上思考问题的员工。</li><li>团队在工作中遇到一些问题，给出问题答案的时候，可以点出这个过程中需要哪些部门、岗位、流程和资源去配合才能高效解决问题</li><li>在实践中，还能够将复杂的问题向前推进，直到最后落地实现</li></ul></li><li><strong>人际关系</strong> 必备素质<ul><li>高潜力员工应该是一个高情商的人</li><li>员工要善于仔细地聆听他人的观点，而不是妄下结论</li><li>要学会主动理解他人，尊重他人，能够看到并恰当地表扬他人的优点和长处。</li></ul></li><li><strong>抗压能力</strong> 重要素质 情绪恢复能力<ul><li>情绪的稳定性高，不会因压力而导致情绪崩溃或爆发</li><li>可以很快地从失败中走出来，并把失败当作一次学习</li><li>面对周围同事和领导的批评，可以理性面对，并从中选择出合理的建议</li></ul></li></ul></li><li><p><strong>设计培养模式</strong></p><ul><li><strong>误区</strong> 全都交给了人力资源部门来集中实施<ul><li>培训更多的是概念，外面现在流行什么，就对员工培训什么；</li><li>培训成了普惠制，反正已经花钱请人培训了，人人都参与；</li><li>培训等于听讲座，员工的参与度很低；</li><li>只培训，不跟踪落地，导致对员工的培训和培养，最终几乎没有对工作产生正面影响。</li></ul></li><li>当一家企业总是人才“倍”出时，那么这家企业对员工的赋能和培养机制一定是灵活的、高效的。</li><li>以华为为例，华为在人才赋能方面应该说是举全公司之力去构建人才发展的架构，人才发展也不只是某个组织的职责，而是用人部门、人力资源部门和培训部门要通力协同的任务。</li><li><strong>赋能模式</strong><ul><li>华为建立了一整套向员工赋能的平台体系，包括线下平台和线上平台<ul><li>线下平台以华为大学以及分布在全球各地的培训中心和能力中心为主，目前主要提供满足华为公司全局的、共同性的赋能需求。</li><li>随着 IT 互联网系统的发展，华为的基于线上的 E-Learning 学习系统更多的是提供知识类内容，而技能类课程则设计成面授或在岗实践模式。</li></ul></li><li>华为建立了一整套的案例共享平台<ul><li>要求项目经理将每一个项目执行过程中的关键场景、重点事件做记录，并上传到案例平台，方便后续所有员工在平台内进行检索。</li><li>对于项目中员工能力的提升起到了很好的引导作用，也使得华为成为第一个让优质组织经验在内部流动起来的企业。</li></ul></li></ul></li><li><strong>能力赋能</strong><ul><li>华为从 1998 年开始建立任职资格体系，<ul><li><strong>组织层面</strong>：提供清晰的标准以支撑组织对人才价值的评估，为岗位匹配和输入人才资源；整合学习资源，引导员工学习发展。</li><li><strong>员工层面</strong>：成为员工能力提升的“指南针”，体现员工所在岗位的职责要求；据此，员工得以提升职位胜任能力，获得更多的任用机会。</li></ul></li><li><strong>导师制</strong> 导师会对新员工进行帮助和指导<ul><li>帮助员工快速地提升了技能</li><li>当员工在工作或思想上遇到问题的时候，导师还会帮助员工解决问题，或者扮演心理咨询师角色，起到心理疏导的作用。</li><li>为了更好地推广导师制，也为了使得导师们更加愿意去帮助员工，华为对导师会有适当的物质激励，同时还以制度的形式规定：没有担任过导师的员工，不得提拔为行政干部；不能继续担任导师的，不能再晋升。</li></ul></li></ul></li><li><strong>资源赋能</strong> 让听得见炮声的人呼唤炮火<ul><li>在“呼叫炮火”的过程中，华为投入的资源一定是非常高端和优质的</li><li>华为在不同的层级都配置了不同的专家资源，从地区部到总部，专家的级别也会越来越高，</li><li>对于一线员工而言，越是重要和难度大的项目，越能得到高端专家的支持，这个过程就是专家向一线员工赋能的过程。</li></ul></li></ul></li><li><p><strong>实施培养方案</strong></p><ol><li><strong>员工是自我发展的第一责任人</strong> 在设置培训目标时，要基于员工的岗位职责对其做出任职要求，提倡员工自我学习和终身学习，强调学习是员工自己的事情，是员工对自己的投资行为。</li><li><strong>参与培训的学员均为责任结果优异的高潜力员工，采用的培训方式是训战结合式</strong><ul><li>在培训中构建实战化场景，让学员研讨或练习在该场景下如何去处理所遇到的问题</li><li>然后邀请项目管理领域的资深专家，让专家站在客户的角度评判学员制定的解决方案；</li><li>根据专家建议完善方案，对整个过程进行复盘。除此之外，学完后还会有考试</li><li>考完试在实战中再总结、提高，最终让学员自己悟出“原理”。华为通过这样的闭环，更直接、有效地提升学员的实战能力。</li></ul></li><li>多岗历练，循环赋能<ul><li>多岗历练一方面能激活人才和优化队伍结构，另一方面也能锻炼员工的综合能力</li><li>鼓励员工培训一段时间就去实践，实践一段时间再回来重复训练，通过这种循环的培训方式，在一次一次实践中提升员工能力。</li></ul></li></ol></li><li><p><strong>反馈培养结果</strong><br>这个结果反馈可以帮助企业看到在员工选拔、培养方案设置和执行方面的成绩和不足，从而做出调整，以确保员工培养模式可以持续并且价值不断提升。</p><ul><li><strong>结果反馈</strong><ul><li>在培训过程中，培训部门可以将员工的培训情况反馈给员工所在的部门。但企业如果是矩阵型组织架构的话，还要反馈给员工的行政管理部门。</li><li>培训完成以后，用人部门会通过绩效等方式，将员工的培训效果反馈给员工所属部门和人力资源部门。</li><li>员工也可以将培训的整个过程和流程反馈给所在部门，这样可以有效地帮助培训部门提升培训的组织和实施能力。</li></ul></li></ul></li></ol><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/train.png"></p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端用户体验的思考</title>
      <link href="2022/04/22/%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2022/04/22/%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前端用户体验的思考"><a href="#前端用户体验的思考" class="headerlink" title="前端用户体验的思考"></a>前端用户体验的思考</h2><p>最近在埃森哲交付做动态表的业务， 看了其他人写的和我写完的，开始思考怎么能写好。</p><ul><li>业务要求动态表单用每行选一个或多个地区，</li><li>后端接受的数据是平铺的。</li></ul><h3 id="写出来的"><a href="#写出来的" class="headerlink" title="写出来的"></a>写出来的</h3><p>别人的</p><ul><li>一行只接受一个地区，和后端数据保持一致。</li><li>没有处理其他行选择的重复情况。</li></ul><p>我的</p><ul><li>一行接受多个地区，给后端的时候转换为平铺，接受后端数据的时候分组</li><li>当其他行选到与之外冲突的时候，对用户做出覆盖提示，确认后，移除其他的重复内容</li><li>通过直观的内容告诉用户，一共多少，完成了多少，</li><li>每次编辑即时回显，自动懒加载对应层级的树结构。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>从时间的维度看，我至少花了3倍于上者的时间，即时后期做了逻辑复用。</li><li>从用户体验看，除了ui之外(我也努力了)，提升用户操作速度和增加友好提示，</li><li>为了优化选择，对区域树组件进行了大量的扩展，也花费了大量时间</li></ul><h3 id="对前端体验的理解"><a href="#对前端体验的理解" class="headerlink" title="对前端体验的理解"></a>对前端体验的理解</h3><p>其实也不是特别想要彰显自己，每个人上手都想找最块的方式去完成任务，我只是把自己当做使用者，<br>我不愿意使用操作繁琐的软件</p><p>前端体验的个人愚见：</p><ol><li>把分散的数据，做结构化，可视化，实现数据的价值。一般用图表来呈现。</li><li>优化用户操作，提高性能，帮助使用者高效工作和生活。体验在优化流程。</li><li>优化设计，化繁为简，识别重要的内容，以更好的设计交互来循序渐进的呈现。</li></ol><h3 id="技术展望"><a href="#技术展望" class="headerlink" title="技术展望"></a>技术展望</h3><ol><li>最近做抽象，做复用，使用vue2+js最大的瓶颈，在于 进一步抽象的时候，没有ts，会花时间在数据结构上。</li><li>还有就是this的问题，本身vue内部的都是普通函数，在抽象到外部的时候，不一定是vue内部的this,是一个心智负担。</li><li>之前用vue3和react，本身两个都是很不错的方向，vue3偏中庸，react偏激进，编程的本质应该是逻辑，个人也是技术比较激进派的，还是想好好修炼react</li><li>前端阶段的思考(好像只是一个业务工厂，不具有创新性)<ol><li>写好代码-代码整洁，业务分离，逻辑复用…</li><li>掌控项目<ul><li>积淀通用逻辑(虚拟工程重写业务实现),</li><li>组件库业务改造通用化</li><li>模块拆分，隔离个人开发环境</li><li>工程化，前期准备做好(环境，网络层，通用层，打包发布，组件选型，开发思想)</li></ul></li><li>平台赋能 <ul><li>开发平台，脚手架定制开发项目，快速增加功能，平台设计。</li><li>数据中台，对开发平台的数据进行价值分析，推动开发平台进化</li></ul></li></ol></li><li>前端创新的思考（价值在于项目的方向）<ol><li>写好代码-代码整洁，业务分离，逻辑复用…</li><li>掌控项目<ul><li>积淀通用逻辑(虚拟工程重写业务实现),</li><li>组件库业务改造通用化</li><li>模块拆分，隔离个人开发环境</li><li>工程化，前期准备做好(环境，网络层，通用层，打包发布，组件选型，开发思想)</li></ul></li><li>横向打通<ul><li>精通业务，市场</li><li>精通多项技术，复合型。</li><li>可复制的思想，前端的价值在于业务的价值</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.跟着华为学管理-认知准备</title>
      <link href="2022/04/20/%E7%AE%A1%E7%90%86/1.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E8%AE%A4%E7%9F%A5%E5%87%86%E5%A4%87/"/>
      <url>2022/04/20/%E7%AE%A1%E7%90%86/1.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E8%AE%A4%E7%9F%A5%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-跟着华为学管理-认知准备"><a href="#1-跟着华为学管理-认知准备" class="headerlink" title="1.跟着华为学管理-认知准备"></a>1.跟着华为学管理-认知准备</h2><h3 id="1-如何确定管理风格"><a href="#1-如何确定管理风格" class="headerlink" title="1.如何确定管理风格"></a>1.如何确定管理风格</h3><p>管理分为 人和事</p><ul><li><strong>事的维度</strong></li></ul><table><thead><tr><th>维度</th><th>指令型</th><th>启发型</th></tr></thead><tbody><tr><td>工作流程</td><td>容易标准化</td><td>不容易标准化</td></tr><tr><td>个体特征</td><td>团队步调一致,个体特征不明显</td><td>团队要协同互补,个体特征明显</td></tr><tr><td>团队工作结果</td><td>确定性高</td><td>确定性低</td></tr></tbody></table><ul><li><strong>指令型</strong><br>通过工作流程标准化，体系化来强化管理指令。</li><li><strong>启发型</strong><br>通过营造轻松开放的团队氛围，来激发员工的思想和智慧，提高团队竞争力。</li></ul><ul><li><strong>人的维度</strong></li></ul><table><thead><tr><th>维度</th><th>授权型</th><th>指导型</th></tr></thead><tbody><tr><td>团队整体绩效水平</td><td>较高且稳定</td><td>较低或不稳定</td></tr><tr><td>团队成员熟悉程度</td><td>熟悉,团队配合默契度高</td><td>不熟悉，团队配合默契度低</td></tr><tr><td>团队知识库建设水平</td><td>高，员工容易自我学习</td><td>低，员工较难自我学习</td></tr></tbody></table><ul><li><strong>授权型</strong><br>团队比较成熟，明确”责权利”，给团队适度授权，让团队运作有更大的自主权，能够激发主观能动性，避免管理者事无巨细的追踪团队工作的细节。</li><li><strong>指导型</strong><br>团队在磨合，通过对团队的全面指导，让下属理解管理者的想法和理念。在团队中设计导师制模式，形成小群体的互助学习模式，为团队或个体进行指导的模式。</li></ul><table><thead><tr><th>维度</th><th>支持型</th><th>培养型</th></tr></thead><tbody><tr><td>个体绩效结果</td><td>较高</td><td>较低</td></tr><tr><td>个体知识技能</td><td>较高</td><td>较低</td></tr><tr><td>个体工作经验</td><td>丰富</td><td>欠缺</td></tr></tbody></table><ul><li><strong>支持型</strong><br>对于成熟的个体，要给予支持，不用讲很细节的工作内容。相信团队能把事情做好，定好一些求助规则、问题的升级规则，确保个体出问题能够及时反馈，不用追踪员工的日常工作。</li><li><strong>培养型</strong><br>对于非成熟的个体，更多要关注进行能力培养和提升，要在导师制的基础上，强调案例式的训战结合模式，包括设计一些标准化的培训培养项目，帮助个体成熟。</li></ul><h4 id="解读华为管理思想"><a href="#解读华为管理思想" class="headerlink" title="解读华为管理思想"></a>解读华为管理思想</h4><ul><li><strong>开放</strong><br>不把个人思想强加在别人身上，更多去倾听，去沟通，以开发的心态吸纳大家的智慧。</li><li><strong>妥协</strong><br>接纳不同的声音，听取和换位思考，激发团队成员的主动思考。</li><li><strong>灰度</strong><br>所有事情不是非黑即白的，找到一个对各方都最有利的方法</li></ul><h3 id="2-如何适配团队沟通风格"><a href="#2-如何适配团队沟通风格" class="headerlink" title="2.如何适配团队沟通风格"></a>2.如何适配团队沟通风格</h3><h4 id="团队管理中语言风格的误区"><a href="#团队管理中语言风格的误区" class="headerlink" title="团队管理中语言风格的误区"></a>团队管理中语言风格的误区</h4><ul><li><strong>认为严肃型语言风格有助于建立权威</strong><br>员工会觉得管理者呈现出强势的个性，或者觉得跟管理者有明显的沟通鸿沟，进而产生更大的距离感。</li><li><strong>认为随意型语言风格有助于建立和员工的连接</strong><br>会让员工觉得管理者说话缺少分寸感，甚至觉得专业性不够，进而降低团队对管理者工作能力的认可度</li><li><strong>认为复述型语言风格才能正确传递管理意图</strong><br>会让团队觉得管理者没有自己的管理思想，进而降低团队对管理者能力的认可度</li><li><strong>认为统一型语言风格有助于建立内部公平</strong><br>一致的风格忽视了个体认知能力、性格特点及抗压能力的差异,每个人的承受能力有差异</li></ul><h4 id="语言表述的“黄金圈法则"><a href="#语言表述的“黄金圈法则" class="headerlink" title="语言表述的“黄金圈法则"></a>语言表述的“黄金圈法则</h4><blockquote><p>人的思维分为三个层次：What、How和Why，<br>管理者要注意不能只是传递分配任务（What）的信息，而应该首先让团队明白，为什么要这么做（Why）</p></blockquote><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/circle.png"></p><h4 id="如何适配团队沟通的语言风格"><a href="#如何适配团队沟通的语言风格" class="headerlink" title="如何适配团队沟通的语言风格"></a>如何适配团队沟通的语言风格</h4><ol><li><strong>群体沟通</strong> 管理者首先要根据“黄金圈法则”来理顺 Why、How 和 What，沟通的过程要突出逻辑性、感染力和专业性三个要素<ul><li>针对<strong>逻辑性</strong> 可以考虑沟通的结构设计，从“总、分、总”这样的逻辑结构来设计内容，能让语言风格体现逻辑性</li><li>针对<strong>感染力</strong> 可以考虑在沟通中引用一些有哲理的名人名言，或者通过讲故事的方式，来唤起现场人的共鸣。</li><li>针对<strong>专业性</strong> 要在沟通前理顺沟通内容的前因后果，包括理论依据、数据资料等，做到有备而来。</li></ul></li></ol><p>1.1 <strong>群体沟通的三个工具</strong></p><ul><li><strong>头脑风暴</strong> 适合收集尽可能多的方案的场景，关注创新和个性。管理者向所有参与者阐明问题，说明会议的规则，创造融洽轻松的会议气氛。管理者先不发表意见，而是让每个与会者“自由”提出尽可能多的方案</li><li><strong>团队研讨</strong> 适合收集经过沟通讨论的方案，关注方案可行性。团队研讨分不同小组，管理者向各小组提出需要研讨的课题，说明研讨的时间和输出要求。各小组通常需要一名组长，由组长带着团队成员研讨。</li><li><strong>自我批判</strong> 这是极具华为特色的团队沟通工具，在企业文化落地和团队融合中非常适用。在自我批判中，每个人首先要对自己做深度剖析，提出自己的缺点和不足，然后再接受其他与会人员的客观公正的评价。这个互动沟通在华为各层级团队（包括高管）都定期开展，以确保华为能坚守企业核心价值观。</li></ul><hr><ol start="3"><li><strong>个体沟通</strong> 低情商的人讲道理，高情商的人懂共情<ul><li>和绩效差的沟通，先让他发言，从帮助他的维度出发，给他提建议，</li><li>提建议避免命令的方式，所有事情，只有自己想通了才有意义</li><li>给建议的时候，如果我来做的话，会这样，你可以参考一下。</li><li>管理者跟一个后进的个体沟通，专业程度已经不是最重要了，最重要的是情商</li><li>巧妙地通过共情这个语言风格的使用，就能让员工激发出巨大的潜能。</li></ul></li></ol><h3 id="3-如何具备团队管理的同理心-《刷新》"><a href="#3-如何具备团队管理的同理心-《刷新》" class="headerlink" title="3.如何具备团队管理的同理心 《刷新》"></a>3.如何具备团队管理的同理心 《刷新》</h3><blockquote><p>同理心体现在三个层次：微观的产品层面、中间的团队管理层面和宏观的技术及智能层面。<br>在团队工作中，没有人是一座孤岛，管理者需要走出去，与每个人面对面沟通，学会倾听员工的想法，建立团队共识</p></blockquote><p>如何理解同理心  </p><ul><li><strong>认知</strong><br>就是可以从对方的角度看问题，理解对方所说的，这属于智脑的认知</li><li><strong>情绪</strong><br>就是“我”与“你”感同身受，这属于情绪脑的认知</li></ul><h4 id="同理心的四个等级"><a href="#同理心的四个等级" class="headerlink" title="同理心的四个等级"></a>同理心的四个等级</h4><ol><li><strong>漠视他人的观点和感受</strong><br>表现不愿意倾听，很少从他人的角度思考问题，做事情完全不考虑他人的感受</li><li><strong>理解他人的观点，但漠视感受</strong><br>对对方所谈论的内容和问题会有反应，着重问题的解决，但会忽视对方的真实感受</li><li><strong>理解他人的观点，也理解他人的感受</strong><br>能够站在对方的角度考虑问题，想对方之所想，急对方之所急；能够用心倾听，让人觉得被理解、被包容。在安排事务时，也能尽量照顾到对方的需要，并愿意做出调整</li><li><strong>完全了解对方的内容和感受，而且比对方更深入</strong><br>人们往往不能清晰地认知自己，这个层次的人会比对方更深入理解他自己，能够领悟对方所有的音调、字眼、表情、语速和肢体语言等，可以根据这些线索进行重组、发问，并把感受反馈给对方，帮助对方更好地了解自己。</li></ol><h4 id="同理心应对的四步法"><a href="#同理心应对的四步法" class="headerlink" title="同理心应对的四步法"></a>同理心应对的四步法</h4><ol><li><strong>分析诉求</strong><br>这个员工可能的诉求是什么？是来求助？是来诉苦？还是来解压？或者其他什么目的？</li><li><strong>体会感受</strong><br>体会一下员工当时的心情和感受，他是无奈？惊慌？还是痛苦？或者其他？</li><li><strong>描述感受</strong><br>用语言描述你看到的他好的一面，描述事情的客观情况，以及你看到的他的状态、你对他的感受。</li><li><strong>鼓励沟通</strong><br>鼓励对方说出他的内心所想</li><li>同理心不等于同情心，同情心仅仅是一种精神层面的活动</li></ol><h4 id="华为的同理心领导力"><a href="#华为的同理心领导力" class="headerlink" title="华为的同理心领导力"></a>华为的同理心领导力</h4><ol><li><strong>产品层面</strong><br>正确看待自己的竞争对手</li><li><strong>团队管理层面</strong><br>员工没有十全十美，不完美的人也是英雄，管理者要了解员工的优缺点，鼓励员工试错，宽容他们的失败</li><li><strong>企业治理层面</strong><br>华为的股权激励，任正非个人仅持华为不到 1% 的股份，其余的股份由公司员工持有，共享利益，这样才能让员工和公司同频，形成强大的作战力量。</li></ol><h3 id="4-如何评估自己的优势和劣势"><a href="#4-如何评估自己的优势和劣势" class="headerlink" title="4.如何评估自己的优势和劣势"></a>4.如何评估自己的优势和劣势</h3><blockquote><p>认知自我是一件不太容易的事情，通过自我评价得出的答案有时也往往不够客观。<br>经理人反馈计划（Manager Feedback Program，简称MFP）</p></blockquote><h4 id="华为管理者如何进行优劣势评估"><a href="#华为管理者如何进行优劣势评估" class="headerlink" title="华为管理者如何进行优劣势评估"></a>华为管理者如何进行优劣势评估</h4><p>优秀管理者的 7 项行为标准</p><ol><li><strong>目标管理</strong> 确保员工理解自己的工作，指引员工设定清晰的工作目标与计划，以支撑公司的战略目标达成。</li><li><strong>沟通管理</strong> 倾听员工的声音，以尊重的方式提供坦率的反馈，解决他们的问题。</li><li><strong>培训发展</strong> 教练、指导并发展员工能力，帮助员工成长。</li><li><strong>绩效管理</strong> 设定明确的绩效标准，识别杰出贡献者， 并积极管理低贡献者。</li><li><strong>激励管理</strong> 设置有效的激励方案，对不同层次的贡献者给予相应的回报。</li><li><strong>鼓励创新</strong> 鼓励员工表达不同观点，鼓励创新，并支持员工将想法付诸实施。</li><li><strong>文化建设</strong> 培育团队协作精神与包容性，推动公司的价值观传承和文化落地。</li></ol><hr><p>MFP 的定位不是对管理者评价，而是一种反馈，或者说这更像是一种对行为的可量化的沟通。</p><ol><li><p>MFP 的操作流程</p><ol><li>向管理者的直接下属发布问卷,收集反馈（注意是匿名的哦）</li><li>人力资源部收集分析问卷，并形成分析报告</li><li>将分析报告反馈给管理者，并准备反馈会议；</li><li>组织召开反馈会议，在会上管理者和员工们进行充分沟通；</li><li>管理者根据反馈会议的建议，制定个人提升计划。</li></ol></li><li><p>MFP 问卷的内容(11 个打分项和 4 个开放问题)</p><ol><li>领导帮助我了解自己的工作内容如何为公司的战略以及我们组织的目标做出贡献</li><li>领导以尊敬的方式向我提供清晰的建设性反馈，以帮助我更好的工作</li><li>领导在我需要支持时能帮助我排忧解难</li><li>领导对我所做的贡献表示很欣赏</li><li>领导的言行举止值得我信任(例如，倾听和考虑不同的观点，公平公正，持续跟进，恪守承诺)</li><li>领导会根据需要帮助我在不同的组织和地理区域之间进行协作</li><li>领导鼓励我持续改进工作(例如，尝试更好的方法工作，支持我的新想法，并愿意承担一定风险)</li><li>领导和我一起，帮助我培养自己的专业知识并朝着自己的职业目标前进。</li><li>领导鼓励我表达不同的观点，和我的”双向”沟通非常有效</li><li>领导在所有员工中培育团队精神，及跨地域和跨文化的包容性，其决策和行为体现了公司的价值观</li><li>总体来说，你觉得领导的管理水平如何。</li><li>怎样才会使你的领导的工作变得更出色，请举例说明</li><li>你的领导怎样才能加强你对公司的贡献，改善你的工作满意度或者激励你努力工作，请举例说明</li><li>目前你的领导花多大精力在人员管理，培养团队方面，你的期望是多少</li><li>你认为你的领导可以在哪些工作上更多的对你进行授权。</li></ol></li><li><p>MFP结果反馈会<br>简单说 充分准备，真诚沟通，清晰总结，具体行动<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/MFP.png"></p></li></ol><h4 id="管理者如何有效扬长避短"><a href="#管理者如何有效扬长避短" class="headerlink" title="管理者如何有效扬长避短"></a>管理者如何有效扬长避短</h4><p><strong>木桶理论</strong></p><ul><li>应用到个体身上就是，要不断去寻求长板，如果确实有短板，可以把木桶斜着，让木桶的容量变大</li><li>在团队当中，团队的能力构成了一块块木板，团队管理者可以通过不同的组合搭配和人员调换，来减少能力短板，让木桶的木板越来越均衡，这样才能使团队能力越来越强。</li></ul><ol><li><strong>聚焦优势</strong></li></ol><ul><li>为什么你会有这些优势，是什么使你与众不同，</li><li>要花更多时间和精力培养团队，将个人的优势变成团队的优势，从而提高团队的整体能力</li></ul><ol start="2"><li><strong>规避劣势</strong></li></ol><ul><li>但要想准确和客观地了解自己，认清劣势是非常重要的</li><li>你要在团队内找到和自己能力互补的成员，形成团队作战，这样才能有效规避你的劣势</li></ul><ol start="3"><li><strong>找准机会</strong></li></ol><ul><li>管理者非常重要的工作包括：制定目标、制定工作策略和计划、进行团队人员的布局等</li><li>从这些工作内容出发，梳理要着重解决的问题，有意识地运用自己的优势</li><li>在你认为拿不定主意、找不到下手点的时候，听取他人给出的策略和建议</li><li>尤其在团队中遇到需要决策的点，要刻意提醒自己聚焦优势和规避劣势，在自己不熟悉或者不擅长的领域更多依赖团队的聪明才智，做到取长补短。</li></ul><h3 id="5-如何避开管理的4大误区"><a href="#5-如何避开管理的4大误区" class="headerlink" title="5.如何避开管理的4大误区"></a>5.如何避开管理的4大误区</h3><h4 id="团队管理的四个误区"><a href="#团队管理的四个误区" class="headerlink" title="团队管理的四个误区"></a>团队管理的四个误区</h4><ol><li><strong>管理者成了团队管家</strong>  </li></ol><ul><li><strong>错误行为</strong> 忙得焦头烂额，但团队绩效还是上不去。管理者遇到求助，会直接给出问题的答案，甚至直接代替员工进行操作。<ul><li>对于有潜力,希望成长的员工,可能无法进步,要授人以渔。</li><li>对于想混的人，会如鱼得水，只会让员工更懒，影响团队发展</li></ul></li></ul><ol start="2"><li><strong>管理者带领团队一起成了加班狂</strong></li></ol><ul><li><strong>错误行为</strong> 如果一个团队，天天加班，那一定是团队的管理出了问题</li><li><strong>反思</strong> <ul><li>目标与能力的匹配如何，加班过长，是不是目标和能力的匹配出问题了。</li><li>如果能力偏低，考虑如何帮助团队提升能力。</li><li>如果目标过高，考虑做目标分解，根据团队资源和人的优势特点，合理分配</li></ul></li></ul><ol start="3"><li><strong>过分强调“团队利益高于一切”</strong></li></ol><ul><li><strong>过分强调团队利益会导致个体利益受到忽视</strong>  <ul><li>员工作为团队的组成部分，如果员工的应得利益不能得到保证，其积极性和创造性无疑会遭受重创。影响团队凝聚力。</li></ul></li><li><strong>过分强调团队利益容易滋生小团队主义</strong><ul><li>对于单个团队而言，自身的团队利益就是全部，但对于企业而言，单个团队的利益却只是其中的一部分，</li><li>过分强调团队的利益，会造成团队与团队、团队与企业之间的价值目标错位，影响企业整体战略目标的达成。</li></ul></li></ul><ol start="4"><li><strong>管理者成了老好人</strong></li></ol><ul><li><strong>热衷于当和事佬，追求“你好我好大家好”的氛围，短期内团队矛盾确实不会爆发，但长久来说，对团队管理是有百害而无一利的</strong><ul><li>严重影响团队的士气，“好人”被压制，“坏人”必然就会神气</li></ul></li></ul><h4 id="如何规避团队管理的四大误区"><a href="#如何规避团队管理的四大误区" class="headerlink" title="如何规避团队管理的四大误区"></a>如何规避团队管理的四大误区</h4><ol><li><strong>当教练，而不是当管家</strong><ul><li><strong>给员工一定的压力</strong>  <ul><li>管理者有义务帮助员工成长，而适当的压力可以促进员工成长</li><li>每个人都是矛盾的集合体，都有追求自我价值实现的想法，但同时又有惰性，很容易缺乏动力</li><li>压力必须要恰当，如果巨大的压力让员工一直处于紧张、焦虑的状态的话，还会有适得其反的效果</li></ul></li><li><strong>以身作则</strong><ul><li>管理者本身必须是一个敢于承担责任，也善于承担责任的人</li><li>当管理者能够做出表率、成为团队的标杆时，员工也就有了努力的方向</li></ul></li><li><strong>培养员工的自信心</strong><ul><li>在员工取得成绩的时候，管理者也要从物质和精神层面给予适当的激励</li><li>员工的自豪感和成就感也是自我成长的重要推动因素。</li></ul></li><li><strong>让员工学会独立思考</strong><ul><li>为了培养员工，管理者需要不断抛出问题，让员工自己去思考，自己给出解决方案</li><li>只在适当的时候，给予一些启发和少量的指导</li><li>员工得到成长，管理者也可以考虑更多更深入的问题</li></ul></li></ul></li><li><strong>给授权，不当加班狂</strong><blockquote><p><strong>授权机制</strong> 让人尽其才、物尽其用，最终实现团队绩效最大化。</p></blockquote></li></ol><ul><li><strong>根据员工的能力和水平，给予相应水平的授权</strong><ul><li>明显超出或者低于员工水平的授权是不适合的，可能影响工作效果。</li></ul></li><li><strong>用人不疑，疑人不用, 充分的信任</strong><ul><li>出现一些偏差或错误，应该给予适当的指导</li><li>如果出现大的问题，则要及时调整授权策略，必要情况下通过审计等手段予以纠正。</li></ul></li><li><strong>责权对等</strong> 授权要和责任对等  <ul><li>员工得到了授权的同时，也需要承担对应的责任</li></ul></li><li><strong>尽量避免跨级授权</strong><ul><li>管理者只向直接下属进行授权</li><li>跨级授权会造成下级组织的职责被架空，容易导致管控混乱的问题出现</li></ul></li><li><strong>授权要明确具体</strong><ul><li>授权必须向被授权者、团队成员公开和明确所授权力的任务、目标、性质、职权范围和标准等</li><li>使被授权者工作时能有所遵循，并受到其他成员的监督</li></ul></li></ul><ol start="3"><li><p><strong>正确处理个体利益和团队利益的关系</strong></p><blockquote><p>个体利益和团队利益不是对立的,在团队里，管理者和员工的关系是协同的，双方都应该能站在对方的立场考虑问题：员工要更多考虑团队利益，管理者也要更多关注员工正常的诉求，以确保个体利益与团队利益的一致性</p></blockquote></li><li><p><strong>团队利益是从团队的成果中获得的，而不是来源于削减员工的正常利益</strong></p><ul><li>团队管理者本身也是个体，应该具备同理心，找到让团队和员工达成双赢的平衡点。</li><li>管理者要关注团队成员的工作，尤其在考核和激励上，要做到公平公正，以确保团队利益和个体利益的平衡</li></ul></li><li><p><strong>管理者应该为团队成员提供好的环境和机会</strong></p><ul><li>员工的积极性和才华的发挥有赖于团队的支持</li><li>管理者应该尽可能让员工的创造力得以发挥，最大限度地激发个体活力，确保员工能真正为团队利益做贡献。</li></ul></li><li><p><strong>在个体利益和团队利益发生冲突时，要引导员工以大局为重</strong></p><ul><li>团队目标的达成，可以为员工利益提供保障</li><li>优秀的员工都会有团队合作的精神，会与团队成员密切配合，来一起达成团队目标</li><li>管理者在人才招募和培养上要注意识别有团队精神的个体，要能培养员工的大局观，以及能构建有凝聚力的团队</li></ul></li><li><p><strong>不当“老好人”，坚持定规则</strong></p><ul><li><strong>提前亮出自己的原则与价值观</strong>，在员工加入团队的时候，就告诉他你的原则和立场</li><li><strong>遇到棘手的问题或重大冲突，不两头讨好，不随便妥协</strong> 宁可滞后解决，也不要打太极</li><li><strong>制定明确的规则、流程与制度</strong><ul><li>尽可能依据制度处理，减少人为的干预</li><li>从经常发生的典型问题中，梳理和总结流程、制度、规则上的缺陷和不足，及时加以完善和纠偏。</li><li>再通过制度建设和流程再造，机制性地解决问题，这样至少可以减少类似问题的发生。</li></ul></li></ul></li></ol><h3 id="6-团队管理的-8-项基本能力"><a href="#6-团队管理的-8-项基本能力" class="headerlink" title="6.团队管理的 8 项基本能力"></a>6.团队管理的 8 项基本能力</h3><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/ability.png"></p><ol><li><p><strong>人性理解力和人际连接力</strong></p><blockquote><p>管理不但要管事情，还要管人。支撑“员工激发者”这个角色的两个能力分别是人性理解力和人际连接力</p></blockquote><ul><li><strong>人性理解力</strong> 优秀的团队管理者应该具备了解员工工作动机、意愿、兴趣爱好、优势和劣势的能力</li><li><strong>人际连接力</strong> 基于对员工理解的基础上，能够走进员工的内心，让员工愿意把你当成可以坦诚沟通和交流的对象，做到有效的连接</li><li><strong>如何提升</strong><ul><li><strong>要重视人性理解力的提高</strong><ul><li>理解一个人，要了解他的家庭背景、教育背景、生活和工作经历等，这些很能影响一个人的性格。</li><li>还要从动机理论上去理解一个人，即在分析一个人的行为时，要能从深层次理解他的所思所想。</li></ul></li><li><strong>管理者要有开放的心态和包容的胸怀，要能听得进不同的声音，甚至要能直面批评和指责</strong><ul><li>放下身段，让员工感觉没有距离感</li><li>日常管理工作中，要多创造机会让员工跟你进行沟通交流。</li><li>每天团队下午茶的 Free talk、每周半天的管理者 Open day 等，都是非常好的做法。</li></ul></li></ul></li></ul></li><li><p><strong>沟通影响力和组织协同力</strong></p><blockquote><p>作为“组织融合者”，管理者需要具备沟通影响力和组织协同力。需注意，这两个力是有前后顺序的，沟通影响力在前，组织协同力在后。  </p></blockquote><ul><li><strong>沟通影响力</strong> <ul><li>通过和员工的有效沟通和对话，去影响员工的思想和行为。借助团队的力量来完成组织的目标。</li><li><strong>如何提升</strong><ul><li><strong>聆听</strong><ul><li>只听懂字面意思，不代表你能听懂了别人的内心。</li><li>在听完对方的话后，可以试着问一句，“我这么理解，你看对不对？”</li></ul></li><li><strong>表达</strong> 表达的逻辑性是重点<ul><li><strong>结论先行</strong> 让对方快速理解你的想法，减少对方对你意图的误判，也就减少跑题的可能性。</li><li><strong>点不过三</strong> 总结不超过三点，因为过多、过杂的点会让沟通效果明显下降。</li><li><strong>换位表达</strong> 站在对方的角度思考问题，要思考什么样的表达能让对方更容易理解。</li></ul></li><li><strong>互动</strong> 明确地告诉对方，双方的分歧点在哪儿，征求对方的意见后，给出自己的解决方案。</li><li><strong>共识</strong> 达不成共识，在沟通中找到双方利益的交集是核心。<ul><li>着眼于利益而不是分歧，能提高达成共识的可能性。</li><li>沟通影响力的大小，不在于完全把自己的思想强加在他人身上，而是循序渐进地强化影响，</li></ul></li></ul></li></ul></li><li><strong>组织协同力</strong><ul><li>除了影响个体以外，更强调的是影响一个群体以及群体与群体之间关系的能力</li><li>要求管理者具备构建协同机制、协同目标、协同资源和协同工作节奏的能力。</li></ul></li></ul></li><li><p>目标分解力和员工赋能力</p><blockquote><p>管理者履行“目标管理者”角色时，首先需要理解公司目标，并分解到团队目标，进而再到个人目标，最终形成可落地的目标，这就是管理者需要具备的目标分解力。</p><ol><li><strong>方向一致</strong> 由总目标分解成各子目标过程中， 必须确保各目标的一致性。</li><li><strong>进度统一</strong> 各分解目标是紧密相关的，必须过程同步，一步步靠近总目标。</li><li><strong>责权对等</strong> 承接目标的个体，必须对目标负责，同时享有和责权对等的权力或一定的授权。</li></ol></blockquote></li></ol><ul><li>对于一些难度较大的目标，管理者首先要识别能承担这个目标结果的人，如果找不到合适的人选，管理者就需要亲自牵头来完成。</li><li>不同能力和特点的人，适配相应的工作内容。基于工作具体内容和轻重缓急，安排合适的员工。比如，有些员工适合做流程性的工作，而有些员工适合做开创性的工作，那么在目标分解的过程中，就要有意识地进行目标和人的适配。</li><li>针对不同的个体，赋能的方式各有不同。针对职场小白，可以采取培训、导师带教等方式；而针对有经验的人，可以选择专题讨论或头脑风暴等方式。</li><li>赋能不是简单地把答案告诉员工，而是要引导员工理顺思路、理解工作流程、方法和工具。最后员工通过实践去理解和形成了自己的能力，并能举一反三。</li></ul><ol start="4"><li><p>科学评价力和有效激励力</p><blockquote><p>管理者在履行“结果评价者”这个角色时，需要做两件很重要的事情：①对结果的评价，②对人的激励。这分别对应科学评价力和有效激励力。</p></blockquote><ul><li>绩效评价是对事情的评价，而不是对人的评价。</li><li><strong>如何做好</strong><ul><li><p>评价要有客观依据，而非以管理者自己感性的认识去评价；</p></li><li><p>评价标准要科学可量化，评价维度要多元，避免个体的认知偏颇；</p></li><li><p>评价过程要公平和公正，评价结果要公开。</p></li><li><p>有效激励力, 内部和外部两种驱动力。激励是要在公平的原则下，做差异化设计的。</p><ul><li>区分不同岗位的工资标准。结合外部薪酬水平和公司的薪酬定位，确定团队中不同岗位的工资标准，并每年刷新迭代。</li><li>区分员工和管理者的奖金浮动比例。通常管理者的奖金浮动比例要高于普通员工，越是高层的岗位，奖金的浮动比例应该越高。</li><li>区分总部和外派的津贴差异等。通常来说，应该给外派员工更多的津贴，以支持外派政策的实现。以华为为例，它的外派员工可以享受离家补助、伙食补助、住房补助等多项津贴。</li></ul></li><li><p>最大化激励效果</p><ul><li>在<strong>精神激励</strong>上，加大对日常工作的及时反馈，对员工能及时给予肯定、点赞和表扬，让员工感受到持续的激励力量；</li><li>在<strong>机会激励</strong>上，尽可能让员工参与更重要的工作或项目，给予更大的工作自主权，让员工感受到信任和使命的力量。</li></ul><h4 id="如何提高这些管理能力"><a href="#如何提高这些管理能力" class="headerlink" title="如何提高这些管理能力"></a>如何提高这些管理能力</h4></li></ul></li></ul></li><li><p>多读一些经典的管理书籍，比如德鲁克管理学系列丛书就是一个非常不错的选择。</p></li><li><p>多向你的上级或者有经验的前辈请教，了解他们遇到相关问题时的解决办法以及心得体会。</p></li><li><p>你也可以像现在这样，多听一些外部管理学者的课程或者讲座，体系化地去理解管理的逻辑架构。</p></li><li><p>在不断的应用过程中深化你对这些能力的理解，真正做到“有认知、有逻辑、有方法、有实践”，最终形成自己扎实的能力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.跟着华为学管理-铁军养成</title>
      <link href="2022/04/06/%E7%AE%A1%E7%90%86/3.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E9%93%81%E5%86%9B%E5%85%BB%E6%88%90/"/>
      <url>2022/04/06/%E7%AE%A1%E7%90%86/3.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E9%93%81%E5%86%9B%E5%85%BB%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="3-跟着华为学管理-铁军养成"><a href="#3-跟着华为学管理-铁军养成" class="headerlink" title="3.跟着华为学管理-铁军养成"></a>3.跟着华为学管理-铁军养成</h2><h3 id="1-如何设计团队组织架构"><a href="#1-如何设计团队组织架构" class="headerlink" title="1.如何设计团队组织架构"></a>1.如何设计团队组织架构</h3><ul><li>领导模式都需要在一个适合自己企业发展的组织中来推行，如果组织架构不合理，那很多管理措施和手段的推行效果就会大打折扣，甚至可能会做很多的无用功。</li><li>组织架构是指组织内部各个部门和层次之间的构成方式，</li><li>组织架构的有效性是一个组织能够高效运转并取得良好绩效的先决条件。</li></ul><h4 id="项目型组织架构"><a href="#项目型组织架构" class="headerlink" title="项目型组织架构"></a>项目型组织架构</h4><ul><li>当一个团队或企业的组织架构是依托项目而设立的，并且团队中的绝大多数工作都是围绕项目进行的，那这种就属于项目型组织架构。</li><li>这样的组织架构更适合初创的小规模企业<ul><li>企业人员少</li><li>以项目立业,内部的目标也非常清晰</li><li>这个阶段的企业，本身职责和边界就是不清晰的，完成企业的目标</li></ul></li><li>项目型组织架构的优点<ul><li>以项目为主，目标明确，沟通顺畅</li><li>结构简单，责权分明，利于统一指挥</li><li>决策快速，管理简单，比较适合初创企业</li></ul></li><li>项目型组织架构的不足<ul><li>各项目之间存在一些“壁垒”，不是那么容易沟通或进行能力共享等操作；</li><li>项目是一种周期性的工作，缺乏连续性，会给员工带来不稳定的感受。</li><li>随着企业的发展和壮大,这种简单高效但却较为粗放的管理模式会渐渐拖累企业和项目的长期发展</li></ul></li></ul><h4 id="职能型组织架构"><a href="#职能型组织架构" class="headerlink" title="职能型组织架构"></a>职能型组织架构</h4><ul><li>介绍<ul><li>当企业发展到一定阶段以后，人员规模壮大、对专业化人才的需求，以及所面对的客户群体的多样性，都对企业的管理提出了更高的要求。</li><li>此时，企业会对管理方式进行大的改变，按照各专业要求的不同，划分不同的职能部门，这就是职能型组织架构。</li><li>有利于企业内部知识的积累和传承，也有利于人才的快速培养，是目前很普遍的组织架构。</li><li>这些企业有一个特点，基本上都是生产类企业，并且是相对传统的产品或行业，生产的重复性较高，在行业内的专业性也比较强，短期内没有太多的生存压力。</li><li>职能型组织架构所特有的高度专业性、秩序感对于重复性生产（包括实体产品和软件等）为主的企业是非常有利的。</li></ul></li><li>职能型组织架构的优点<ul><li>各部门的专业性很强，内部交流顺畅；</li><li>员工的职业发展通道比较清晰；</li><li>责权利的划分很清晰；</li><li>有利于重复性工作为主的过程管理。</li></ul></li><li>职能型组织架构的不足<ul><li>组织的专业性强但比较死板，不能有效地求新、求变；</li><li>部门利益优先，不利于业务的统筹推进；</li><li>各职能部门横向联系薄弱，部门间协调难度大；</li><li>项目经理的资源调配能力弱，管理难度大。</li></ul></li></ul><h4 id="矩阵型组织架构"><a href="#矩阵型组织架构" class="headerlink" title="矩阵型组织架构"></a>矩阵型组织架构</h4><ul><li><p>介绍<br>-融合了前面两种组织架构的优点，既有按职能设置岗位的职能模式的特点，又有按项目划分的项目型组织的特点，</p><ul><li>从结构上看，构成了一个纵横交叉的体系，所以被称为矩阵型组织架构。</li><li>这种组织架构是把资源配置和资源使用这两个维度做了有效结合。</li></ul></li><li><p>矩阵型组织架构的优点</p><ul><li>组织内按照项目运作，机动、灵活，可随项目状态设立或解散</li><li>任务清楚，目的明确，人员专业性强，可以有效促进项目的实现</li><li>加强了不同部门之间的配合和信息交流，克服了职能型组织中各部门互相脱节的现象。</li><li>有着项目型的灵活高效，以及职能型的专业和有序</li></ul></li><li><p>矩阵型组织架构的缺陷：对于组织管理能力的要求非常高。</p><ul><li>员工面临多头领导，管理难度显著增加，管理成本高</li><li>对员工的绩效难以有效监测</li><li>资源分配与项目优先的问题产生冲突</li><li>责权利难以保持平衡</li><li>华为在发展的这几十年间，一直通过跟国内外的管理咨询公司合作，来不断提升自身的管理水平和能力，使得矩阵型组织架构在华为得到了很好的运作，通过各种机制保证了项目运作的专业性和敏捷性。<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/huawei-org.png"></li></ul><h4 id="事业部制组织架构"><a href="#事业部制组织架构" class="headerlink" title="事业部制组织架构"></a>事业部制组织架构</h4></li><li><p>介绍</p><ul><li>按产品（比如，美的集团）或区域（比如，中兴通讯）设立事业部，每个事业部都有自己较完整的职能机构，具有较大经营自主权；</li><li>总部，则只掌握重大问题决策权，从而能从日常生产经营活动中解放出来</li><li>事业部制适用于规模庞大、品种繁多、技术复杂的大型企业。</li><li>组织结构的基本原则是“集中决策，分散经营”，也就是说，重大事项由集团公司最高决策层进行决策，事业部独立经营核算。</li><li>对于大型企业和集团，在产品繁复、区域广阔的情况下，事业部制是一个非常值得考虑和采用的组织架构。</li><li>事业部制对于管理能力的要求也非常高，同时也要把事业部制容易出现的人员冗余等问题提前考虑好，否则，在大集团或大企业内部会出现严重的资源浪费问题。</li></ul></li><li><p>事业部制的优点</p><ul><li>总公司领导可以摆脱日常经营事务，可以更多思考战略性问题；</li><li>各事业部独立核算，更有积极性，更加专业化，内部协调方便；</li><li>事业部间有竞争，有利于企业的发展；</li><li>有利于人才的培养和发展。</li></ul></li><li><p>事业部制的缺点</p><ul><li>总部与事业部的职能机构有重叠，人员会浪费；</li><li>独立性强，容易忽视企业整体利益；</li></ul></li><li><p>过于强调经济利益，事业部间协调难度大。</p></li></ul><h4 id="新型组织架构"><a href="#新型组织架构" class="headerlink" title="新型组织架构"></a>新型组织架构</h4><ul><li>平台型组织<ul><li>滴滴 抢单机制</li><li>华住</li></ul></li><li>生态型组织</li><li>学习型组织</li><li>共生型组织 陈春花</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>优秀的组织架构并没有固定的模式，但会有如下一些共性。</p><ul><li>组织目标明确： 不管采用何种组织架构，共同目标需要明确。</li><li>团队互相信任： 在组织内部，不管是团队内部还是团队之间，有很强的信任机制。</li><li>业务稳定发展： 当前的组织架构有利于企业的业务统筹推进和稳定发展。</li><li>运作效率提高： 组织能够高效运转并取得良好绩效。</li></ul><h3 id="2-如何构筑团队文化氛围"><a href="#2-如何构筑团队文化氛围" class="headerlink" title="2.如何构筑团队文化氛围"></a>2.如何构筑团队文化氛围</h3><p>要判断这样的口号是不是真正的团队文化，关键在于：它是不是已经在团队内部成为一种共识，一种根植在团队成员潜意识里的想法？大家在工作的时候是不是真的在围绕着这样的口号来实践？如果是，那就是真正的团队文化；如果不是，那就仅仅是贴在墙上的口号而已。</p><h4 id="如何构建"><a href="#如何构建" class="headerlink" title="如何构建"></a>如何构建</h4><ol><li><strong>价值观提炼</strong></li></ol><ul><li>团队文化最终都一定要跟创业的初心以及做这个事情的愿景相结合。</li><li>华为公司的价值观是：以客户为中心，以奋斗者为本，长期艰苦奋斗，坚持自我批判。在这个价值观的指引下，华为的每个部门基于自己的业务特色，都形成了具有自身组织特色的价值观和文化理念。<ul><li>华为的市场团队，素以“英勇善战”闻名，被外界称为“狼文化”的代表。在市场部内部，“胜则举杯相庆，败则拼死相救”的口号很深入人心，</li><li>华为的研发团队，持之以恒、孜孜不倦地投入研究，很多时候要花费几年甚至十几年的时间才能看到成果，因此研发团队的特色文化是“板凳要坐十年冷”</li><li>供应链团队，工作是及时准确地交付高质量的产品，这个过程中不仅要求团队持续提高产品的质量，而且还要逐渐降低成本，因此供应链团队的特色文化是“持续改进，精益求精”。</li><li>消费者业务 BG，团队不断地求新求变，以满足消费者快速变化的需求，因此消费者业务 BG 信奉的文化理念是“Nothing is impossible（没有什么不可能）”。</li><li>基于公司的价值观，结合团队的工作特性，提炼出属于团队自己的文化表述。</li></ul></li></ul><ol start="2"><li><strong>文化成形</strong><ul><li>真正的团队文化是在工作中逐渐形成的</li></ul></li><li><strong>文化强化</strong><ul><li><strong>正向强化</strong><ol><li><strong>在团队的日常运作中，要尽量以团队文化作为行为的标准。</strong>做最终决策的时候就要考虑跟团队文化导向是否匹配的问题。这样的决策过程就是对文化的正向强化。</li><li><strong>对于符合和认同团队文化，并将其运用到工作实践中的员工，要在精神和物质层面进行鼓励、表扬和激励</strong></li></ol></li><li><strong>负面强化</strong> 热炉效应<ul><li>在企业的管理中，如果有人打碎了规则和底线的“第一扇窗”，而没有被惩罚的话，那么接下来面对的将是“破窗效应”带来的“千疮百孔”；</li><li>而对违反团队文化和价值观行为的负面强化和“小题大做”，就可以真正有效地避免“破窗效应”的发生。</li></ul></li></ul></li><li><strong>文化传播</strong><ol><li>当通过工作过程形成了团队文化，并且不断得到加深和加强，真正变成了企业的内在精神以后，</li><li>我们还应该把这些积极的、正面的东西传递出去，使得原本小范围内的团队文化可以得到扩大，从而有更大的影响力。</li></ol></li></ol><h3 id="3-如何激发团队个人活力"><a href="#3-如何激发团队个人活力" class="headerlink" title="3.如何激发团队个人活力"></a>3.如何激发团队个人活力</h3><p>有了个体活力，才有组织活力，才能促进组织的业绩达成。但关键时刻总会有卓越的领导者或教练带领大家走出低谷，去攀登另一个高峰。</p><ol><li><strong>明确组织发展目标</strong><ul><li>确定业务规划，带领团队进步和突破，让员工能看到组织发展的前景。只要企业有发展，团队就会更有活力，也就有更多的能动性。</li><li><strong>方向大致正确</strong> 方向很难要求绝对正确，在一定时间内或许有偏差。</li><li><strong>组织充满活力</strong> 有了自己的纠错能力，就能让方向不至于产生大的偏差，避免企业发展“错误”出现。</li></ul></li><li><strong>帮助员工理解和做好工作</strong><ul><li>首先得让员工知道要做什么，以及为什么要做这个事情。</li><li>要经常关注员工工作中的状态，要注意他们的情绪，也要去发现他们是否在工作中遭受了大的挫折，进而<strong>“对症下药”，对员工进行持续干预，并且给予及时的反馈和帮助</strong>。</li></ul></li><li><strong>让员工远离舒适圈</strong><ul><li>员工就进入了舒适圈,考虑给员工一些有挑战性的工作任务</li><li>在安排工作的时候，团队的一些工作不一定就只安排给一个人，可以考虑安排给不同的人，这样不同员工之间能够互相取长补短，能力也更加均衡。</li><li>轮岗制<ul><li><strong>业务轮换</strong><ul><li>研发人员去做测试、服务，从而让研发人员能真正理解研发工作跟测试、服务的衔接，同时，也可以把研发的一些管理经验和思想带到测试和服务岗位。</li><li>对于员工而言，在新的岗位上，工作内容和工作方式跟原来都有了很大的变化，员工会更有新鲜感，从而可以更加全身心投入工作中。</li></ul></li><li><strong>区域轮换</strong><ul><li>将总部的员工派去海外和一线工作，这样可以把总部的管理方法和思想带到一线，也可以把一线的想法反馈回总部</li><li>并且一线的工作更加贴近客户，节奏更快，也更有挑战性，这也会推着员工不断努力进步。</li></ul></li><li>在华为，要成为管理者，是必然要有多个部门、多个区域的工作经历的，所以员工是愿意被“轮岗”的。也正是通过这样的方式，华为员工才能不断保持工作活力。</li></ul></li></ul></li><li><strong>提升员工的工作需求层次</strong></li></ol><ul><li>马斯洛需求层次理论来看，当员工的温饱、生存等基本需求得到满足以后，就会有更多的外部需求，这些需求就是他们新的工作动力</li><li>作为管理者，就要考虑如何进一步赋予员工工作更高层次的意义，否则，员工还是会慢慢失去活力和动力的。</li><li>2019 年，华为内部评选出了“全球十佳食堂”和“金牌厨师”。</li></ul><ol start="5"><li><strong>让年轻员工发挥主观能动性</strong></li></ol><ul><li>在物质激励以外找到符合他们心理特征的激励方式，帮助他们提高工作动力和活力。</li><li>在安排工作的时候，可以提前做好沟通，然后再安排一些员工自己觉得很有价值、很重要，并且之于员工自己的位置还非常关键的工作。</li><li>在必要的时候，管理者要学会放手，愿意把一些重要的事情交给年轻人操刀。</li><li>还可以调动相关的资源和团队的力量来配合员工。</li></ul><h3 id="4-如何提高团队抗压能力"><a href="#4-如何提高团队抗压能力" class="headerlink" title="4.如何提高团队抗压能力"></a>4.如何提高团队抗压能力</h3><ol><li><strong>管理层对压力要积极应对</strong></li></ol><ul><li>管理者也是团队应对压力的第一责任人,遇到危机，一定要身先士卒</li></ul><ol start="2"><li><strong>团结一致对抗压力</strong></li></ol><ul><li>首先，从员工的主观感受层面，员工只有高度认同企业的核心价值观和企业文化，才能从内心深处真正做到对企业的认同。<ul><li>“以客户为中心，以奋斗者为本，长期艰苦奋斗，坚持自我批判”“胜则举杯相庆，败则拼死相救”等理念被员工高度认可，这是员工持续保持高昂斗志的精神支柱。</li></ul></li><li>另外，从员工利益层面，当员工和公司的利益统一的时候，员工就会和公司共同努力奋斗。<ul><li>华为在公司内部长期坚持的是“不让雷锋吃亏”“给火车头加满油”的管理思想</li><li>通过合理的价值分配，包括员工持股计划、时间单位计划等形式，把企业经营的收益跟员工分享，从利益层面，把员工和公司绑定在一起。</li></ul></li></ul><ol start="3"><li><strong>分析压力找到解决办法</strong></li></ol><ul><li>当分析清楚压力后，就要针对这些来源采取必要的措施，将问题解决。<ul><li>该把应对压力的工作做细分，交给团队或员工的可以是其中的一小块任务，这样完成起来会相对容易，感受到的压力也会比较小</li></ul></li></ul><ol start="4"><li><strong>用压力激发个体潜力</strong><ul><li>在战略上要藐视敌人，但在战术上要重视敌人，压力让我们意识到自己的不足。</li><li>适当的外部压力也会激发组织和个体的潜力，帮助每个人更好地成长。</li></ul></li></ol><h3 id="5-如何强化团队协同互助"><a href="#5-如何强化团队协同互助" class="headerlink" title="5.如何强化团队协同互助"></a>5.如何强化团队协同互助</h3><p>“周边协同”，指的是团队内部、团队与团队之间，员工互相帮助、互相协同的行为，以取得更佳的工作成果和效率。</p><ol><li><strong>提高协同意识</strong><ul><li>团队精神是在招聘的时候就会特别强调的个人基本素质，并且在后续员工培训的时候，也无时无刻不在强调团队协同。</li><li>团队协作、群体奋斗和鼓励求助</li><li>信息分享，配合他人，善于学习，有包容心，主动求助，乐于助人，遵从规则。</li><li>新员工培训的时候，还有一些强调团队协作的游戏和比赛，比如，拔河、旱地龙舟、辩论赛等，全部都是以集体为单位来 PK 的，都是在不断强调协同的重要性。</li><li>是用制度强化、用文化牵引的。</li></ul></li><li><strong>设计协作机制</strong><br>建立一套让团队协作可以顺利且有效开展的制度和流程。</li></ol><ul><li><strong>导师制度</strong> 全员导师制<ul><li>不仅仅是在工作时间实行，给新员工工作上的帮助；同时也会在生活和思想上给员工以指导，帮助员工在这些方面都能得到快速的提高。</li><li>也会在生活和思想上给员工以指导，帮助员工在这些方面都能得到快速的提高。</li><li>通过制度来保证“导师制”运作的有效性<ul><li>作为导师，需要经过上岗认证才有资格正式带徒弟；</li><li>每年还会对优秀导师进行评选，记录在带教过程中出现的正、反面的关键事件，做得好的导师，会被优先考虑提拔为基层干部。</li></ul></li></ul></li><li><strong>“铁三角”模式</strong> 以客户经理、解决方案专家/经理和交付专家/经理为三个顶点的“三角形组织模型”有着很强的稳定性，这就是后来大名鼎鼎的“铁三角”模式。<ul><li>在这一核心团队中，第一责任人由直接面向客户的客户经理担任，解决方案专家/经理和交付专家/经理全力协同。</li></ul></li><li><strong>组织绩效优于个人绩效</strong><ul><li>华为的考核和激励体系，对于组织的考核和激励是优先于对个人的。</li><li>华为的考核不仅仅是考个人，更是考团队。<ul><li>如果团队的考核结果不理想，作为团队的个体，也很难有很好的考核结果，甚至团队考核结果不好，团队内打 C 和 D（考核结果较落后）的比例也会相应增加。</li></ul></li></ul></li></ul><ol start="3"><li><strong>文化和激励牵引</strong></li></ol><ul><li>华为企业文化强调的是群体奋斗<ul><li>华为内部有一个“最佳协作奖”，就是专门奖励在工作中团队协作方面做得出色的团队或组织；</li><li>“金牌团队奖”，奖励的是以团队为单位，在年度工作中为公司做出突出贡献的集体。</li></ul></li><li>奖金分配上采用“获取分享制”<ul><li>任何组织与个人的物质回报都来自为客户创造价值的项目，各级组织凭价值创造过程中所做的直接或间接贡献分享奖金。</li><li>一线团队根据经营结果获取奖金，后台支撑部门通过为一线团队提供服务分享奖金。</li></ul></li></ul><ol start="6"><li><strong>如何处理团队矛盾冲突</strong></li></ol><ul><li>对于管理者而言，具备好的冲突管理技能，对于团队能力的提升和组织绩效的发展都有着非常重要的作用</li><li>冲突方式<ul><li><strong>业务方向的冲突</strong> 特别是企业在变革转型期，业务发展的方向不明确的时候，容易出现较大的内部冲突。</li><li><strong>关键举措的冲突</strong> 即使大家都认可统一的战略目标，但在实施路径上思路不一致，矛盾也会很容易暴露出来。</li><li><strong>团队间利益的冲突</strong> 屁股决定脑袋，从局部视角看，他们的道理都是充分的；但站在企业全局角度，这种冲突可能会导致企业整体利益受损。</li><li><strong>团队内个人间的冲突</strong> 主要是沟通不畅、思想不一致带来的</li><li>首先要从思想意识层面入手，然后再辅以有效的工具方法</li></ul></li><li><strong>思想意识层面</strong><ul><li><strong>理性面对冲突</strong><ul><li>在看待矛盾和冲突的过程中，一定要客观理性。矛盾和冲突的解决与否不能以冲突是否显性为标准。</li><li>冲突是发展、变化或创新带来的副产物。</li><li><strong>分类</strong><ul><li><strong>建设性冲突</strong><ul><li>这种冲突中的员工，有着比较一致的价值观和目标，仅仅由于工作方法的差异、思想的碰撞，导致了冲突的产生。</li><li>管理者应该帮助员工沟通、改进或改变工作方法，从而更好地在解决冲突的过程中，提升员工之间的竞争意识，提高组织绩效。</li></ul></li><li><strong>破坏性冲突</strong><ul><li>有着不一样甚至完全背离的价值观和组织目标，同时，这样的冲突往往伴随着思想对立和情绪化，对于组织目标的实现有着巨大的负面作用。</li><li>管理者要快刀斩乱麻地去解决，如果任由其发展，可能会使得冲突不断扩大和影响到其他人，造成组织氛围的恶化。</li></ul></li></ul></li></ul></li><li><strong>就事论事，公开沟通</strong><ul><li>要做到就事论事，只讨论导致冲突的具体问题，不做扩大化。特别是不能放任冲突上升到人身攻击层面，同时也不能翻旧账。</li><li>作为管理者，你要能够帮助员工把冲突的范围限定在具体的问题上，并且尽量让员工相互之间没有敌意，可以坐下来理性地沟通，这就已经取得了解决冲突的第一步胜利。</li><li>还需要遵循几个原则：就事论事，公开讨论，兼听则明。</li></ul></li></ul></li><li><strong>工具方法层面</strong><ul><li><strong>通过固化流程和制度化解冲突</strong><ul><li>有了沟通途径，并不一定就能解决矛盾和冲突。在沟通的基础上，你还需要做进一步分析，了解矛盾和冲突的来源；</li><li>分析清楚来源以后，要在组织内部寻找到解决措施，这样的措施不仅要解决当前的冲突，还要能够避免和预防未来可能的冲突。<ul><li>华为“铁三角”模式</li><li>IPD 变革，从产品研发的最初阶段，就要从需求端进行把控，各个不同的部门，包括市场、销售、研发、测试、生产、服务等相关部门，都要在评审中参与并提出意见。</li></ul></li><li>你要清楚地知道问题的根源，在找到解决问题的方法以后，就需要以自身的领导者地位，来推进“以机制解决问题，以流程固化措施”的方式，使得冲突双方能够主动合作，实现共赢。</li></ul></li><li><strong>合理“制造冲突</strong><ul><li>这里所谓的“制造冲突”，是基于团队内部的建设性冲突而言的。</li><li>适当的冲突可以帮助管理者从不同角度看到问题的多个方面，可以有效帮助决策，也可以促进团队的创新和变革。</li><li>对于员工而言，建设性的冲突可以激发员工的潜能，帮助员工更好地投入学习和竞争中，从而进一步提升团队的组织绩效。</li><li>某些时候制造一些建设性的矛盾冲突，对于组织的发展也是很有好处的。</li><li><strong>华为蓝军</strong> 用放大镜甚至显微镜看问题，提出“冲突性观点”，引发相关部门的关注和思考，避免后续发展走弯路。通过这样的方式，华为的战略制定会更加严谨。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react重学</title>
      <link href="2022/03/28/%E6%8A%80%E6%9C%AF/react-%E4%BF%AE%E8%A8%80/"/>
      <url>2022/03/28/%E6%8A%80%E6%9C%AF/react-%E4%BF%AE%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="react-重学"><a href="#react-重学" class="headerlink" title="react 重学"></a>react 重学</h2><ul><li>what react是什么 <ul><li>react是一个视图库，使用了jsx，jsx本身是js的一种拓展</li><li>createElement 内部处理了props，children，type</li><li>生命周期的顺序 父子</li><li>生命周期的弊端 </li><li>fiber架构 同步递归的进程占用 改为异步可中断的链表</li><li>hooks的发展 类组件与函数组件的区别 ui=render(data)<ul><li>why class模板的上手难度搞，生命周期的顺序</li><li>why this上下文的变化，难以控制</li><li>why 函数是把数据和渲染绑定到了一起</li><li>what 链表式的状态存储，所以顺序不能变  mountState updateState</li></ul></li><li>虚拟dom<ul><li>why 数据驱动视图 通用的跨平台描述</li><li>what 描述dom的数据结构 dom级渲染会比js计算开销少，但是缓冲</li></ul></li><li>diff <ul><li>what 协调的一部分</li><li>复杂度o3降低 只比较同级别的节点 只比较类型一样的节点</li></ul></li><li>setState  是异步的，多个会合并，被包在wrapper内部，执行过程会被打标记，而微任务和异步，会让执行顺序延后，</li><li>fiber架构动机 从同步reconciler到scheduler优先级调度</li><li>render如何渲染链路 render 三个模式 legacy 执行过程被打标记了 concurrent<ul><li>legacy 是同步渲染的，</li><li>concurrent是异步渲染， fiber是一个兼容异步和异步的设计</li><li>workInProgress树， 创建fiberRoot 和current 通过 alternate关联</li><li>fiberRoot是一个链表树，深度优先递归，child nextSlibing returnNode，收集effectList，副作用链表,</li><li>scheduler  采用双缓存 复用节点， 通过时间切片，优先渲染，让出进程，通过小顶堆的结构，取得优先级高的渲染进程</li><li>虚拟dom 合成事件委托 document 元素dom nativeEvent<ul><li>抹平了不同浏览器的差异，提供了稳定的事件接口</li><li>把握住了事情处理的主动权</li></ul></li><li>redux 严格单向数据流 发布订阅优化 稳定执行 dispatch 就是生产新的state，触发发布 内部上锁<ul><li>中间件  面向切面</li></ul></li><li>优化  shouldComponentUpdate | pureComponent immediate | useMemo</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊加班</title>
      <link href="2022/03/02/%E9%9A%8F%E7%AC%94/%E5%8A%A0%E7%8F%AD/"/>
      <url>2022/03/02/%E9%9A%8F%E7%AC%94/%E5%8A%A0%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="加班是什么"><a href="#加班是什么" class="headerlink" title="加班是什么"></a>加班是什么</h2><p>中文解释 在规定的工作时间结束后增加工作时间<br>我的理解 利用休息时间来解决工作时间没有完成但本该完成的事，有几个重点</p><ul><li>工作时间没完成</li><li>工作时间应该完成<br>很多时候，加班的量真的是工作时间该完成的么，还有加班的意义。</li></ul><h2 id="这么多年来我印象中的加班"><a href="#这么多年来我印象中的加班" class="headerlink" title="这么多年来我印象中的加班"></a>这么多年来我印象中的加班</h2><ul><li>刚进去工作，那个时候团队加班一起下班，刚毕业很不喜欢这样。</li><li>苏州开始做前端，加班学习，因为无知和挑战性，所以觉得很有意思</li><li>苏州后来客户出差，时间紧任务重，但是团队成员为了共同目标，积极努力，寻求最优解。</li><li>大连一家公司，负责人保证了结果，赶进度加班，很累，完全是超出了正常的工作的度，效果还不好，问题很大。</li><li>大连后面，为了在客户面前表现，或是平时大家工作效率低下，从风险控制上强制加班。</li></ul><p>总之，加班如果是为了提升还是团队的共同目标偏优化方向，没有人会有异议。如果是为了面子工程，或者弥补其他时候的效率，反而是很让人厌恶的。<br>归纳 提升自己，提高团队是好的，其他，从发展的角度来看，都不是合适的。</p><h2 id="为什么要说这个"><a href="#为什么要说这个" class="headerlink" title="为什么要说这个"></a>为什么要说这个</h2><p>今天宣布强制加班，其实也点名了是面子工程。</p><ul><li>个人原因，特别讨厌对个人和团队没有提升的加班</li><li>心态原因，本来在一个大家低效的团队里，我高效的运转，还要额外加班。</li><li>家庭原因，在工作的时候认真工作，休息的时候，需要对家庭负责。</li></ul><p>也不知道我写的东西会不会有人看，it行业现在比较卷，卷的有时候我真想知道我还能做什么，<br>最近出了开发，还要做管理，我的风格是把我觉得好的方法传授给别人，很多人不理解我，会觉得我是<br>在他们毛病，觉得我是好表现，想升职。</p><p>我一直都以我们是一个团队，目标就是追求更好，不管是代码的优雅，还是设计的优雅，我希望能够<br>带每一个人，写的更好。或许管理应该中庸，毕竟不是每个人都是我，我不该强迫每一个人。</p><p>现在的思路，大概就是，我会去理业务细节和实现思路，虽然你做出来的不一样，不优雅，我知道就行了，<br>如果你和我的期望相似，我会觉得你理解我，虽然我不是神，你可以比我期望的更好，你一定是优秀的，<br>我愿意把我的想法和你沟通，我们碰撞出火花，把工作做的更好。<br>如果不是我期望的，看上去也不太优雅，hack出来的，我也不会怪你，毕竟工作，谋个生计。<br>晚安。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp多个小程序和app开发复盘</title>
      <link href="2022/02/16/%E9%9A%8F%E7%AC%94/uniapp%E5%A4%8D%E7%9B%98/"/>
      <url>2022/02/16/%E9%9A%8F%E7%AC%94/uniapp%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="uniapp-开发复盘"><a href="#uniapp-开发复盘" class="headerlink" title="uniapp 开发复盘"></a>uniapp 开发复盘</h2><h3 id="开发时间线"><a href="#开发时间线" class="headerlink" title="开发时间线"></a>开发时间线</h3><ul><li>2021年11月4号，开始单端小程序开发，1月7号停止维护</li><li>2021年11月20号，开始另一端小程序开发，1月10号停止维护</li><li>2021年12月16号，开始APP开发</li><li>2021年12月29号，准备改造成双端小程序和app共用。</li><li>2021年1月17号，整体改造完成</li></ul><h3 id="改造初衷"><a href="#改造初衷" class="headerlink" title="改造初衷"></a>改造初衷</h3><ul><li>本身两个小程序都是app的一部分，适合做在一起</li><li>两个小程序单独发布，多个环境，切换比较麻烦</li><li>多个项目，并行开发起来较为麻烦，一致性不方便，dry也很严重</li></ul><h3 id="改造后"><a href="#改造后" class="headerlink" title="改造后"></a>改造后</h3><ul><li><p>优点</p><ul><li>在一个分支里面可以进行多个小程序和app的发布。</li><li>共用一份代码，保持一致性</li><li>不同平台有各自独自的代码，保持可不一致性</li><li>通过路由配置各端可灵活配置</li></ul></li><li><p>仍未解决</p><ul><li>不能同时开发多个项目，原因是路由是共用一份的，uniapp的规则</li></ul></li><li><p>如何解决</p><ul><li>多个小程序可以指定目录进行调试，避免互相干扰</li><li>app是HbuilderX启动的，暂时不清楚可不可以单项目多端开发</li></ul><h3 id="改造思路"><a href="#改造思路" class="headerlink" title="改造思路"></a>改造思路</h3></li></ul><ol><li>确认uniapp是可以支持多端的</li><li>不同端的区别分为路由和环境和运行时的代码<ul><li>路由通过配置，node做区分</li><li>环境通过配置，node区分和运行时动态判断</li><li>运行时通过uniapp运行时区分和当前的运行环境区分</li></ul></li><li>以上都可以解决之后，做出设计方案</li></ol><h3 id="其他心得"><a href="#其他心得" class="headerlink" title="其他心得"></a>其他心得</h3><ol><li>软件需要做整体设计</li><li>软件的设计并不是整体设计完就好了，在后续的时候得不停的去思考去优化</li><li>小程序分包比较简单，主要是考虑好，入口和模块就行</li><li>分层是减少软件间互相依赖的问题</li></ol><h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><p>代码倒没有太多参考的，因为业务场景和遇到的情况大家都不一样，简单说是dry和solid原则。</p><ul><li>避免dry，避免重复，要求我们尽可能提高复用性，不要害怕变化</li><li>solid<ul><li>srp 单一职责 一个类只有一个职责，一个方法只有一个功能</li><li>ocp 开放封闭原则,类应该支持拓展，但是避免修改</li><li>LSP 里式替换 子类是可以替换父类的，要注意出现异常</li><li>ISP 接口隔离 接口减少关联度</li><li>DIP 依赖倒置 高层模块不该依赖低层，减少耦合，应该面向接口编程</li></ul></li><li>做到随时可迁移，这个是我个人想法，其实也是高内聚低耦合的表现。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以编程本质是整体思维和细节思维的结合，需要在过程中不断思考，不断优化。<br>尽可能的去偷懒，可能为了偷一点懒，反而设计了一套短期收益低长期收益高的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 多端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storybook和mdx</title>
      <link href="2022/02/15/%E6%8A%80%E6%9C%AF/storybook/"/>
      <url>2022/02/15/%E6%8A%80%E6%9C%AF/storybook/</url>
      
        <content type="html"><![CDATA[<h1 id="storybook"><a href="#storybook" class="headerlink" title="storybook"></a>storybook</h1><p>storybook体验下来，应该是一个框架，专注于做ui组件相关的内容，无需前端项目可启动<br>比较适合做组件库和想统一组件规范的团队</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>核心是.storybook文件夹的配置<ul><li>main.js storybook的核心配置，决定解析那里的故事，和插件</li><li>preview.js 用来处理预览的情况</li></ul></li><li>故事是用来展示组件的。<ul><li>默认导出的是组件的描述，定义输出和不需要渲染的信息</li><li>命名导出的是真实渲染的组件，可以通过参数来传值渲染</li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件库 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 提效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pnpm</title>
      <link href="2022/02/09/%E9%9A%8F%E7%AC%94/pnpm/"/>
      <url>2022/02/09/%E9%9A%8F%E7%AC%94/pnpm/</url>
      
        <content type="html"><![CDATA[<h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>一直以前使用的都是npm和yarn,在看modern.js的时候发现已经开始大规模使用pnpm了，突然就感觉自己落伍了。<br>所以看到了，就来研究下pnpm到底是什么。</p><h3 id="npm-yarn-pnpm"><a href="#npm-yarn-pnpm" class="headerlink" title="npm, yarn, pnpm"></a>npm, yarn, pnpm</h3><p>首先，这三个都是前端的包管理工具。</p><ul><li>首先前端项目的包会很多，所以会出现互相依赖的情况</li><li>npm在处理互相依赖的时候，需要先遍历完在决定如何生成扁平的结构，所以安装会慢</li><li>yarn在npm基础上默认了并行安装的配置，缓存可以离线安装，增加了包的签名和安全性校验。</li><li>pnpm运行非常快，超过了上面2个，它有很大的优势<ul><li>多项目共享依赖，无需都安装，通过软连接来索引包依赖。大大节省了空间</li><li>支持monorepo，比如在根目录下 pnpm add A -r，所有的package都会安装A</li><li>安全性高，pnpm自创了一套依赖管理方式，解决了互相依赖非法访问的问题。</li><li>使用起来几乎没有区别，简单上手，这样的话会继续推进所有项目使用pnpm。</li></ul></li></ul><h3 id="monorepo-lerna-workspace"><a href="#monorepo-lerna-workspace" class="headerlink" title="monorepo, lerna, workspace"></a>monorepo, lerna, workspace</h3><p>monorepo 是管理项目的一种方式，</p><ul><li>一个项目中有很多独立的包，有自己的package.json,发布调试都是在自己内部进行，比较方便</li><li>但是带来了一个问题就是，很多包会共享依赖，目前常用解决方案是yarn的wordspaces</li></ul><p>yarn workspace解决了monorepo共享依赖的问题</p><ul><li>配置好packages目录后，会自动分析共享依赖</li><li>可以在根级通过workspace名直接运行内部的命令行</li></ul><p>lerna 是一个互相独立包的git库管理方式</p><ul><li>通过lerna.json配置来一键发布所有管理的包</li></ul><p>总结 </p><ul><li>使用monorepo管理项目，使用yarn workspace管理依赖， 使用lerna管理发布</li><li>上面提到了pnpm支持monorepo，配置pnpm-workspace.yaml</li><li>可以使用pnpm管理依赖和项目结构，lerna发布也是一种不错的选择</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年度目标</title>
      <link href="2022/02/09/%E7%9B%AE%E6%A0%87/2022/"/>
      <url>2022/02/09/%E7%9B%AE%E6%A0%87/2022/</url>
      
        <content type="html"><![CDATA[<h1 id="2021总结"><a href="#2021总结" class="headerlink" title="2021总结"></a>2021总结</h1><ul><li><p>2021年已经过去，去年的经历现在回想起来好像似乎没有什么变化，自己在这一年进步了多少也无法考证。</p></li><li><p>翺晟又干了8个月，一直以自己的喜好点进行技术研究，产出还算可以，算比较小众的吧。</p><ul><li>推进公司使用vue3，在处理grpc-web时降级vite到webpack，完成项目的整体基座。</li><li>结合vben组件库，将组件思想抽离，在公司内部结合闭包使用 table formModel form modal等组件</li><li>统一写法，把状态抽离到闭包内部，简化代码，抽离了部分配置来简化功能，打成共识可以减少代码量，也不易出错</li><li>完成大屏开发，组件只负责渲染，入口统一做数据管理，增加拦截层，通过参数返回mock，业务组件模块自成一体，做到可迁移</li></ul></li><li><p>埃森哲干了3个月，主要方向正在微信公众号，小程序框架uniapp上</p><ul><li>完成微信公众号紧急上线</li><li>小程序开发准备和整体设计，抽离通用库，支撑小程序的开发，</li><li>2个小程序多个环境集成到一个项目中，同时拓展出app业务，</li><li>使用node整体进行代码整合，使得1套代码，2端，3种不同业务的开发发布。</li><li>对代码进行分层优化，使每一层职责单一，同时抽象方法进行更详细的loading提升用户体验，</li></ul></li><li><p>做的不好的事情</p><ul><li>光顾着埋头干，没有去统筹全局，应该更积极的参与到业务中去，把控业务细节，因为后期发现想改，成本很高</li><li>没有进行较多的code review，导致成员的提升有限，并且没有对成员在提升上有所指导</li><li>工程化能力较为欠缺，只站在代码细节去解决问题，忽略了更加重要的设计问题。</li></ul><h1 id="2022年度目标"><a href="#2022年度目标" class="headerlink" title="2022年度目标"></a>2022年度目标</h1></li><li><p>工作上</p><ul><li>花1/3时间用来产品和开发对接中，确认业务细节和风险</li><li>花1/3时间用于代码review中，确保每一个人的能力和提升的关键点</li><li>花1/3时间用于node和工程化架构上，确保未来架构切换的可能性，</li></ul></li><li><p>生活上</p><ul><li>阅读时间欠缺，文学作品和技术要兼顾，每个月至少一本文学作品和技术书籍</li><li>照顾身体，健康同样重要，每周2-3次持续15分钟的锻炼，</li><li>照顾他人，对待爱人需要更加细心，主动承担家务，每天扫地拖地1次，周末做饭2次，</li><li>见识少，每年1-2次旅游，写游记，不可走马观花</li><li>兴趣爱好少，培养1-2个兴趣爱好，每周花1-3个小时</li></ul></li></ul><h2 id="2022第一季度回顾"><a href="#2022第一季度回顾" class="headerlink" title="2022第一季度回顾"></a>2022第一季度回顾</h2><ul><li><p>4.22 说来惭愧，时间基本上是被工作压满了</p><ul><li>阅读 半本大佬的技术书，文学作品没有涉猎，</li><li>照顾身体 基本上算可以</li><li>照顾他人 做饭的次数少很多</li><li>见识 还没执行</li><li>兴趣爱好 唱歌，准备培养，健身算的话，也是准备培养</li><li>3月份确立了今年要考研的目标，把大学的分数打出来看，平均分差0.9分就有学位证。悔不当初。</li></ul><h2 id="2022第二季度展望-6月30日回顾"><a href="#2022第二季度展望-6月30日回顾" class="headerlink" title="2022第二季度展望(6月30日回顾)"></a>2022第二季度展望(6月30日回顾)</h2><p>时间剩下3个月1周，考研是今年的核心目标，其他的允许搁置。</p><ul><li><p>下班时</p><ul><li>英语单词跟着课程学完 大约3500个，至少过10遍</li><li>长难句每天都锻炼。记录。</li><li>数据跟课学完，专业课学完,8月后开始补弱做题。</li></ul></li><li><p>工作时</p><ul><li>学习管理能力，及时输出，</li><li>学习设计模式，及时输出，</li><li>学习性能优化，及时输出，</li><li>继续保持技术的前瞻性。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 年度目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度目标 </tag>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint指南</title>
      <link href="2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/"/>
      <url>2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="eslint指南"><a href="#eslint指南" class="headerlink" title="eslint指南"></a>eslint指南</h1><h2 id="eslint是什么"><a href="#eslint是什么" class="headerlink" title="eslint是什么"></a>eslint是什么</h2><p>eslint是node写出来的一个代码静态分析工具，与之匹配的还有prettier代码美化工具</p><h2 id="eslint特点"><a href="#eslint特点" class="headerlink" title="eslint特点"></a>eslint特点</h2><ul><li>可插拔</li><li>规则独立</li><li>不限制编码风格，规则自由</li></ul><h2 id="eslint-使用指南"><a href="#eslint-使用指南" class="headerlink" title="eslint 使用指南"></a>eslint 使用指南</h2><ol><li>安装</li></ol><p><code>npm install eslint --save-dev</code></p><ol start="2"><li>生成配置文件</li></ol><p><code>./node_modules/.bin/eslint --init</code></p><ol start="3"><li>校验文件</li></ol><p><code>./node_modules/.bin/eslint yourfile.js</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目脚手架解决方案</title>
      <link href="2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="脚手架解决方案"><a href="#脚手架解决方案" class="headerlink" title="脚手架解决方案"></a>脚手架解决方案</h1><p>在多个项目中，很多内容都是可以复用的，手动通过脚手架创建的只是一个很基础的功能，所以需要构建自己的脚手架</p><h2 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a><a href="https://yeoman.io/">yeoman</a></h2><h3 id="yeoman是什么"><a href="#yeoman是什么" class="headerlink" title="yeoman是什么"></a>yeoman是什么</h3><p>yeoman 是一个快速建立项目的工具，它其实是下面的集合</p><ul><li>yo –脚手架，生成工具</li><li>grunt，gulp – 构建工具</li><li>bower，npm – 包管理工具  </li></ul><p>任何人可以通过它创建通用的模板，命名为generator-xxx, 执行的时候运行yo xxx就行</p><h3 id="yeoman-快速创建项目"><a href="#yeoman-快速创建项目" class="headerlink" title="yeoman 快速创建项目"></a>yeoman 快速创建项目</h3><ol><li>首先(全局)安装yo  <code>yarn global add yo</code></li><li>我们以generator-node模块为例，安装  <code>yarn global add generator-node</code> 里面有很多功能</li><li>创建文件夹<code>mkdir yo-quick</code>, 进入运行 <code>yo node</code>,回答一些问题，会自动创建模板文件<br><img src="/images/2021/8/1/yo-quick.png"></li></ol><h3 id="yeoman-创建自定义的脚手架"><a href="#yeoman-创建自定义的脚手架" class="headerlink" title="yeoman 创建自定义的脚手架"></a>yeoman 创建自定义的脚手架</h3><p>创建generator，其实就是创建一个npm模块，依赖于<a href="https://yeoman.io/authoring/index.html">yeoman-generator</a> 模块</p><ol><li>创建一个文件夹叫generator-self,新建<code>generators/app/index.js</code>文件，</li><li>问题的内容在prompting中，把答案存入this上下文的内容中,写入文件的内容在writing中，<ul><li>直接写文件 <code>this.fs.write(目标地址, 携带参数(用于ejs解析))</code></li><li>写入模板 <code>this.fs.copyTml(源文件, 目标地址, 携带参数(用于ejs解析))</code></li></ul></li><li>本地使用的话 <code>yarn link</code>，或者发到npm包里</li><li>运行的时候需要yo 包名，跑的是app目录下的</li><li>可以在app同级目录简历其他名称，yo 包名:名称就可以跑额外任务了</li></ol><p>列举一些this上下文方法</p><ul><li>安装依赖npm <code>this.npmInstall([&#39;lodash&#39;], &#123; &#39;save-dev&#39;: true &#125;);</code></li><li>安装依赖yarn <code>this.yarnInstall([&#39;lodash&#39;], &#123; &#39;dev&#39;: true &#125;);</code></li><li>运行脚本 <code>this.spawnCommand(&#39;composer&#39;, [&#39;install&#39;]);</code></li><li>用户输入<pre class="line-numbers language-none"><code class="language-none">this.prompt([&#123;  type: &quot;confirm&quot;,  name: &quot;cool&quot;,  message: &quot;Would you like to enable the Cool feature?&quot;&#125;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>打印log <code>this.log(&quot;cool feature&quot;, this.answers.cool);</code> // user answer <code>cool</code> used</li><li>验证额外参数 <pre class="line-numbers language-none"><code class="language-none">this.option(&quot;coffee&quot;);  this.scriptSuffix &#x3D; this.options.coffee ? &quot;.coffee&quot; : &quot;.js&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>获取根级目录 <code>this.destinationRoot();</code></li><li>获取目标路径 <code>this.destinationPath(&#39;index.js&#39;);</code></li><li>使用ejs模板和数据填充内容<pre class="line-numbers language-none"><code class="language-none">this.fs.copyTpl(  this.templatePath(&#39;index.html&#39;),  this.destinationPath(&#39;public&#x2F;index.html&#39;),  &#123; title: &#39;Templating with Yeoman&#39; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="plop"><a href="#plop" class="headerlink" title="plop"></a><a href="https://plopjs.com/">plop</a></h2><p>plop是一个帮你节省时间，帮助你的团队创建一致的新文件的小工具。<br>plop是根据配置模板，统一创建新文件的工具，类似 ng g page那种类型<br>其实类似webstorm创建项目的一些模板</p><ol><li>使用plop，首先在项目中安装plop依赖 <code>yarn add global plop</code>也行</li><li>在项目根目录创建<code>plopfile.js</code>文件<pre class="line-numbers language-none"><code class="language-none">   module.exports &#x3D; function (plop) &#123;    &#x2F;&#x2F; create your generators here    plop.setGenerator(&#39;component&#39;, &#123;        description: &#39;create component&#39;,        prompts: [&#123; &#x2F;&#x2F; 类似之前的提问            type: &#39;input&#39;,            name: &#39;name&#39;,            message: &#39;component name&#39;,            default: &#39;my component&#39;        &#125;],        actions: [&#123; &#x2F;&#x2F; 创建的操作            type: &#39;add&#39;,            path: &#39;src&#x2F;components&#x2F;&#123;&#123;name&#125;&#125;&#x2F;&#123;&#123;name&#125;&#125;.vue&#39;,            templateFile: &#39;template&#x2F;components.hbs&#39;        &#125;]    &#125;);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建生成的模板,以hbs文件结尾，内部用<code>&#123;&#123;name&#125;&#125;</code>来表示变量</li><li><code>yarn link</code>后可以使用了，运行用<code>yarn plop 名称</code>代替比如说<code>yarn plop component</code></li></ol><h2 id="node自己实现"><a href="#node自己实现" class="headerlink" title="node自己实现"></a>node自己实现</h2><p>node自己实现原理也都是脚手架的原理 </p><ol><li>在项目里面加入cli.js,第一行写成 <code>#!/usr/bin/env node</code>，里面可以写node对文件的操作</li><li>先在package.json里面加入<code>bin: &quot;cli.js&quot;</code>，这样link之后通过名称会自动找到对应的执行文件，</li><li>之后npm link之后就可以使用包名来执行了,</li><li>问答库可以使用<code>inquirer</code>，用法和以上类似</li><li>渲染库使用 <code>ejs</code>,用法是<code>ejs.renderFile(path.join(tmplDir,file), answer, (err,res) =&gt; &#123; fs.writeFileSync(path.join(destDir,file), result) &#125;,</code></li><li>基本上使用的都是node的fs文件模块的命令。</li><li>总结下，通过包名找到执行的node文件，通过命令行输入参数，保存临时变量，通过node把文件写出来</li></ol><h2 id="代码查看，以上的实践代码，点击查看"><a href="#代码查看，以上的实践代码，点击查看" class="headerlink" title="代码查看，以上的实践代码，点击查看"></a>代码查看，以上的实践代码，<a href="https://github.com/swliu920322/lagou-code/tree/main/2.FE-Engine/2.scaffold">点击查看</a></h2>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 拉钩大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105.从前序与中序遍历序列构造二叉树</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><p>给定一棵树的前序遍历 preorder 与中序遍历 inorder。请构造二叉树并返回其根节点</p><p>示例 1:</p><pre class="line-numbers language-none"><code class="language-none">Input: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]Output: [3,9,20,null,null,15,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>前序遍历是，先遍历根节点，再遍历左子树，再遍历右子树</li><li>中序遍历是，先遍历左子树，再遍历根节点，再遍历右子树</li><li>后续遍历是，先遍历左子树，再遍历右子树，再遍历根节点。</li><li>如何记忆，只看某一个节点，前序遍历在遍历左右之前，中序遍历在遍历左右之中，右序遍历在遍历左右之后.</li></ol><ul><li>解题例子 前序[1, 2, 4, 7, 3, 5, 6, 8]<br>中序[4, 7, 2, 1, 5, 3, 8, 6];</li></ul><ol><li>前序第一个肯定是根节点，从中序中找到根节点位置，分成左右2部分.</li><li>对左右部分的前序继续进行处理，</li></ol><h4 id="硬解法，复杂度为O-n2"><a href="#硬解法，复杂度为O-n2" class="headerlink" title="硬解法，复杂度为O(n2)"></a>硬解法，复杂度为O(n2)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;number[]&#125; preorder * @param &#123;number[]&#125; inorder * @return &#123;TreeNode&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> preLeft <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorLeft <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preLeft<span class="token punctuation">,</span> inorLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> preRight <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preRight<span class="token punctuation">,</span> inorRight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存解法-少了循环"><a href="#缓存解法-少了循环" class="headerlink" title="缓存解法,少了循环"></a>缓存解法,少了循环</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  inorder<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> iEnd</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pStart <span class="token operator">></span> pEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rootNode <span class="token operator">=</span> preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> midIndex <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leftNum <span class="token operator">=</span> midIndex <span class="token operator">-</span> iStart<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pStart <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> midIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rooot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> iEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>124.二叉树中的最大路径和</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124.二叉树中的最大路径和"></a>124.二叉树中的最大路径和</h3><p>路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p><p>路径和 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number&#125; */</span><span class="token comment">// 每个二叉树的路径等于它的左子树加右子树加自己的和，如果左右子树小于0，则加0，</span><span class="token comment">// 这里需要计算左子树和右子树和，采用后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">const</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">+</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 向父类提供的最大值，因为向父类提供了，所以只有一个子</span>       <span class="token keyword">return</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 还有种解法，穷举，总之核心是树的后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 所有可能性中去最大</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道-重构</title>
      <link href="2021/07/12/%E8%AF%BB%E4%B9%A6/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E9%87%8D%E6%9E%84/"/>
      <url>2021/07/12/%E8%AF%BB%E4%B9%A6/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="代码整洁之道-重构"><a href="#代码整洁之道-重构" class="headerlink" title="代码整洁之道-重构"></a>代码整洁之道-重构</h2><p>这里本来是一个分享的ppt</p><h3 id="先讲书里的东西"><a href="#先讲书里的东西" class="headerlink" title="先讲书里的东西"></a>先讲书里的东西</h3><ul><li>作者16章描述了他如何找了一断公共代码去重构的，每个人都会有写的不那么完美的时候。<ol><li>重构第一步，保证能运行， 微调。找出相关问题。</li><li>重构第二步，保证他正确，调整结构，拆分，运用到标准，一小部分一小部分进行拆分</li></ol></li><li>作者17章列出了代码的坏味道一览，在16章里也运用到了这些</li><li>本书对重构描述的不够充分，具体只讲了重构的细节。</li></ul><h3 id="重构前言（代码大全2）"><a href="#重构前言（代码大全2）" class="headerlink" title="重构前言（代码大全2）"></a>重构前言（代码大全2）</h3><ul><li>神话： 一个管理很好的项目，严格按照设计-开发-测试-上线的流程，中间没有任何变化，唯一修改代码的只会在维护阶段，只发生在交付之后<ul><li>项目的成功鱼肉在于避免代码的变化</li></ul></li><li>现实：初期开发就有各种变化，<ul><li>典型的项目，在编码调试和单元测试的时间占项目的30-65%</li><li>编码和单元测试一帆风顺，则占的时间不超过20~30%</li><li>即使是管理完善的项目，每个月需求大约会变1/4，导致代码会变化</li><li>导致以代码为中心，不断进行演化。</li></ul></li><li>应该如何对待<ul><li>要认识软件演化是无法避免且具有重要意义的，会有益于开发。</li></ul></li><li>重构的理由太多了<ul><li>代码的问题…</li><li>超前设计问题</li></ul></li><li>重构的分类<ul><li>数据级的重构</li><li>语句级的重构</li><li>子程序级的重构</li><li>类实现的重构</li><li>类接口的重构</li><li>系统级的重构</li></ul></li><li>如何进行安全的重构<ul><li>保留初始代码</li><li>步伐小些</li><li>同时只做一种重构</li><li>要做的事情列出来</li><li>设置一个停车场，将目前重构的进度保留去做别的事</li><li>多用检查点 防止钻进死胡同</li><li>利用编译器的警告信息，解决掉</li><li>重新测试</li><li>增加测试用例</li><li>检查代码的修改</li><li>根据重构风险级别调整重构方法</li></ul></li><li>不宜重构的情况<ul><li>不要把重构当做先写后改的代名词</li><li>避免用重构代替重写</li></ul></li><li>重构策略<ul><li>增加子程序的时候重构</li><li>添加类的时候进行重构</li><li>在修补缺陷的时候进行重构</li><li>关注高度复杂的模块</li><li>维护的时候，顺便改善</li><li>定义清除干净代码和拙劣代码的边界</li></ul></li></ul><h3 id="重构是什么"><a href="#重构是什么" class="headerlink" title="重构是什么"></a>重构是什么</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>(程序员修炼之道)<ul><li>重构像园艺，而不像建筑，是一种有针对性，精准的方法。保持代码易于修改，而不是自由的，大规模的重写。</li></ul></li><li>(重构：改善既有代码的设计)<ul><li>重构是一个过程： <ul><li>在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。</li><li>重构是一种经千锤百炼形成的有条不紊的程序整理方法，可以最大限度地减小整理过程中引入错误的概率。</li><li>本质上说，重构就是在代码写好之后改进它的设计。</li></ul></li><li>重构与性能优化类似<ul><li>但重构是为了让代码更容易理解，更易于修改</li><li>性能优化只关心如何运行的更快，代码可能更难于理解和维护</li><li><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4></li></ul></li></ul></li><li>(重构：改善既有代码的设计)<ul><li>早期的设计在不断的修改中，整体结构慢慢衰弱，代码质量慢慢沉沦。</li></ul></li><li>(程序员修炼之道)<ul><li>优秀设计的精髓 ETC easy to change</li></ul></li></ul><h3 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h3><ul><li>(程序员修炼之道)<ul><li>熵增是一种无序的行为，内部越来月趋于紊乱，当一个物质趋于平衡后，内部熵是最乱的，互相抵消了。</li><li>软件的熵<ul><li>乐观的叫技术债</li><li>不要放任破窗行为，在经济学上也是一样的认识</li><li>要及时解决这个问题。</li></ul></li></ul></li><li>(重构：改善既有代码的设计)<ul><li>重构之后，工作的平衡点变化，设计是在整个开发过程中逐渐浮现的</li><li>可以学会如何不断地改进设计，持续保证良好的设计.</li><li>目的<ul><li>重构改进软件的设计：重要方向就是消除重复代码</li><li>重构使软件更容易理解，帮助其他人更快理解</li><li>重构帮助找到bug，深入理解代码，很容易看到bug（举例）</li><li>重构提高编程速度（对于新功能而言，很多项目越往后越难做）<ul><li>易于修改，</li><li>易于调试</li><li>易于理解</li></ul></li></ul></li></ul></li><li>过去人们总是认为：良好的设计必须在开始编程之前完成，因为一旦开始编写代码，设计就只会逐渐腐败</li><li>先做设计，不断改善</li></ul><h3 id="什么时候重构"><a href="#什么时候重构" class="headerlink" title="什么时候重构"></a>什么时候重构</h3><ul><li>(程序员修炼之道)<ul><li><p>当你学到一些东西，比之前更了解某件事情，就会重构</p></li><li><p>重复 dry</p><ul><li>不限于编码 所有涉及对知识和意图的复制都是DRY，代码和文档，数据库和数据结构…</li><li>多个api相同的处理部分，开发人员的重复</li></ul></li><li><p>非正交设计 </p><ul><li>什么是正交性（解耦）<ul><li>定义 像XY轴一样，一个变化始终不影响另一个的变化</li><li>优点<ul><li>消除不相关事物之间的影响</li><li>提升生产力</li><li>减少风险</li></ul></li><li>设计 <ul><li>像架构图一样，每一层解决每一层的问题，</li><li>开发的时候问自己，如果需求变了，我要改动多少个模块</li></ul></li><li>编码<ul><li>保持代码解耦</li><li>避免全局数据</li><li>避免相似函数</li></ul></li><li>测试<ul><li>更易于测试</li><li>修复问题不用做太多回归测试</li></ul></li></ul></li></ul></li><li><p>过时的知识</p></li><li><p>使用（使用后，功能的重心变了）</p></li><li><p>性能 (迁移代码)</p></li><li><p>测试后，去整理刚刚的代码</p></li></ul></li><li>(重构：改善既有代码的设计)<ul><li><p>编码的每个小时，都要做重构</p><ul><li>见机行事的重构<ul><li>预备性重构，让新功能更容易添加，修bug更容易(加图)</li><li>帮助理解的重构：使代码更易懂。更容易理解业务（擦玻璃，擦干净看得清）</li><li>捡垃圾式重构：解决做的不好的地方，每天清扫，时刻保持。</li></ul></li><li>有计划的重构。</li><li>长期重构，慢慢演进。不专门找人做，每个人慢慢小改动。<ul><li>要替换一个正在使用的库</li><li>将整块代码抽取到一个组件中并共享给另一支团队使用</li><li>再或者要处理一大堆混乱的依赖关系</li></ul></li><li>复审代码时重构<ul><li>帮助代码复审工作得到更具体的结果</li><li>许多建议能够立刻实现</li></ul></li><li>怎么对经理说<ul><li>懂技术，理解设计耐久性假说会鼓励日常的重构，并主动寻找团队日常重构做得不够的征兆</li><li>不具备不理解代码库的健康对生产率的影响，不要告诉经理！<ul><li>对于快速创造软件，重构可带来巨大帮助。</li><li>如果需要添加新功能，而原本设计却又使我无法方便地修改，先重构再添加新功能会更快些。</li><li>要修补错误，就得先理解软件的工作方式，重构是理解软件的最快方式</li></ul></li></ul></li></ul></li><li><p>原则</p><ul><li>肮脏的代码必须重构，但漂亮的代码也需要很多重构</li><li>添加新功能最快的方法往往是先修改现有的代码，使新功能容易被加入。</li><li>重构常常与新添功能紧密交织，不值得花工夫把它们分开。并且这样做也使重构脱离了上下文，使人看不出这些“重构提交”的价值。</li></ul></li><li><p>何时不应该重构</p><ul><li>丑陋的代码被封装了，并且不需要修改，只有我理解了，重构才有价值</li><li>重写比重构还容易</li></ul><h3 id="怎么重构"><a href="#怎么重构" class="headerlink" title="怎么重构"></a>怎么重构</h3></li></ul></li><li>(程序员修炼之道)<ul><li>重构核心是重新设计，是一个慢慢，有意，仔细的活动。<ul><li>不要让新功能和重构同时进行</li><li>重构之前，确保有良好的测试。</li><li>采用简短而慎重的步骤：一点点改。</li></ul></li></ul></li><li>(重构：改善既有代码的设计)<ul><li>两顶帽子(添加新功能和重构)    一次只做一件事</li></ul></li></ul><h3 id="重构的挑战"><a href="#重构的挑战" class="headerlink" title="重构的挑战"></a>重构的挑战</h3><ul><li>(程序员修炼之道)<ul><li>找队友和客户说，这代码可以用，但我需要一周来重构</li><li>时间压力通常是不重构的接口，如果现在不做，以后就要花更多的时间去做</li><li>需要处理更多的依赖关系，到时候会有更多的时间么，将重构看成，切出早期的癌细胞</li><li>尽早重构，经常重构。</li></ul></li><li>(重构：改善既有代码的设计)<ul><li>延缓新功能开发<ul><li>重构会拖慢进度”这种看法仍然很普遍<ul><li>重构的唯一目的就是让我们开发更快，用更少的工作量创造更大的价值。</li><li>如果大规模的重构和小规模的新功能，可以做完后重构</li><li>之所以重构，是因为它能让我们更快——添加功能更快，修复bug更快</li></ul></li></ul></li><li>代码所有权 调用方代码可能由另一支团队拥有</li><li>分支<ul><li>在其他分支开发完在合并主分支</li><li>缺点：<ul><li>在隔离的分支上工作得越久，将完成的工作集成回主线就会越困难</li><li>大多数人的办法是频繁地从主线合并或者变基到分支</li><li>如果有几个人同时在各自的特性分支上工作，因为合并与集成是两回事<ul><li>合并是一个单向的代码移动</li><li>集成是一个双向的过程，如果经常重构，集成的代码会被破坏</li></ul></li></ul></li><li>持续集成，每天至少和主分支集成一次</li></ul></li><li>测试（引入了bug）<ul><li>如果想要重构，我得先有可以自测试的代码，自动化重构的工具包也很好。</li></ul></li><li>遗留代码<ul><li>重构可以很好地帮助我们理解遗留系统</li><li>如果你面对一个庞大而又缺乏测试的遗留系统，很难安全地重构清理它。</li><li>就算有测试，也不建议一鼓作气重构完，随时重构相关的部分</li></ul></li><li>数据库<ul><li>借助数据迁移脚本，将数据库结构的修改与代码相结合，使大规模的、涉及数据库的修改可以比较容易地开展。</li><li>数据库重构最好是分散到多次生产发布来完成，这样即便某次修改在生产数据库上造成了问题</li><li>并行修改（扩展协议）<ul><li>要改名一个字段，我的第一次提交会新添一个字段，但暂时不使用它。</li><li>然后我会修改数据写入的逻辑，使其同时写入新旧两个字段。</li><li>随后我就可以修改读取数据的地方，将它们逐个改为使用新字段。</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 修养 </tag>
            
            <tag> 重构 </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必读的事业规划书</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员必读的事业规划书"><a href="#程序员必读的事业规划书" class="headerlink" title="程序员必读的事业规划书"></a>程序员必读的事业规划书</h1><h2 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h2><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>你的价值不在于你的技术，而在于你为公司提供的价值，即使用价值，提升解决问题能力</p><h3 id="供需"><a href="#供需" class="headerlink" title="供需"></a>供需</h3><p>信息不对称影响价值，短时间争取大量机会</p><h3 id="跳槽"><a href="#跳槽" class="headerlink" title="跳槽"></a>跳槽</h3><p>不只是价值，看未来发展和感受， 之前要考虑得失， 永远不要因为现在很差而跳槽，要用未来更好，保证一直往上走</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>应届生-小组长-主管-部门经理-总监-CTO，提升能力，如果长时间得不到成长再选择跳槽。脑子里要有清晰的模板</p><h2 id="2-准备篇"><a href="#2-准备篇" class="headerlink" title="2. 准备篇"></a>2. 准备篇</h2><h3 id="自我认识和自我实现"><a href="#自我认识和自我实现" class="headerlink" title="自我认识和自我实现"></a>自我认识和自我实现</h3><ol><li>找不到目标的话，定1年期目标，  </li><li>多挣钱</li></ol><h3 id="四大象限"><a href="#四大象限" class="headerlink" title="四大象限"></a>四大象限</h3><ul><li>E象限 雇员  低风险低收益，天花板明显。</li><li>S象限 自己  做标准化产品 免费+收费定制，做细分、专业的工具。</li><li>B象限 创业 规模化为前提 投资，上市 出售，不喜欢伺候一群爷（用户），别做CEO。<br>A轮融资之前寻找商业模式，变更频繁，敏捷开发，A之后着力规模化，高并发高可用，处理团队和资源。</li><li>I象限 投资</li></ul><h3 id="分析招聘需求"><a href="#分析招聘需求" class="headerlink" title="分析招聘需求"></a>分析招聘需求</h3><ul><li>简历模板 <a href="https://github.com/geekcompany/ResumeSample/blob/master/web.md">https://github.com/geekcompany/ResumeSample/blob/master/web.md</a></li><li>调整自己定位 1.学会观察技术趋势 坚持在发展方向上   2.投资新兴市场和细分市场  每个企业都有可取之处，</li></ul><h3 id="职业画布"><a href="#职业画布" class="headerlink" title="职业画布"></a>职业画布</h3><h3 id="个人品牌-高价值输出"><a href="#个人品牌-高价值输出" class="headerlink" title="个人品牌 高价值输出"></a>个人品牌 高价值输出</h3><ul><li>github博客</li><li>微博加V， 大小问题在这里处理</li><li>技术社区账号StackOverFlow  大量内容的文章在这里发表</li></ul><h3 id="沟通和写作"><a href="#沟通和写作" class="headerlink" title="沟通和写作"></a>沟通和写作</h3><p>金字塔原则 </p><ul><li>条理 </li><li>逻辑</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>充分交流</p><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>可以做技术尝试.  从小做起， 真实的需求  持续更新的毅力</p><h3 id="架构能力"><a href="#架构能力" class="headerlink" title="架构能力"></a>架构能力</h3><ul><li>dry  </li><li>尽量自动化 </li><li>正交性（隔离）</li></ul><h2 id="3-操作篇"><a href="#3-操作篇" class="headerlink" title="3. 操作篇"></a>3. 操作篇</h2><h3 id="简历的本质-约面试"><a href="#简历的本质-约面试" class="headerlink" title="简历的本质 约面试"></a>简历的本质 约面试</h3><h4 id="FAB原则"><a href="#FAB原则" class="headerlink" title="FAB原则"></a>FAB原则</h4><ul><li>是什么</li><li>比别人好在哪点</li><li>如果雇佣我，得到的价值是什么</li><li>原则是数字化,没有成绩 讲成长<h3 id="书写工具"><a href="#书写工具" class="headerlink" title="书写工具"></a>书写工具</h3>markDown,尽量提供pdf的，文件名，xxx简历.WEB开发工程师.pdf</li></ul><h3 id="内推-猎头-网站投"><a href="#内推-猎头-网站投" class="headerlink" title="内推 猎头 网站投"></a>内推 猎头 网站投</h3><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><ol><li>遍历简历知识点</li><li>技能树</li><li>多用咱</li><li>离职原因，要以未来更好</li><li>遇到的最大挑战， 可以讲一个最近发生的</li><li>你希望三年后成为什么样的人  考察职业规划</li><li>有什么要问我们的，带兴趣指标的问题，技术或者产品</li></ol><p><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E8%B1%A1%E9%99%90.png"><br><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E7%94%BB%E5%B8%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视力从0.1到1，不开刀不吃药</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="视力从0-1到1，不开刀不吃药"><a href="#视力从0-1到1，不开刀不吃药" class="headerlink" title="视力从0.1到1，不开刀不吃药"></a>视力从0.1到1，不开刀不吃药</h1><p>本书的根据是人体自身是一个可自我调节修复的系统，参考人体使用指南。我主要关注了如何恢复，原因就不说了</p><h2 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h2><ol><li>有氧运动，书上说时弹跳500次或深蹲100，排除内脏脂肪</li><li>眼保健操，书上说按摩眼睛和头，来回敲打手臂上半部分和小腿两侧</li><li>揉搓耳朵，很多眼睛的穴位</li><li>腹式呼吸，多吸入氧气，提高氧气的摄取。</li><li>远眺，保持放松</li><li>均衡饮食，早睡，拒烟酒</li><li>在看清的基础上，后退，努力继续看清，相信自己可以看清</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 养生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见未知的自己</title>
      <link href="2021/05/08/%E5%BF%83%E7%90%86/%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>2021/05/08/%E5%BF%83%E7%90%86/%E9%81%87%E8%A7%81%E6%9C%AA%E7%9F%A5%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="遇见位置的自己"><a href="#遇见位置的自己" class="headerlink" title="遇见位置的自己"></a>遇见位置的自己</h2><h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><ul><li><p>最近陷入了迷茫，公司的方向不是技术，而是业务，前些年一直钻研如何写好代码，忽略了继续上升的机会，<br>现在想来，我那么追求代码优雅简洁，在公司里，大家一点都不关心这个，觉得好的设计意义不大，重要的是能快速交付。  </p></li><li><p>在这么一个阶段，我觉得没有什么拼劲了，似乎我一直坚持的东西土崩瓦解。我开始需求心理上的疏导和对世界的认知提升。<br>而这本书给我带来了很多思考。</p></li><li><p>本书以一个年轻姑娘在职场和情感</p><h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3></li><li><p><strong>回答我是谁</strong> </p><ul><li>人们觉得不顺利的原因就是不清楚自己是谁，盲目去攀附、追求不能代表我们的东西，失落了真实的自己。</li><li>人们太在意外在，而忽略了内在，我是永远不会变的真我，是不会随着时间、死亡改变的。</li><li>真我简洁概括就是”爱，喜悦，和平”<ul><li><strong>爱</strong> 无条件的爱别人，不求回报，真心付出</li><li><strong>喜悦</strong> 由内向外的自发喜悦，不受外界干扰，</li><li><strong>和平</strong> 内心的和平，内心的笃定，不以物喜不以己悲。</li></ul></li></ul></li><li><p><strong>真我在哪里</strong><br><img src="/images/%E5%BF%83%E7%90%86/self.jpg"></p><ul><li><strong>没有真我的表现</strong><ul><li>任何能丢弃自己不实的身份认同，而且不被自己的思想、情绪以及身体所限制和阻碍的人，都能展现出真我的特质</li><li>我们的身体、情绪、思想和角色扮演、身份认同这些能量，把我们生命能量的源头团团围住，也隔绝了爱、喜悦与和平</li><li>我们因为与自己生命的源头没有联结，失去了能量的来源，所以不停地向外求取，以获得能量。更糟糕的是，和我们的同胞——其他的人，争夺能量.</li><li>现代社会像个杀戮战场，每个人都在用不同的方式去夺取别人的能量，像控制他人、用权力驾凌于他人之上，获得别人的关注、认可、喜爱，或是证明自己是对的、好的、高人一等的，不一而足</li></ul></li></ul></li><li><p><strong>如何展现真我</strong></p><ul><li><strong>身体</strong><ul><li>和身体做联结，<ul><li>比如 健走 冥想 瑜伽 跳舞…</li><li>将注意力集中到身体上，感受身体的状态</li></ul></li><li>饮食健康 <ul><li>40%谷类 40%水果 20%蛋白质</li><li>早上多吃 晚上少吃，早吃。餐间时间不易超过4小时，过长吃点点心。</li><li>轻食，少食多餐，7-8分饱</li><li>少油，水煮或者蒸</li><li>细嚼慢咽，不喝烫水和冰水</li></ul></li></ul></li><li><strong>情绪</strong> 情绪是一种生命能量，会来也会走，处理不好，会永远在体内。<ul><li>能量<ul><li>情绪是有能量的，好的能量能响应好的结果，物以类聚。所以我们要用积极的能量。</li><li>表现出不好的能量，往往想争夺别人的能量。</li></ul></li><li>胜肽<ul><li>不断做某件事，神经细胞会被联结，形成情绪模式</li><li>感觉会对情绪有特定的胃口，产生饥饿感，细胞会让你产生生理需求有情绪。</li></ul></li><li>意识<ul><li>我们的表意识，自以为能掌控我们的生活，做出自由的选择。</li><li>我们是一个自动化制约模式下的机器，很多时候身不由己</li><li>世上有三种事，老头的事，我的事，别人的事，我们只要管好自己的事，不抱怨别的事情。</li></ul></li><li>如何应对坏情绪<ul><li>写下一段话 我看我我在寻求被虐待（具体的遭遇）的痛苦感受，我全心地接纳这种感受，并且放下对它的需要。</li><li>越排斥就更强，说给潜意识听的，出来的时候问自己，我可不可以欢迎他，我可不可以允许它存在，让内在升起一股力量</li><li>每个人来到世界上都有不同的功课要学，周围的人是来帮助我的，给我做功课。 </li><li>对别人的情绪要充分理解，允许他发泄情绪</li><li>情绪就是一种能量啦，会来也会走，大人不要干涉，要让孩子自己学会怎么去处理自己的情绪，我们要做的，就是给孩子无限的爱和支持，让我们学会和自己的负面情绪共处。</li><li>如果你用转移的方法来教孩子避开负面情绪的话，孩子长大以后就学会用替代品来逃避情绪，什么抽烟啦，吸毒啦，还有那些工作狂啦，很可怕呢！如果你去压抑孩子的情绪的话，那就更不好了呀</li></ul></li><li>如何疗愈坏情绪<ul><li>受苦分两种 一种是无知的，无明的受苦，任随潜意识操控，同时抱怨，抗拒那份痛苦。这种不能让人成长</li><li>另一种是有觉知的受苦，虽然痛苦，但不逃避，不抱怨，全然去经历，让能量爆发出来，不批判，不抗拒，在全然的爱和接纳中去经历，才能走出人生模式，茁壮成长</li><li>不要批判、不要抗拒，就是去接纳这个愤怒！让这种能量自然地流露出来，不要压抑</li><li>压抑多年的情绪，就像是黑暗的能量。唯有带着爱的觉知之光，才能消融它们</li><li>臣服的第一步，就是要先看到自己的抗拒，而且看到自己的抗拒是徒劳无功、无济于事的</li><li>所有发生在我们身上的事件都是一个个经过仔细包装的礼物。只要我们愿意面对它有时候有点儿丑恶的包装，带着耐心和勇气一点儿一点儿地拆开包装的话，我们会惊喜地看到里面深藏的礼物</li><li>我们的头脑真的很会欺骗我们，它会看到它想要看到的东西，收到它想要收到的信息，无关乎外在的条件、事实是什么</li></ul></li></ul></li><li><strong>思想</strong><ul><li>先天<ul><li>我们生下来就会有性格倾向，外向，内向，乐观等，后天环境会帮助我们定好游戏规则，创造了我们的价值观和信念。</li><li>性格倾向<em>外在环境</em>各种教育<em>生活事件</em>前世业力 = 人生模式</li><li>从小到大会被灌输我们应该做什么的特质，做不到就会受到否定和压抑，压抑到潜意识，时不时出现造成困扰</li><li>我们也会用各种策略去逃避，用拼命工作来躲避面对自己，只有自己面对自己，才能将光带进内心</li><li>除了约束自己，我们还会投射出去，如果我认为我聪明，我压抑我不聪明的地方，对于不聪明的人，我会特别讨厌，对他们没有耐心。也是一种逃避策略</li></ul></li><li>潜意识<ul><li>控制了我们的思想、感觉、行为、以及对人和事的反应，还有做决定的过程。</li><li>主宰了我们的外在世界。我们的思想行为都是从它而来，</li><li>我们对它了解甚少，只占了1%，他有非常大的力量，对自我有很大的影响。</li><li>梦是通往潜意识的桥梁，从梦中寻找自己的潜意识。</li><li>如果静下来思想太混乱，就将注意力放在当下，感受当下，因为思想总是在过去或将来。</li></ul></li><li>转念<ul><li>人在指责别人的时候，一个手指指着比人，还有三个手指指向自己。</li><li>可以将责怪句改为否定，看看意思对不对，再将自己代入进去，说自己对不对。</li><li>A（事件）→B（信念、想法）→C（结果）很多都是自己内心的投射，要下定决心，不被思想干扰，持续的静坐冥想</li></ul></li></ul></li><li><strong>身份认同</strong><ul><li>臣服<ul><li>第一次臣服是对事实，第二次臣服是对情绪，不去抗拒，通过做自己喜欢的事情，让自己喜悦，将光带进内心。</li><li>我们和真我的距离愈来愈远的时候，会失去自我感，因此我们必须要抓取一些东西来汲取我们的自我感，小我于焉产生。它不停地向外抓取，只为了加强它自己的真实性，好继续苟延残喘地存活下来</li></ul></li><li>探索<ul><li>要觉察小我，要从更高、更远的角度来衡量我要什么，及时抵制小我</li><li>放下身份认同，先看见自己认同的东西，这东西其实不是你，也不属于你的，才能醒来</li></ul></li><li>战胜胜肽<ul><li>心想事成的第一个定律就是，你所向往的东西必须是命中注定该是你的，或是与你的更高目的是一致的、有利于人类社会的。</li><li>要不然就是你能深入到潜意识和真我的层面，破除人生的模式，学好自己该的功课，破解你的命运，否则心想事成只是纸上谈兵罢了</li><li>真心想要 “那就是不仅仅在思想层面而已，你必须打心眼儿里渴望这个东西，每次想的时候，都会到了浑然忘我的境界</li><li>而且最有威力的是，让自己随时随地都处在你已经得到了你想要的东西之后的感受。而且视觉的观想是最重要的，你可以每天都在脑海里面演练你已经拥有你要的东西的画面，细节愈清楚愈好</li><li>这样去观想并且去经历那种感受，让你的每个细胞都充满信心地在召唤它想要的东西”</li><li>外在的努力还是很重要的。虽然这是一个内在的旅程和工作，但是我们不能整日在家做白日梦、游手好闲，期待事情会从天上降临。老天爷还是很公平的，你的努力不一定有收获，但是你想要有收获，就非得付出努力不可</li><li>很重要的就是，你想要的东西愈真实、清楚，愈好。你要把自己想要的东西定义清楚，这样宇宙才能知道你究竟想要什么</li><li>要言行一致，不要说的、想的是一回事，做出来又是另一回事</li></ul></li><li>觉察<ul><li>不需要身份认同或者别人赞美让内心的小我得到满足</li><li>时刻审查自己，审查外界对内心的刺激。</li></ul></li><li>感恩<ul><li>观想你已经得到你想要的东西的最佳时刻是在早晨将醒未醒之际、晚上将睡未睡之时，因为那个时候你与你的潜意识最接近</li><li>只要改变自己，改变自己的心境，所有的外境，包括人、事、物都会境由心转地随之改变。”</li><li>分享就跟感恩一样，分享出去的越多，你回收的就越多</li><li>亲爱的，外面没有别人，只有你自己</li></ul></li></ul></li></ul></li></ul><h3 id="结尾-无"><a href="#结尾-无" class="headerlink" title="结尾-无"></a>结尾-无</h3><ul><li>所有的人、事、物都是你内在的投射，就像镜子一样地反映你的内在。当外境有任何东西触动你的时候，记得，要往内看。看看自己哪个地方的旧伤又被碰触了，看看自己有哪些阴影还没有整理好。不要浪费能量在那些外在的、不可改变、不可抗拒的东西上。先在内在层面做一个调和整理，然后再集中精力去应付外在可以改更的部分。<br>记得，每个发生在你身上的事件都是一个礼物，只是有的礼物包装得很难看，让我们心怀怨怼或是心存恐惧。</li><li>爱、喜悦、和平，都是真我的副产品，不是真我本身。它们是当你回归真我之后的自然状态</li><li>我们大多数人每天都是为了有意义的事物在繁忙，如果在每日的生活中，穿插一个‘无意义’的机制，就能启动他们回归到空的能力，这也是我在前面所说的，要能够‘走出观念’，必须要有看‘空’、用‘空’的机制，而这个机制可以经由‘无意义’来启动</li><li>我们每一个完整的人，就应该是一个同时兼具‘有’和‘无’的太极图。而经过质变之后，就能够回归到我们原始身份的空无——无极，那个时候就是真正大解脱、大自在的时刻了</li></ul><h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><ul><li>我的认同感是获取外界肯定才能满足的，我的潜意识需要认同感，我的真我要我能够自己产生价值，达到内心的喜悦</li><li>我不需要操心别人的事，做好自己的功课，做好自己的规划，认真的放下身份认同</li><li>积极的看待事务，外面的世界是我思想的投射，觉察和定静观察自己的思想，检查错误的思想，臣服事实。</li><li>了解我的情绪，臣服于它，自我消化情绪</li><li>让我的身体健康，好好饮食，和身体建立联结。</li><li>继续学习，帮助自我达到真我</li></ul>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理 </tag>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭架自己的微前端-实现方式</title>
      <link href="2021/05/08/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>2021/05/08/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 微前端 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭架自己的微前端</title>
      <link href="2021/05/08/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>2021/05/08/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="搭架自己的微前端"><a href="#搭架自己的微前端" class="headerlink" title="搭架自己的微前端"></a>搭架自己的微前端</h2><h3 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h3><h4 id="solid"><a href="#solid" class="headerlink" title="solid"></a>solid</h4><h4 id="额外设计原则"><a href="#额外设计原则" class="headerlink" title="额外设计原则"></a>额外设计原则</h4><ul><li><p>组合/聚合复用原则</p><ul><li>组合优于继承</li><li>23种设计模式</li></ul></li><li><p>无环依赖</p><ul><li>A-&gt;B-&gt;C-&gt;A 中介者模式</li></ul></li><li><p>共同封装</p><ul><li>将变化隔离 开放-封闭的拓展</li></ul></li><li><p>共同重用</p></li><li><p>好莱坞原则</p><ul><li>控制反转（依赖注入）npm包的思想</li></ul></li><li><p>dry原则（不重复）</p><ul><li>利用以上的设计原则去做封装</li></ul></li><li><p>保持简单和傻瓜</p><ul><li>保持页面简洁 功能实用 操作方便</li></ul></li><li><p>高内聚低耦合</p></li><li><p>关注点分离</p></li><li><p>你不需要它</p><ul><li>架构前期不要过度设计</li><li>要足够简单，不失拓展性</li></ul><h3 id="软件设计分层"><a href="#软件设计分层" class="headerlink" title="软件设计分层"></a>软件设计分层</h3><h4 id="系统级架构"><a href="#系统级架构" class="headerlink" title="系统级架构"></a>系统级架构</h4></li><li><p><strong>定义</strong> 应用在这个系统中，如何与后端通信，如何和第三方集成</p></li><li><p><strong>处理</strong></p><ul><li>设计前端<ul><li>首要：了解前端系统与其他系统之间的关系</li><li>包括业务关系和协作机制</li></ul></li><li>设计后端<ul><li>规定与后端数据通信的机制</li><li>包括api设计，token设计，数据传递设计cookie</li></ul></li><li>分离设计<ul><li>如何实施技术决策，用户鉴权，APi接口管理，Api文档管理，Mock使用，BFF，是否需要服务端渲染</li></ul></li></ul></li><li><p><strong>微前端</strong></p><ul><li><p><strong>定义</strong></p><ul><li>在一个系统内微前端是应用间的架构方案</li><li>在多个应用间，微前端是一种系统间等架构方案，</li><li>微前端是将多个前端应用以某种形式结合在一起进行应用。</li></ul></li><li><p><strong>解决</strong></p><ul><li>单体应用在长时间跨度，变成了一个巨石应用后难以维护。</li></ul></li><li><p><strong>实现形式</strong></p><ul><li>单实例，</li><li>多实例 同一时刻可以展示多个子应用<ul><li>通常使用web components方案做子应用封装，子应用更像业务组件而不是应用</li></ul></li></ul><h4 id="应用级架构"><a href="#应用级架构" class="headerlink" title="应用级架构"></a>应用级架构</h4></li></ul></li><li><p><strong>定义</strong> 系统级架构的细化</p><ul><li>单个应用与其他外部应用的关系，微服务架构下多个应用的协作，数据交换</li></ul></li><li><p><strong>应用</strong></p><ul><li>脚手架 应用生成</li><li>模式库 ui库 函数库</li><li>设计系统 内部实现的功能，与外部的信息交互<h4 id="模块级架构"><a href="#模块级架构" class="headerlink" title="模块级架构"></a>模块级架构</h4></li></ul></li><li><p><strong>定义</strong> 业务编码前的设计 类似迭代</p><h4 id="代码级架构"><a href="#代码级架构" class="headerlink" title="代码级架构"></a>代码级架构</h4></li><li><p><strong>定义</strong> 规范与原则</p><ul><li>开发流程</li><li>代码质量与改善</li><li>规范而非默契<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li><li>开发中，要注意可维护性</li><li>简单的代码可维护性高，越抽象越难维护。</li></ul></li></ul><h3 id="如何保证架构的质量-稳定性和健壮性"><a href="#如何保证架构的质量-稳定性和健壮性" class="headerlink" title="如何保证架构的质量-稳定性和健壮性"></a>如何保证架构的质量-稳定性和健壮性</h3><ul><li><p>系统的稳定性</p><ul><li>系统处于平衡状态，收到外部影响后，能够回到原来的平衡状态</li><li>意义<ul><li>架构设计的基石</li><li>可以更好实现自我修复</li></ul></li></ul></li><li><p>系统的健壮性</p><ul><li>计算机软件在输入错误，磁盘故障，网络过载或攻击下，不崩溃</li><li>容错能力强，运行不易被干扰，安全性好</li><li>衡量<ul><li>从错误的输入推断出正确合理的输入</li><li>可以正确运行在不同环境下</li><li>检测内部的设计或者编码错误，并且得到正确结果</li></ul></li></ul></li><li><p>含义</p><ul><li>对特定软件的自身要求</li><li>稳定性和健壮性是软件处理的一部分内容</li><li>稳定性和健壮性是软件规划时确定的目标</li></ul><h4 id="衡量架构质量"><a href="#衡量架构质量" class="headerlink" title="衡量架构质量"></a>衡量架构质量</h4></li><li><p>拓展性</p></li><li><p>维护性</p></li><li><p>可管理</p></li><li><p>高可用（故障修复，容灾，降级，熔断）</p></li></ul><h4 id="如何保证架构质量"><a href="#如何保证架构质量" class="headerlink" title="如何保证架构质量"></a>如何保证架构质量</h4><ul><li>理解难度，更好理解</li><li>接入依赖的成本，易于接入</li><li>奔溃率和错误率的指标 低</li><li>开发效率 提高开发效率</li><li>错误上报和信息收集功能 </li></ul><h4 id="架构前期准备（正确的选择是良好的开端）"><a href="#架构前期准备（正确的选择是良好的开端）" class="headerlink" title="架构前期准备（正确的选择是良好的开端）"></a>架构前期准备（正确的选择是良好的开端）</h4><ul><li>架构师分类<ul><li>系统架构师 偏向技术<ul><li>从系统维度，负责整理系统的架构设计</li><li>主要是基础服务和各系统间协调，着眼全局</li><li>比如关注负载，可靠性，伸缩，扩展，整体项目切分，缓存应用方面的基础架构设计</li></ul></li><li>应用架构师 业务技术并存<ul><li>从应用程序的维度，负责某个应用的技术架构，偏向业务</li><li>关注理解业务，梳理模型，设计模式，接口，数据交互等</li><li>了解业务系统的流转</li></ul></li><li>业务架构师 脱离开发<ul><li>从业务流程维度，关注某行业，业务的领域，获得领域模型，最终获得系统模型</li><li>页脚业务领域专家，行业专家，产品咨询师，资深顾问</li></ul></li></ul></li><li>技术前期准备<ul><li>技术选型：社区氛围，发展规模，未来发展趋势，与团队契合度，执行成本，维护和迁移成本，执行效率调研和报告</li><li>充分调研每一项技术可能的利和弊</li><li>最大程度预测架构设计中的缺陷，防止问题发生</li></ul></li><li>技术优化<ul><li>发展过程中，可能存在有些有悖于当前架构的设计，早餐架构发展阻塞，所以需要进行架构优化，提高适应性</li></ul></li><li>架构优化<ul><li>不是一蹴而就的，在业务发函中，架构也在不断演进</li><li>对架构设计进行实时调休，使架构优化成为常态</li><li>通过不断调整，改进不足，补足短板<h4 id="技术债务填补和崩溃预防"><a href="#技术债务填补和崩溃预防" class="headerlink" title="技术债务填补和崩溃预防"></a>技术债务填补和崩溃预防</h4></li><li>原因<ul><li>开发过程中，因为时间紧迫导致实现不合理<ul><li>算法优化，</li></ul></li><li>暂时没有想好更好的实现方式而妥协<ul><li>if else</li></ul></li><li>架构设计前期没有考虑到的细节<ul><li>参数传递 -&gt; 状态管理</li></ul></li><li>不合理的交互设计，导致技术实现复杂</li><li>旧功能文档缺失，无正确拓展，修改和兼容旧功能，导致上线后问题剧增。 </li></ul></li><li>后果<ul><li>修复变重构 小的技术债务不偿还，最后会演变为大规模的重构</li><li>影响开发速度 极大影响上线速度，迭代慢，失去核心竞争力</li><li>陷入维护开发的恶性循环</li></ul></li><li>技术填补<ul><li>思想<ul><li>优秀的架构设计</li><li>有效处理当前需求可预计的情况，</li></ul></li><li>解决方案<ul><li>根据当前业务，进行项目拆分，尽可能代码解耦合<ul><li>必须要日志系统，操作日志，错误日志，业务日志</li></ul></li><li>良好的技术培训，和传帮带能力<ul><li>让每一个开发者可以从更深一层次理解自己实现的功能</li><li>从最开始的代码规范，到熟悉业务，最后在编写文档 </li></ul></li><li>充分的技术方案<ul><li>充分理解需求，产生的最理想的实现方案</li></ul></li><li>不同工程师之间相互review代码<ul><li>codeReview也是对自身的一个提高</li></ul></li><li>提升对修复技术债务重要性的认知<ul><li>遇见一个债务导致的问题，才能花时间去解决</li></ul></li><li>善于发现和定期处理一些技术债务<ul><li>用于发现系统中的技术债务，让自己对系统负责</li></ul></li></ul></li><li>总结<ul><li>上线后，时间不紧，找时间处理技术债务，一遍建立感情和品位原来的代码</li></ul></li></ul></li></ul></li></ul><h4 id="预防架构崩溃"><a href="#预防架构崩溃" class="headerlink" title="预防架构崩溃"></a>预防架构崩溃</h4><ul><li>系统崩溃的产生<ul><li>日志记录。操作日志，错误日志，业务日志</li></ul></li><li>预防崩溃<ul><li>用户行为抓取–争取最新时间获取用户操作链条</li><li>解决存量问题-技术债务</li><li>遏制新增，减少新增问题的概率</li><li>对脏数据进行兜底和检验</li><li>单元测试</li><li>崩溃报警</li><li>自动化测试，整体流程自动化测试</li><li>更广的灰度触达</li><li>性能优化体系</li></ul></li></ul><h4 id="系统重构"><a href="#系统重构" class="headerlink" title="系统重构"></a>系统重构</h4><ul><li>起因<ul><li>架构不是永恒不变的，也是有生命周期的。</li></ul></li><li>重构概念<ul><li>对软件内部结构的一种调整</li><li>在不改变当前软件的可观察行为的前提下，提高其可理解性，降低修改成本。</li></ul></li><li>实现方式<ul><li>使用一系列重构手法，调整其结构</li><li>理念<ul><li>运用大量微小的保持软件行为的步骤，一步步达成大规模的修改。</li></ul></li></ul></li><li>早期系统优势<ul><li>开发速度快</li><li>代码复杂度低</li><li>代码规范保持完好</li><li>严格注重开发规范，不会允许危及架构设计的代码产生</li><li>早期功能简单，拓展起来难度低，成本低</li></ul></li><li>后期系统<ul><li>具备所有早期其他的劣势</li><li>代码复杂度高</li><li>代码规范不完善</li><li>很多需求和功能出现逾越架构设计的情况</li><li>添加新功能兼顾较多，涉及较多模块</li></ul></li><li>流程<ul><li>确定问题点，确定重构功能和范围</li><li>旧架构设计和逻辑梳理</li></ul></li></ul><h3 id="实现方式对比"><a href="#实现方式对比" class="headerlink" title="实现方式对比"></a>实现方式对比</h3><ol><li>iframe</li></ol><ul><li>优势<ul><li>技术成熟</li><li>支持页面嵌入</li><li>天然支持运行沙箱隔离，独立运行</li></ul></li><li>劣势<ul><li>页面之间可以是不同域名 鉴权</li><li>设计一套通讯机制，如何监听，传参</li><li>应用加载，渲染，缓存的实现，都在浏览器中难以控制</li></ul></li></ul><ol start="2"><li>web component</li></ol><ul><li>优势<ul><li>支持自定义元素，</li><li>支持shadow dom，可通过关联进行控制</li><li>支持模板template和插槽slot，引入自定义组件</li></ul></li><li>劣势<ul><li>接入微前端需要重写当前项目</li><li>生态系统不完善，技术过新容易出现兼容性</li><li>架构设计复杂，组件间拆分过细，通讯控制繁琐</li></ul></li></ul><ol start="3"><li>自研框架</li></ol><ul><li>优势<ul><li>高度定制化，满足兼容的一切场景</li><li>独立通信机制和沙箱运行环境，可解决应用之间相互影响的问题</li><li>支持不同技术栈的子应用，可无缝实现页面无刷新渲染。</li></ul></li><li>劣势<ul><li>技术实现难度较高</li><li>需要设计一套定制的通信机制</li><li>首次加载会出现资源过大的情况</li></ul></li><li>实现<ul><li>路由分发式</li><li>主应用控制路由匹配和子应用加载，共享依赖加载</li><li>子应用做功能，接入主应用实现主子应用控制和联动</li></ul></li></ul><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul><li>主应用  vue3</li><li>子应用<ul><li>vue2</li><li>vue3</li><li>react16</li><li>solid.js</li></ul></li><li>后端服务和发布应用<ul><li>koa实现</li></ul></li><li>发布应用<ul><li>express</li></ul></li><li>微前端core js node</li></ul><h3 id="绘制项目架构图"><a href="#绘制项目架构图" class="headerlink" title="绘制项目架构图"></a>绘制项目架构图</h3><ul><li><p>分析需求</p><ul><li>主子应用功能</li></ul></li><li><p>主应用</p><ul><li>注册子应用</li><li>加载、渲染子应用</li><li>路由匹配（activeWhen， rules - 由框架判断）</li><li>获取数据（公共依赖，通过数据做鉴权处理）</li><li>通信（父子通信，子父通信）</li></ul></li><li><p>子应用</p><ul><li>渲染</li><li>监听通信（主应用传递的数据，做更新）</li></ul></li><li><p>微前端框架</p><ul><li>子应用的注册</li><li>有开始内容（应用加载完成）</li><li>路由更新判断</li><li>匹配对应的子应用</li><li>加载子应用内容</li><li>完成所欲依赖项的执行</li><li>将子应用渲染在固定容器内</li><li>公共事件的管理</li><li>异常的捕获和报错</li><li>全局状态管理</li><li>沙箱隔离</li><li>通信机制</li></ul></li><li><p>服务端功能</p><ul><li>提供数据服务</li></ul></li><li><p>发布平台</p><ul><li>主子应用的打包和发布</li></ul></li></ul><h4 id="微前端架构图"><a href="#微前端架构图" class="headerlink" title="微前端架构图"></a>微前端架构图</h4><p><img src="/images/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p>]]></content>
      
      
      <categories>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 微前端 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包在vue3的使用</title>
      <link href="2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包在vue3的使用"><a href="#闭包在vue3的使用" class="headerlink" title="闭包在vue3的使用"></a><a href="/images/%E5%88%98%E5%9C%A3%E4%BC%9F%E7%AE%80%E5%8E%86.docx">闭包在vue3的使用</a></h1><ul><li>早期做项目，基于简单这一个出发点，所谓的封装也只是一些执行顺序的问题。<br>对闭包用的也少。</li><li>最近看了一个开源vue3后台的处理方式，可能这就是闭包该有的写法吧。<br>本质是闭包内部维持状态，暴露闭包set函数的集合和内部状态的set，通过vue的emit传回到组件本身。<br>把属性合并作为v-bind的对象体，使用者只关心函数调用即可。</li><li>封装本身用来控制抽象的内容，分可预测和难预测的部分，通常解决掉是重复的可预测内容。<br>之前简单的封装一部分是对于模板的，wrapper函数，一部分是逻辑的logic函数，之前是做了2份的，本身还得配合使用。<br>现在wrapper函数和模板通过内部闭包状态合并了，对于使用者来说是一个很舒服的状态。</li></ul><h2 id="vue3配合闭包目前的封装思想"><a href="#vue3配合闭包目前的封装思想" class="headerlink" title="vue3配合闭包目前的封装思想"></a>vue3配合闭包目前的封装思想</h2><h3 id="真实组件使用"><a href="#真实组件使用" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">const</span> app <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;BasicTable @register="register" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      register<span class="token punctuation">,</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装"><a href="#组件内部封装" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initialProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> loadingRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token comment">// 监听props之后的变化，更新状态</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      getLoadingRef<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>loadingRef<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> Table <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ATable ref="tableRef" v-bind="getBindValue" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> innerPropsRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 始终获取最新的props</span>    <span class="token keyword">const</span> getProps <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoadingRef<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">setInnerPropRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      innerPropsRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 使用最新的状态</span>    <span class="token keyword">const</span> getBindValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>attrs<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token function">unref</span><span class="token punctuation">(</span>getLoadingRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tableAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> setLoading<span class="token punctuation">,</span> setInnerPropRef <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 把闭包函数集合emit为事件参数</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">,</span> tableAction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> tableRef<span class="token punctuation">,</span> getBindValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部"><a href="#useTable内部" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    actions<span class="token punctuation">.</span><span class="token function">setInnerPropRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> otherMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> otherMethods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js通过闭包简单实现"><a href="#js通过闭包简单实现" class="headerlink" title="js通过闭包简单实现"></a>js通过闭包简单实现</h2><h3 id="真实组件使用-1"><a href="#真实组件使用-1" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件类本身会自动实例化，我这边是手动</span>  <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">register</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自己逻辑处理位置</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装-1"><a href="#组件内部封装-1" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假设的loading响应式函数</span>  <span class="token keyword">let</span> loading <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> loading<span class="token punctuation">,</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loading <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 一个假设的状态响应式函数 同上</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> state <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>state <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 真实table组件内部状态</span><span class="token keyword">function</span> <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoading<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    setState<span class="token punctuation">,</span>    setLoading<span class="token punctuation">,</span>    getComputedLoading<span class="token punctuation">,</span>    getComputedState<span class="token punctuation">,</span>    <span class="token function">setProps</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setState</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// emit的东西暂时存起来</span>  actions <span class="token operator">=</span> setMethods<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    getMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span> getComputedLoading<span class="token punctuation">,</span> getComputedState <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    setMethods<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部-1"><a href="#useTable内部-1" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 解析业务逻辑的核心</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>    actions<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash.concat</title>
      <link href="2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/"/>
      <url>2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 自己实现</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
            <tag> lodash_array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心</title>
      <link href="2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/"/>
      <url>2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="心-稻盛和夫一生嘱托"><a href="#心-稻盛和夫一生嘱托" class="headerlink" title="心 - 稻盛和夫一生嘱托"></a>心 - 稻盛和夫一生嘱托</h1><ol><li>提到稻盛和夫，大家都知道他是一个很厉害的企业家，<br>现在也有自己的心学系统和企业管理法阿米巴。<br>读完这本书。</li><li>他是一个伟人，一个谦虚的伟人。<br>谦虚到什么程度呢，虽然做好了很多企业，但是他认为才能不是自己的，是上天暂时给他的，所以不能傲慢。<br>我也反思，有时候做好就会慢慢傲慢，反而出现问题。</li><li>核心观就是’利他’二字，人活一辈子，大都是为自己活，<br>真正为了别人好而活的人太少，所以为什么他能成功。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/images/%E5%BF%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
            <tag> 稻盛和夫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么而工作</title>
      <link href="2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/"/>
      <url>2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="你为什么而工作"><a href="#你为什么而工作" class="headerlink" title="你为什么而工作"></a>你为什么而工作</h1><ul><li><p>之前从来没有考虑过工作的意义，最舒服的时候是做出公司的组件， 服务于大众的时候。能够让大家开发的舒服，真是特别的满足。 尤其是人性那块，因为我都是尽自己努力在做事情，</p></li><li><p>最近说在管理，也不算管理，从领导上来看，他希望我可以多做一点。 我早期本着技术的角度，在技术上承担的比较多，在人性上从来没有考虑过。 最近的人员流动率过于高了，我也开始在想管理这方面的事情了。<br>这本书从人性上讲了如何驱动大家，从使命和环境上开始改变。 让大家都可以尽其所能，找到自己更伟大的使命和意义。 ￼</p></li></ul><p><img src="/images/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 人性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优势谈判</title>
      <link href="2021/03/09/%E8%AF%BB%E4%B9%A6/%E4%BC%98%E5%8A%BF%E8%B0%88%E5%88%A4/"/>
      <url>2021/03/09/%E8%AF%BB%E4%B9%A6/%E4%BC%98%E5%8A%BF%E8%B0%88%E5%88%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="优势谈判"><a href="#优势谈判" class="headerlink" title="优势谈判"></a>优势谈判</h2><h3 id="1-开局谈判技巧"><a href="#1-开局谈判技巧" class="headerlink" title="1.开局谈判技巧"></a>1.开局谈判技巧</h3><h4 id="1-1-开出高于预期的条件"><a href="#1-1-开出高于预期的条件" class="headerlink" title="1.1 开出高于预期的条件"></a>1.1 开出高于预期的条件</h4>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谈判 </tag>
            
            <tag> 软技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇特的一生</title>
      <link href="2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/"/>
      <url>2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="奇特的一生"><a href="#奇特的一生" class="headerlink" title="奇特的一生"></a>奇特的一生</h1><p>奇特的一生这本书很奇怪，如何阅读比正本反而更容易看，可能是正本是他的朋友写的，主要是介绍他的才华什么的，<br>而指导阅读的确实围绕着管理时间的核心来讲的。</p><p>柳比歇夫 从26岁开始执行记录时间的习惯，一直到去世，56年没有断过，到了老年还是保持的高效的工作能力。<br>我从中学到了一些东西</p><ol><li>记录时间，可以主要是自己有效的工作和阅读时间，</li><li>每天每周每月每年去回顾一下，好好统计下做一个回顾，时间就了就可以精准的感知时间，</li><li>立下广大的志向，通过跟时间做朋友去慢慢的接近他。</li><li>围绕着自己的终极目标，完善自我，管理学，数学，文学，音乐，运动缺一不可</li><li>等到年老了，累了马上就休息，高效休息高效工作、</li><li>目前要好好想想自己的终点，陪着时间去慢慢接近他。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
