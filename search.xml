<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年度目标</title>
      <link href="2022/01/15/%E7%9B%AE%E6%A0%87/2022/"/>
      <url>2022/01/15/%E7%9B%AE%E6%A0%87/2022/</url>
      
        <content type="html"><![CDATA[<h1 id="2021总结"><a href="#2021总结" class="headerlink" title="2021总结"></a>2021总结</h1><ul><li><p>2021年已经过去，去年的经历现在回想起来好像似乎没有什么变化，自己在这一年进步了多少也无法考证。</p></li><li><p>翺晟又干了8个月，一直以自己的喜好点进行技术研究，产出还算可以，算比较小众的吧。</p><ul><li>推进公司使用vue3，在处理grpc-web时降级vite到webpack，完成项目的整体基座。</li><li>结合vben组件库，将组件思想抽离，在公司内部结合闭包使用 table formModel form modal等组件</li><li>统一写法，把状态抽离到闭包内部，简化代码，抽离了部分配置来简化功能，打成共识可以减少代码量，也不易出错</li><li>完成大屏开发，组件只负责渲染，入口统一做数据管理，增加拦截层，通过参数返回mock，业务组件模块自成一体，做到可迁移</li></ul></li><li><p>埃森哲干了3个月，主要方向正在微信公众号，小程序框架uniapp上</p><ul><li>完成微信公众号紧急上线</li><li>小程序开发准备和整体设计，抽离通用库，支撑小程序的开发，</li><li>2个小程序多个环境集成到一个项目中，同时拓展出app业务，</li><li>使用node整体进行代码整合，使得1套代码，2端，3种不同业务的开发发布。</li><li>对代码进行分层优化，使每一层职责单一，同时抽象方法进行更详细的loading提升用户体验，</li></ul></li><li><p>做的不好的事情</p><ul><li>光顾着埋头干，没有去统筹全局，应该更积极的参与到业务中去，把控业务细节，因为后期发现想改，成本很高</li><li>没有进行较多的code review，导致成员的提升有限，并且没有对成员在提升上有所指导</li><li>工程化能力较为欠缺，只站在代码细节去解决问题，忽略了更加重要的设计问题。</li></ul><h1 id="2022年度目标"><a href="#2022年度目标" class="headerlink" title="2022年度目标"></a>2022年度目标</h1></li><li><p>工作上</p><ul><li>花1/3时间用来产品和开发对接中，确认业务细节和风险</li><li>花1/3时间用于代码review中，确保每一个人的能力和提升的关键点</li><li>花1/3时间用于node和工程化架构上，确保未来架构切换的可能性，</li></ul></li><li><p>生活上</p><ul><li>阅读时间欠缺，文学作品和技术要兼顾，每个月至少一本文学作品和技术书籍</li><li>照顾身体，健康同样重要，每周2-3次持续15分钟的锻炼，</li><li>照顾他人，对待爱人需要更加细心，主动承担家务，每天扫地拖地1次，周末做饭2次，</li><li>见识少，每年1-2次旅游，写游记，不可走马观花</li><li>兴趣爱好少，培养1-2个兴趣爱好，每周花1-3个小时</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度目标 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint指南</title>
      <link href="2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/"/>
      <url>2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="eslint指南"><a href="#eslint指南" class="headerlink" title="eslint指南"></a>eslint指南</h1><h2 id="eslint是什么"><a href="#eslint是什么" class="headerlink" title="eslint是什么"></a>eslint是什么</h2><p>eslint是node写出来的一个代码静态分析工具，与之匹配的还有prettier代码美化工具</p><h2 id="eslint特点"><a href="#eslint特点" class="headerlink" title="eslint特点"></a>eslint特点</h2><ul><li>可插拔</li><li>规则独立</li><li>不限制编码风格，规则自由</li></ul><h2 id="eslint-使用指南"><a href="#eslint-使用指南" class="headerlink" title="eslint 使用指南"></a>eslint 使用指南</h2><ol><li>安装</li></ol><p><code>npm install eslint --save-dev</code></p><ol start="2"><li>生成配置文件</li></ol><p><code>./node_modules/.bin/eslint --init</code></p><ol start="3"><li>校验文件</li></ol><p><code>./node_modules/.bin/eslint yourfile.js</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目脚手架解决方案</title>
      <link href="2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="脚手架解决方案"><a href="#脚手架解决方案" class="headerlink" title="脚手架解决方案"></a>脚手架解决方案</h1><p>在多个项目中，很多内容都是可以复用的，手动通过脚手架创建的只是一个很基础的功能，所以需要构建自己的脚手架</p><h2 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a><a href="https://yeoman.io/">yeoman</a></h2><h3 id="yeoman是什么"><a href="#yeoman是什么" class="headerlink" title="yeoman是什么"></a>yeoman是什么</h3><p>yeoman 是一个快速建立项目的工具，它其实是下面的集合</p><ul><li>yo –脚手架，生成工具</li><li>grunt，gulp – 构建工具</li><li>bower，npm – 包管理工具  </li></ul><p>任何人可以通过它创建通用的模板，命名为generator-xxx, 执行的时候运行yo xxx就行</p><h3 id="yeoman-快速创建项目"><a href="#yeoman-快速创建项目" class="headerlink" title="yeoman 快速创建项目"></a>yeoman 快速创建项目</h3><ol><li>首先(全局)安装yo  <code>yarn global add yo</code></li><li>我们以generator-node模块为例，安装  <code>yarn global add generator-node</code> 里面有很多功能</li><li>创建文件夹<code>mkdir yo-quick</code>, 进入运行 <code>yo node</code>,回答一些问题，会自动创建模板文件<br><img src="/images/2021/8/1/yo-quick.png"></li></ol><h3 id="yeoman-创建自定义的脚手架"><a href="#yeoman-创建自定义的脚手架" class="headerlink" title="yeoman 创建自定义的脚手架"></a>yeoman 创建自定义的脚手架</h3><p>创建generator，其实就是创建一个npm模块，依赖于<a href="https://yeoman.io/authoring/index.html">yeoman-generator</a> 模块</p><ol><li>创建一个文件夹叫generator-self,新建<code>generators/app/index.js</code>文件，</li><li>问题的内容在prompting中，把答案存入this上下文的内容中,写入文件的内容在writing中，<ul><li>直接写文件 <code>this.fs.write(目标地址, 携带参数(用于ejs解析))</code></li><li>写入模板 <code>this.fs.copyTml(源文件, 目标地址, 携带参数(用于ejs解析))</code></li></ul></li><li>本地使用的话 <code>yarn link</code>，或者发到npm包里</li><li>运行的时候需要yo 包名，跑的是app目录下的</li><li>可以在app同级目录简历其他名称，yo 包名:名称就可以跑额外任务了</li></ol><p>列举一些this上下文方法</p><ul><li>安装依赖npm <code>this.npmInstall([&#39;lodash&#39;], &#123; &#39;save-dev&#39;: true &#125;);</code></li><li>安装依赖yarn <code>this.yarnInstall([&#39;lodash&#39;], &#123; &#39;dev&#39;: true &#125;);</code></li><li>运行脚本 <code>this.spawnCommand(&#39;composer&#39;, [&#39;install&#39;]);</code></li><li>用户输入<pre class="line-numbers language-none"><code class="language-none">this.prompt([&#123;  type: &quot;confirm&quot;,  name: &quot;cool&quot;,  message: &quot;Would you like to enable the Cool feature?&quot;&#125;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>打印log <code>this.log(&quot;cool feature&quot;, this.answers.cool);</code> // user answer <code>cool</code> used</li><li>验证额外参数 <pre class="line-numbers language-none"><code class="language-none">this.option(&quot;coffee&quot;);  this.scriptSuffix &#x3D; this.options.coffee ? &quot;.coffee&quot; : &quot;.js&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>获取根级目录 <code>this.destinationRoot();</code></li><li>获取目标路径 <code>this.destinationPath(&#39;index.js&#39;);</code></li><li>使用ejs模板和数据填充内容<pre class="line-numbers language-none"><code class="language-none">this.fs.copyTpl(  this.templatePath(&#39;index.html&#39;),  this.destinationPath(&#39;public&#x2F;index.html&#39;),  &#123; title: &#39;Templating with Yeoman&#39; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="plop"><a href="#plop" class="headerlink" title="plop"></a><a href="https://plopjs.com/">plop</a></h2><p>plop是一个帮你节省时间，帮助你的团队创建一致的新文件的小工具。<br>plop是根据配置模板，统一创建新文件的工具，类似 ng g page那种类型<br>其实类似webstorm创建项目的一些模板</p><ol><li>使用plop，首先在项目中安装plop依赖 <code>yarn add global plop</code>也行</li><li>在项目根目录创建<code>plopfile.js</code>文件<pre class="line-numbers language-none"><code class="language-none">   module.exports &#x3D; function (plop) &#123;    &#x2F;&#x2F; create your generators here    plop.setGenerator(&#39;component&#39;, &#123;        description: &#39;create component&#39;,        prompts: [&#123; &#x2F;&#x2F; 类似之前的提问            type: &#39;input&#39;,            name: &#39;name&#39;,            message: &#39;component name&#39;,            default: &#39;my component&#39;        &#125;],        actions: [&#123; &#x2F;&#x2F; 创建的操作            type: &#39;add&#39;,            path: &#39;src&#x2F;components&#x2F;&#123;&#123;name&#125;&#125;&#x2F;&#123;&#123;name&#125;&#125;.vue&#39;,            templateFile: &#39;template&#x2F;components.hbs&#39;        &#125;]    &#125;);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建生成的模板,以hbs文件结尾，内部用<code>&#123;&#123;name&#125;&#125;</code>来表示变量</li><li><code>yarn link</code>后可以使用了，运行用<code>yarn plop 名称</code>代替比如说<code>yarn plop component</code></li></ol><h2 id="node自己实现"><a href="#node自己实现" class="headerlink" title="node自己实现"></a>node自己实现</h2><p>node自己实现原理也都是脚手架的原理 </p><ol><li>在项目里面加入cli.js,第一行写成 <code>#!/usr/bin/env node</code>，里面可以写node对文件的操作</li><li>先在package.json里面加入<code>bin: &quot;cli.js&quot;</code>，</li><li>之后npm link之后就可以使用包名来执行了,</li><li>问答库可以使用<code>inquirer</code>，用法和以上类似</li><li>渲染库使用 <code>ejs</code>,用法是<code>ejs.renderFile(path.join(tmplDir,file), answer, (err,res) =&gt; &#123; fs.writeFileSync(path.join(destDir,file), result) &#125;,</code></li><li>基本上使用的都是node的fs文件模块的命令。</li></ol><h2 id="代码查看，以上的实践代码，点击查看"><a href="#代码查看，以上的实践代码，点击查看" class="headerlink" title="代码查看，以上的实践代码，点击查看"></a>代码查看，以上的实践代码，<a href="https://github.com/swliu920322/lagou-code/tree/main/2.FE-Engine/2.scaffold">点击查看</a></h2>]]></content>
      
      
      <categories>
          
          <category> 脚手架解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> 工程化 </tag>
            
            <tag> 拉钩大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105.从前序与中序遍历序列构造二叉树</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><p>给定一棵树的前序遍历 preorder 与中序遍历 inorder。请构造二叉树并返回其根节点</p><p>示例 1:</p><pre class="line-numbers language-none"><code class="language-none">Input: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]Output: [3,9,20,null,null,15,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>前序遍历是，先遍历根节点，再遍历左子树，再遍历右子树</li><li>中序遍历是，先遍历左子树，再遍历根节点，再遍历右子树</li><li>后续遍历是，先遍历左子树，再遍历右子树，再遍历根节点。</li><li>如何记忆，只看某一个节点，前序遍历在遍历左右之前，中序遍历在遍历左右之中，右序遍历在遍历左右之后.</li></ol><ul><li>解题例子 前序[1, 2, 4, 7, 3, 5, 6, 8]<br>中序[4, 7, 2, 1, 5, 3, 8, 6];</li></ul><ol><li>前序第一个肯定是根节点，从中序中找到根节点位置，分成左右2部分.</li><li>对左右部分的前序继续进行处理，</li></ol><h4 id="硬解法，复杂度为O-n2"><a href="#硬解法，复杂度为O-n2" class="headerlink" title="硬解法，复杂度为O(n2)"></a>硬解法，复杂度为O(n2)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;number[]&#125; preorder * @param &#123;number[]&#125; inorder * @return &#123;TreeNode&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> preLeft <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorLeft <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preLeft<span class="token punctuation">,</span> inorLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> preRight <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preRight<span class="token punctuation">,</span> inorRight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存解法-少了循环"><a href="#缓存解法-少了循环" class="headerlink" title="缓存解法,少了循环"></a>缓存解法,少了循环</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  inorder<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> iEnd</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pStart <span class="token operator">></span> pEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rootNode <span class="token operator">=</span> preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> midIndex <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leftNum <span class="token operator">=</span> midIndex <span class="token operator">-</span> iStart<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pStart <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> midIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rooot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> iEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>124.二叉树中的最大路径和</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124.二叉树中的最大路径和"></a>124.二叉树中的最大路径和</h3><p>路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p><p>路径和 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number&#125; */</span><span class="token comment">// 每个二叉树的路径等于它的左子树加右子树加自己的和，如果左右子树小于0，则加0，</span><span class="token comment">// 这里需要计算左子树和右子树和，采用后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">const</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">+</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 向父类提供的最大值，因为向父类提供了，所以只有一个子</span>       <span class="token keyword">return</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 还有种解法，穷举，总之核心是树的后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 所有可能性中去最大</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必读的事业规划书</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员必读的事业规划书"><a href="#程序员必读的事业规划书" class="headerlink" title="程序员必读的事业规划书"></a>程序员必读的事业规划书</h1><h2 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h2><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>你的价值不在于你的技术，而在于你为公司提供的价值，即使用价值，提升解决问题能力</p><h3 id="供需"><a href="#供需" class="headerlink" title="供需"></a>供需</h3><p>信息不对称影响价值，短时间争取大量机会</p><h3 id="跳槽"><a href="#跳槽" class="headerlink" title="跳槽"></a>跳槽</h3><p>不只是价值，看未来发展和感受， 之前要考虑得失， 永远不要因为现在很差而跳槽，要用未来更好，保证一直往上走</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>应届生-小组长-主管-部门经理-总监-CTO，提升能力，如果长时间得不到成长再选择跳槽。脑子里要有清晰的模板</p><h2 id="2-准备篇"><a href="#2-准备篇" class="headerlink" title="2. 准备篇"></a>2. 准备篇</h2><h3 id="自我认识和自我实现"><a href="#自我认识和自我实现" class="headerlink" title="自我认识和自我实现"></a>自我认识和自我实现</h3><ol><li>找不到目标的话，定1年期目标，  </li><li>多挣钱</li></ol><h3 id="四大象限"><a href="#四大象限" class="headerlink" title="四大象限"></a>四大象限</h3><ul><li>E象限 雇员  低风险低收益，天花板明显。</li><li>S象限 自己  做标准化产品 免费+收费定制，做细分、专业的工具。</li><li>B象限 创业 规模化为前提 投资，上市 出售，不喜欢伺候一群爷（用户），别做CEO。<br>A轮融资之前寻找商业模式，变更频繁，敏捷开发，A之后着力规模化，高并发高可用，处理团队和资源。</li><li>I象限 投资</li></ul><h3 id="分析招聘需求"><a href="#分析招聘需求" class="headerlink" title="分析招聘需求"></a>分析招聘需求</h3><ul><li>简历模板 <a href="https://github.com/geekcompany/ResumeSample/blob/master/web.md">https://github.com/geekcompany/ResumeSample/blob/master/web.md</a></li><li>调整自己定位 1.学会观察技术趋势 坚持在发展方向上   2.投资新兴市场和细分市场  每个企业都有可取之处，</li></ul><h3 id="职业画布"><a href="#职业画布" class="headerlink" title="职业画布"></a>职业画布</h3><h3 id="个人品牌-高价值输出"><a href="#个人品牌-高价值输出" class="headerlink" title="个人品牌 高价值输出"></a>个人品牌 高价值输出</h3><ul><li>github博客</li><li>微博加V， 大小问题在这里处理</li><li>技术社区账号StackOverFlow  大量内容的文章在这里发表</li></ul><h3 id="沟通和写作"><a href="#沟通和写作" class="headerlink" title="沟通和写作"></a>沟通和写作</h3><p>金字塔原则 </p><ul><li>条理 </li><li>逻辑</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>充分交流</p><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>可以做技术尝试.  从小做起， 真实的需求  持续更新的毅力</p><h3 id="架构能力"><a href="#架构能力" class="headerlink" title="架构能力"></a>架构能力</h3><ul><li>dry  </li><li>尽量自动化 </li><li>正交性（隔离）</li></ul><h2 id="3-操作篇"><a href="#3-操作篇" class="headerlink" title="3. 操作篇"></a>3. 操作篇</h2><h3 id="简历的本质-约面试"><a href="#简历的本质-约面试" class="headerlink" title="简历的本质 约面试"></a>简历的本质 约面试</h3><h4 id="FAB原则"><a href="#FAB原则" class="headerlink" title="FAB原则"></a>FAB原则</h4><ul><li>是什么</li><li>比别人好在哪点</li><li>如果雇佣我，得到的价值是什么</li><li>原则是数字化,没有成绩 讲成长<h3 id="书写工具"><a href="#书写工具" class="headerlink" title="书写工具"></a>书写工具</h3>markDown,尽量提供pdf的，文件名，xxx简历.WEB开发工程师.pdf</li></ul><h3 id="内推-猎头-网站投"><a href="#内推-猎头-网站投" class="headerlink" title="内推 猎头 网站投"></a>内推 猎头 网站投</h3><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><ol><li>遍历简历知识点</li><li>技能树</li><li>多用咱</li><li>离职原因，要以未来更好</li><li>遇到的最大挑战， 可以讲一个最近发生的</li><li>你希望三年后成为什么样的人  考察职业规划</li><li>有什么要问我们的，带兴趣指标的问题，技术或者产品</li></ol><p><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E8%B1%A1%E9%99%90.png"><br><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E7%94%BB%E5%B8%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视力从0.1到1，不开刀不吃药</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="视力从0-1到1，不开刀不吃药"><a href="#视力从0-1到1，不开刀不吃药" class="headerlink" title="视力从0.1到1，不开刀不吃药"></a>视力从0.1到1，不开刀不吃药</h1><p>本书的根据是人体自身是一个可自我调节修复的系统，参考人体使用指南。我主要关注了如何恢复，原因就不说了</p><h2 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h2><ol><li>有氧运动，书上说时弹跳500次或深蹲100，排除内脏脂肪</li><li>眼保健操，书上说按摩眼睛和头，来回敲打手臂上半部分和小腿两侧</li><li>揉搓耳朵，很多眼睛的穴位</li><li>腹式呼吸，多吸入氧气，提高氧气的摄取。</li><li>远眺，保持放松</li><li>均衡饮食，早睡，拒烟酒</li><li>在看清的基础上，后退，努力继续看清，相信自己可以看清</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 养生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包在vue3的使用</title>
      <link href="2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包在vue3的使用"><a href="#闭包在vue3的使用" class="headerlink" title="闭包在vue3的使用"></a><a href="/images/%E5%88%98%E5%9C%A3%E4%BC%9F%E7%AE%80%E5%8E%86.docx">闭包在vue3的使用</a></h1><ul><li>早期做项目，基于简单这一个出发点，所谓的封装也只是一些执行顺序的问题。<br>对闭包用的也少。</li><li>最近看了一个开源vue3后台的处理方式，可能这就是闭包该有的写法吧。<br>本质是闭包内部维持状态，暴露闭包set函数的集合和内部状态的set，通过vue的emit传回到组件本身。<br>把属性合并作为v-bind的对象体，使用者只关心函数调用即可。</li><li>封装本身用来控制抽象的内容，分可预测和难预测的部分，通常解决掉是重复的可预测内容。<br>之前简单的封装一部分是对于模板的，wrapper函数，一部分是逻辑的logic函数，之前是做了2份的，本身还得配合使用。<br>现在wrapper函数和模板通过内部闭包状态合并了，对于使用者来说是一个很舒服的状态。</li></ul><h2 id="vue3配合闭包目前的封装思想"><a href="#vue3配合闭包目前的封装思想" class="headerlink" title="vue3配合闭包目前的封装思想"></a>vue3配合闭包目前的封装思想</h2><h3 id="真实组件使用"><a href="#真实组件使用" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">const</span> app <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;BasicTable @register="register" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      register<span class="token punctuation">,</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装"><a href="#组件内部封装" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initialProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> loadingRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token comment">// 监听props之后的变化，更新状态</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      getLoadingRef<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>loadingRef<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> Table <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ATable ref="tableRef" v-bind="getBindValue" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> innerPropsRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 始终获取最新的props</span>    <span class="token keyword">const</span> getProps <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoadingRef<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">setInnerPropRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      innerPropsRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 使用最新的状态</span>    <span class="token keyword">const</span> getBindValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>attrs<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token function">unref</span><span class="token punctuation">(</span>getLoadingRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tableAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> setLoading<span class="token punctuation">,</span> setInnerPropRef <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 把闭包函数集合emit为事件参数</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">,</span> tableAction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> tableRef<span class="token punctuation">,</span> getBindValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部"><a href="#useTable内部" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    actions<span class="token punctuation">.</span><span class="token function">setInnerPropRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> otherMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> otherMethods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js通过闭包简单实现"><a href="#js通过闭包简单实现" class="headerlink" title="js通过闭包简单实现"></a>js通过闭包简单实现</h2><h3 id="真实组件使用-1"><a href="#真实组件使用-1" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件类本身会自动实例化，我这边是手动</span>  <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">register</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自己逻辑处理位置</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装-1"><a href="#组件内部封装-1" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假设的loading响应式函数</span>  <span class="token keyword">let</span> loading <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> loading<span class="token punctuation">,</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loading <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 一个假设的状态响应式函数 同上</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> state <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>state <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 真实table组件内部状态</span><span class="token keyword">function</span> <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoading<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    setState<span class="token punctuation">,</span>    setLoading<span class="token punctuation">,</span>    getComputedLoading<span class="token punctuation">,</span>    getComputedState<span class="token punctuation">,</span>    <span class="token function">setProps</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setState</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// emit的东西暂时存起来</span>  actions <span class="token operator">=</span> setMethods<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    getMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span> getComputedLoading<span class="token punctuation">,</span> getComputedState <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    setMethods<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部-1"><a href="#useTable内部-1" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 解析业务逻辑的核心</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>    actions<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash.concat</title>
      <link href="2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/"/>
      <url>2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 自己实现</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
            <tag> lodash_array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心</title>
      <link href="2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/"/>
      <url>2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="心-稻盛和夫一生嘱托"><a href="#心-稻盛和夫一生嘱托" class="headerlink" title="心 - 稻盛和夫一生嘱托"></a>心 - 稻盛和夫一生嘱托</h1><ol><li>提到稻盛和夫，大家都知道他是一个很厉害的企业家，<br>现在也有自己的心学系统和企业管理法阿米巴。<br>读完这本书。</li><li>他是一个伟人，一个谦虚的伟人。<br>谦虚到什么程度呢，虽然做好了很多企业，但是他认为才能不是自己的，是上天暂时给他的，所以不能傲慢。<br>我也反思，有时候做好就会慢慢傲慢，反而出现问题。</li><li>核心观就是’利他’二字，人活一辈子，大都是为自己活，<br>真正为了别人好而活的人太少，所以为什么他能成功。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/images/%E5%BF%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稻盛和夫 </tag>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么而工作</title>
      <link href="2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/"/>
      <url>2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="你为什么而工作"><a href="#你为什么而工作" class="headerlink" title="你为什么而工作"></a>你为什么而工作</h1><ul><li><p>之前从来没有考虑过工作的意义，最舒服的时候是做出公司的组件， 服务于大众的时候。能够让大家开发的舒服，真是特别的满足。 尤其是人性那块，因为我都是尽自己努力在做事情，</p></li><li><p>最近说在管理，也不算管理，从领导上来看，他希望我可以多做一点。 我早期本着技术的角度，在技术上承担的比较多，在人性上从来没有考虑过。 最近的人员流动率过于高了，我也开始在想管理这方面的事情了。<br>这本书从人性上讲了如何驱动大家，从使命和环境上开始改变。 让大家都可以尽其所能，找到自己更伟大的使命和意义。 ￼</p></li></ul><p><img src="/images/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人性 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇特的一生</title>
      <link href="2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/"/>
      <url>2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="奇特的一生"><a href="#奇特的一生" class="headerlink" title="奇特的一生"></a>奇特的一生</h1><p>奇特的一生这本书很奇怪，如何阅读比正本反而更容易看，可能是正本是他的朋友写的，主要是介绍他的才华什么的，<br>而指导阅读的确实围绕着管理时间的核心来讲的。</p><p>柳比歇夫 从26岁开始执行记录时间的习惯，一直到去世，56年没有断过，到了老年还是保持的高效的工作能力。<br>我从中学到了一些东西</p><ol><li>记录时间，可以主要是自己有效的工作和阅读时间，</li><li>每天每周每月每年去回顾一下，好好统计下做一个回顾，时间就了就可以精准的感知时间，</li><li>立下广大的志向，通过跟时间做朋友去慢慢的接近他。</li><li>围绕着自己的终极目标，完善自我，管理学，数学，文学，音乐，运动缺一不可</li><li>等到年老了，累了马上就休息，高效休息高效工作、</li><li>目前要好好想想自己的终点，陪着时间去慢慢接近他。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
