<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2.跟着华为学管理-场景识别</title>
      <link href="2022/04/24/%E7%AE%A1%E7%90%86/2.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9C%BA%E6%99%AF%E8%AF%86%E5%88%AB/"/>
      <url>2022/04/24/%E7%AE%A1%E7%90%86/2.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E5%9C%BA%E6%99%AF%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="2-跟着华为学管理-场景识别"><a href="#2-跟着华为学管理-场景识别" class="headerlink" title="2.跟着华为学管理-场景识别"></a>2.跟着华为学管理-场景识别</h2><h3 id="1-应对团队管理的五维领导模式"><a href="#1-应对团队管理的五维领导模式" class="headerlink" title="1.应对团队管理的五维领导模式"></a>1.应对团队管理的五维领导模式</h3><ol><li>在企业面临重大危机或者某些突发事件的时候 与员工站在一起</li><li>在企业和团队发展的平和时期 给员工提供进步的空间和机会</li><li>五维领导模式”结构图<ul><li><strong>命令</strong><ul><li><strong>场景</strong> 危机时使用</li><li><strong>意义</strong> 要求被掌管的人立刻服从管理以达到预期效果</li><li><strong>战略目标</strong><ul><li>要求完全服从</li><li>紧急情况或危机环境中给予明确指示</li><li>立刻见效</li><li>减少恐慌，增加成员安全感</li></ul></li></ul></li><li><strong>愿景</strong>  愿景≠画大饼，必须要取得好的结果，然后兑现<ul><li><strong>场景</strong> 员工对工作的意义和价值迷失，企业发展失去目标和方向,或面临危机</li><li><strong>意义</strong> 为团队描绘出一幅清晰的、令人信服的、值得大家为之奋斗的蓝图，并把这个蓝图清楚地印在每一个成员的心里</li><li><strong>战略目标</strong><ul><li>激励员工为共同目标奋斗</li><li>促使员工把握机遇</li><li>团队能够团结一致迎接挑战</li><li>激励并保持员工的动力和热情</li></ul></li><li><strong>华为分享</strong><ul><li>1994 年，任正非在员工内部讲话：“十年后，全球通信行业三分天下，华为占其一。”</li></ul></li></ul></li><li><strong>参与</strong><ul><li><strong>场景</strong> 需要广泛听取意见，做出决策或未来规划时，或者需要提高工作效率、产品质量时</li><li><strong>意义</strong> 管理者通过集思广益或民主决策的方式，又或两者并用的方式，为员工营造出一种海纳百川和乐于奉献的氛围</li><li><strong>战略目标</strong> <ul><li>通过参与决策，激发员工的工作热情</li><li>提高工作效率或产品质量</li><li>集思广益，科学决策</li></ul></li><li><strong>华为分享</strong><ul><li>要求技术人员写技术建议,于审核通过的技术建议，会对相应员工给予物质奖励，并且在年底还会将比较优秀的建议汇编成册，发放学习</li><li>很多战略性的决策，需要的是更高层级的管理者来探讨,让普通员工参与研讨和决策，可能会导致决策方向偏离</li></ul></li></ul></li><li><strong>沟通</strong> 管理者与员工 员工与员工<ul><li><strong>场景</strong><ul><li>群体内部出现裂痕需要弥补时</li><li>人际关系网络需要改善或拓展时</li><li>群体中出现沟通障碍，阻碍了群体的效率和潜能的发挥时</li><li>由于压力过大而使人际关系紧张时</li></ul></li><li><strong>战略目标</strong><ul><li>在企业内部创造和谐环境</li><li>加强团队协作意识</li><li>深化群体内部成员间的相互交流，提高交流质量，增强彼此的信任感</li><li>加强各群体之间非正式的信息交流</li></ul></li><li><strong>华为分享</strong><ul><li>民主生活会<ul><li>搜集员工反映的很多问题，并且还会在此基础上做深入沟通，以确保这些问题都可以通过可落地措施得到有效解决</li><li>鼓励员工进行批评和自我批评,暴露组织氛围、员工关系的问题</li><li>同一目标下进行沟通，可以有效帮助员工排解情绪，提升组织凝聚力</li></ul></li><li>心声社区<ul><li>公司文件第一时间都会发布在该社区，员工可以直接评论（实名或者匿名皆可），可以支持、反对、吐槽和提意见</li><li>员工也可以直接在论坛发帖，反映公司现存的各种问题，其中的一些优秀作品，还会被给予稿费激励。</li><li>公司外部人员也可以以游客身份登录心声社区，最直观地看到员工对公司的认可、不满和批评，也可以深刻体会到心声社区作为“华为人的沟通家园”这一定位的真实性。</li><li>沟通机制并不是大家坐下来一起谈谈话就能建设好的，这需要有一个自上而下的执行机制</li></ul></li></ul></li></ul></li><li><strong>培养</strong><ul><li><strong>场景</strong><ul><li>当下属想要提高工作绩效时，或者管理者需要扩展领导基础时，</li><li>对于管理者而言，在员工个人的目标、价值观与集体保持一致的前提下，最大限度地帮助员工开发个人潜能，施展个人才华</li></ul></li><li><strong>战略目标</strong><ul><li>把员工的个人愿望及其才能与公司目标联系起来</li><li>提高下属的工作质量和产出率</li><li>扩展领导基础，提高领导公信力</li></ul></li><li><strong>华为分享</strong><ul><li>战略预备队 <ul><li>培养目标是为公司大结构转型培养各级专家、职员和主官，并且输送到一线，</li><li>帮助公司构筑面向未来的具备在战略无人区独立作战能力的组织，实现面向未来的知识结构的快速转化。</li><li>对员工进行培养的过程中，要提前识别员工的能力、潜能以及个人兴趣，以匹配合适的培养方向。</li><li>还要识别出一些员工是否跟集体的价值观和利益相一致，否则会导致员工把培养完全当成一个跳板，之于公司就是得不偿失。</li></ul></li></ul></li></ul></li></ul></li></ol><h3 id="2-如何有效执行命令式管理"><a href="#2-如何有效执行命令式管理" class="headerlink" title="2.如何有效执行命令式管理"></a>2.如何有效执行命令式管理</h3><ul><li>管理者要直接掌管一切，而被掌管者要立刻服从管理以达到预期效果。</li><li>管理者必须要增加此命令带来的正面和积极的效果，排除和减少负面和消极的影响。<h4 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h4></li></ul><ol><li><strong>判断</strong><ul><li>管理者可以根据现有的信息，在判断的速度和周密性上做好平衡</li><li>根据事件和状态的紧急程度，做出取舍</li><li><strong>避免</strong> 过于强调信息的完备性，很有可能会贻误战机</li></ul></li><li><strong>决策</strong><ul><li>尽可能周密, 迅速高效</li><li>决策方式必须是自上而下的</li><li>集体的利益才是第一位的，下属和团队成员的个人情绪和偏好是次要的</li><li>做出决策的管理者会承受相当大的压力</li></ul></li><li><strong>指令</strong> <ul><li>清晰而又具体</li><li>必要在发出指令时附带一些简要的理由</li></ul></li><li><strong>监控</strong><ul><li>监控可以确保团队成员按时、准确地执行命令。</li><li>监控主要是确保大方向上的事情，而过程管理则是监督具体操作过程中是否出现了什么问题。</li></ul></li><li><strong>惩戒</strong><ul><li>是绝对不允许有抵制命令的情况发生的,</li><li>执行计划的意志和能力是“命令”领导模式的内在要求，要求管理者必须具备莫大的勇气和决心。</li><li>为了使得命令可以继续被有效执行，管理者必须要有坚韧的意志，以确保命令被严格执行。</li></ul></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>根据所获得的信息，迅速判断事情的轻重缓急</li><li>迅速做出周密的决策</li><li>发出清晰的、简要说明理由的指令</li><li>对执行的速度和准确度进行监控</li><li>对违反命令者严惩不贷。</li></ol><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/mingling.png"></p><h3 id="3-如何有效执行愿景式管理"><a href="#3-如何有效执行愿景式管理" class="headerlink" title="3.如何有效执行愿景式管理"></a>3.如何有效执行愿景式管理</h3><ul><li>愿景是要为团队描绘出一幅清晰、令人信服的、值得大家为之奋斗的蓝图，并把这个蓝图清楚地印在每一个成员的心里</li><li>一个清晰且富有想象空间的愿景会让公司上下方向明确、重点明晰、干劲十足</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>描绘蓝图</strong><ol><li>蓝图必须是有吸引力的, 蓝图还要尽可能具体详尽<ul><li><strong>吸引力</strong> 让员工知道，通过努力他们可以获得什么样的理想成果</li><li><strong>详尽</strong> 下属就越容易相信该目标可以达到，也就更愿意为这个目标而努力奋斗</li></ul></li><li>蓝图必须符合员工的理想<ul><li>理想”的意思是与公司或部门成员的价值观和愿望产生共鸣</li><li>仅停留在物质激励层面，显然是不够的,涉及为公司和行业做出杰出贡献、增长知识、提高人们的生活水平这些深层次的课题</li><li>长期坚持深入基层，了解了员工的价值观和愿望的,让员工直接参与愿景的制定</li></ul></li></ol></li><li><strong>传递愿景</strong> 愿景”的宣传多多益善<ol><li>保证愿景在传递的过程中保持一贯性而不走样</li><li>作为管理者，我们的行为应当是传递愿景的一种最主要的方</li></ol></li><li><strong>员工自由选择达成愿景的方式</strong><ol><li>个人或部门被赋予的自主权越大，他们的干劲就越足，也就越能够更好地实现愿景。</li><li>是把影响员工创造力和实现愿景的障碍排除掉<ol><li>与实现愿景相对立的组织结构，这些结构往往效率低下（例如，部门墙、复杂的审批流程等）</li><li>员工技能不足，无法胜任实现愿景所要求的岗位(例如，员工的知识水平、技术能力、主动性、积极性等方面都有不足，影响到愿景的实现）)</li><li>组织制度与愿景不一致，影响员工创新的积极性（例如，绩效考核、人才选拔制度、战略规划等）</li><li>管理者自身破坏了愿景（例如，管理者自身的行为是与实现愿景背道而驰的，甚至还阻碍员工为实现愿景所做的努力</li></ol></li></ol></li><li>认可员工<ol start="2"><li>认可和表彰,如果能得到管理者的鼓励和认可，员工会更有积极性和主动性</li><li>对待员工探索过程中的错误，最有效的领导方式是鼓励他们从失败中吸取教训，而非责备他们的失败。</li></ol></li></ol><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/yuanjing.png"></p><h3 id="4-如何有效执行参与式管理"><a href="#4-如何有效执行参与式管理" class="headerlink" title="4.如何有效执行参与式管理"></a>4.如何有效执行参与式管理</h3><ul><li>定义：参与就是管理者通过集思广益或民主决策的方式，又或两者并用的方式，为员工营造出一种海纳百川和乐于奉献的氛围</li><li>特点：鼓励员工积极献计献策、参与决策的制定。</li></ul><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>邀请参与</strong><br>真诚地向员工征求意见和建议，并认真对待这些意见和建议。<ul><li>管理者确实有开放的心态，愿意从员工那里获得意见和建议；</li><li>管理者会很认真考虑以及采纳员工的意见和建议。</li><li><strong>华为分享</strong><ul><li>要求员工写“案例和合理化建议”,并且作为个人和团队考核内容的一部分。</li><li>对于审核通过的，会变成考核的加分项，并且会对员工给予物质奖励，在年底甚至还会将比较优秀的建议汇编成册，在全公司发放，号召员工学习。</li><li>让员工甚至家属都参与讨论的过程，是基本法的内容和核心思想不断地被宣贯、越来越深入人心的过程</li><li>讨论过程更为珍贵，因为那是团队参与和达成共识的全过程，大家通过“参与”统一了思想，这个过程更有现实性的意义。</li></ul></li></ul></li><li><strong>实施建议</strong><ul><li>建议被采纳，并且被实施了。 建立一套透明、公正、有效的评估程序</li><li>评估方式<ul><li>能够对员工提出的建议进行有效评估，从中筛选出真正有价值的建议</li><li>能够做到公平、公正，不因为管理者的个人喜好而做出选择</li><li>对于这样的评估方式，员工不会有不满的情绪，并且愿意接受</li></ul></li><li><strong>华为分享</strong><ul><li>对于员工提出的合理化建议，采用的是专家小组审核的方式,很快落实</li></ul></li></ul></li><li><strong>表彰员工</strong><ul><li>对于提出建议的员工,给予相应的关注和表彰</li><li><strong>华为分享</strong><ul><li>明码标价,相应的奖金就会在下个月随工资一起发放,如果被评为优秀建议，奖金会提高更多</li><li>每年的年底，公司还会评选年度优秀案例和建议，汇编成书，按照产品大类，发放到每一个员工手上，员工所提建议和经验会被所有人知道和认可，如此一来，员工的自豪感大大增强。</li><li>企业可以根据自己的实际情况，对相应的员工进行表彰，可以是物质的，也可以是精神的，或者兼而有之，方式上，邮件、会议、公告等都可以，只要能让员工感受到公司真诚的感谢和表彰就行。</li></ul></li></ul></li></ol><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/join.png"></p><h3 id="4-如何有效执行沟通式管理"><a href="#4-如何有效执行沟通式管理" class="headerlink" title="4. 如何有效执行沟通式管理"></a>4. 如何有效执行沟通式管理</h3><ul><li>“沟通”主要是指在管理者与员工之间、员工与员工之间，建立并维持和谐的人际关系。</li><li>对于一个企业而言，融洽的工作关系是保证工作顺利开展和高效产出的“润滑剂”。</li><li>如果能够加强跟员工的沟通，确保组织氛围和人际关系的和谐，对于保持组织的战斗力和员工的稳定性，都有非常重要的意义。</li></ul><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ol><li><strong>关心员工生活</strong><ul><li>现在的年轻员工，在马斯洛需求理论中，已经脱离了底层的需求，而更加渴望的是被尊重和自我实现的需求。如果员工不能感受到被尊重，那会极大地打击他们的工作积极性；相反，如果管理者能真正发自内心地尊重员工，则将大大激发他们的工作积极性。</li><li>更好的方式是企业的管理制度和企业文化带来的。因为管理者自发地对员工关心和关怀，带有一定的偶然性.</li><li><strong>华为分享</strong><ul><li>组织在阿富汗连续工作 5 年的员工及其家属到埃及度假观光，员工可以畅快地游览开罗、红海，观摩金字塔，骑骆驼……旅行结束前，公司甚至专门给员工及其家属留下几天的时间用来购物。</li><li>对于在海外常驻的员工，华为允许未婚员工的父母和已婚员工的配偶及小孩陪同，并提供生活补助及商业保险；员工每年有 3 套回国机票，可供家属或自己回国探亲使用</li><li>对于新入职的应届毕业生，会对其入职报到时的差旅、行李托运等费用提供报销，并且还可以提前预支工资</li></ul></li></ul></li><li><strong>建立沟通平台</strong><ul><li>聊天，当然是一个不错的方式，但在大团队里面，这种一对一的聊天会是相当费时费力的</li><li>如果有一个合适的沟通平台和渠道，对于员工之间、上下级之间的沟通会起到很好的推动作用。</li><li><strong>华为分享</strong><ul><li><strong>民主生活会</strong> <ul><li>不同部门和层级都会定期开展的沟通会。在民主生活会上，员工可以反映工作中遇到的各种问题，这些问题会在会上进行充分讨论和沟通，如果问题客观存在，并且影响到工作效率和组织氛围，那么就会尽快采取措施进行整改。</li><li>另一个重要议题是管理者和员工进行自我剖析和批评，将自身存在的不足和所犯的错误说出来，自己来挖掘根源，使得员工能够自我反思和进步，也能对他人有警示作用。</li><li>严厉禁止夸大事实和人身攻击，禁止在个别问题上上纲上线和情绪化处理。</li><li>通过民主生活会，华为成功地塑造了员工的反思精神，推动了学习型组织的建设，使得整个公司在成长过程中充满了活力。</li></ul></li><li><strong>心声社区</strong><ul><li>允许员工匿名发帖，早期为了营造员工发言的安全感，每个员工都可以设置 5 个马甲。</li><li>从员工角度看，可以发泄自己的负面情绪，或者为公司献计献策；</li><li>从管理者角度看，一方面他们可以了解员工的想法，另一方面也使得他们的管理问题被公开暴露，所以也会促使他们高效地改进和回应。</li><li>只有从高层管理者开始，对于形式和目标有清楚的认知，并且有一个自上而下的执行机制，才有可能真正地搭建好这样的平台。</li></ul></li></ul></li></ul></li><li><strong>建立协作关系</strong><ul><li>在员工个人能力有保证的前提下，如果团队内部的协作关系顺畅，会有效活跃团队的氛围，并提升整体的工作效率。</li><li>为了保证团队协作能力的提升，管理者必须“身先士卒”，起好一个带头作用。</li><li>提倡员工树立团体协作意识，鼓励员工团结合作，并对他们团结合作的行为进行适当的奖励。</li><li>从制度和流程上来帮助员工建立团队协作的关系，那效率也会大大提高。</li><li><strong>集体奋斗并不会压抑个性，反而为个性的充分发挥搭建了一个广阔的平台。</strong></li></ul></li></ol><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/communication.png"></p><h3 id="6-如何有效执行培养式管理"><a href="#6-如何有效执行培养式管理" class="headerlink" title="6.如何有效执行培养式管理"></a>6.如何有效执行培养式管理</h3><ul><li>当我们跟员工有了很好的沟通，使得员工对企业和部门有了更多的认同感，并且工作的积极性也有了提升以后，如何更加有效地帮助员工成长，让他们有机会真正完成自我提升和自我价值实现</li><li>员工也会主动表达出希望得到更多的赋能，以达到更好的工作绩效</li><li>管理者也希望团队内部有更多优秀的人才</li><li>企业给予个体更多的赋能，也是挽留人才和巩固组织持续发展的基础。</li></ul><h4 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>识别潜力员工</strong></p><ul><li>培养式管理的重点是找到合适的人来培养, “小草是浇不成大树的”</li><li><strong>误区</strong><ul><li>把绩效完全等同于潜力，认为现在绩效好的员工就是有潜力的员工</li><li>绩效反映的是员工在当前工作岗位和工作任务上的胜任程度，而员工的潜力则是影响员工长期发展的因素。</li><li>潜力是很难在短期内培养出来的，需要在企业和组织内，通过长期的磨炼来培养和提升。</li></ul></li></ul><ol><li><strong>如何识别</strong></li></ol><ul><li><strong>学习能力</strong> 高潜力员工的基础<ul><li>对于新的知识和技能，总是很有学习的动机和意愿</li><li>是否乐于承担一些全新和有挑战性的工作</li></ul></li><li><strong>思维层级</strong> 高潜力员工的素质 广阔的阅读面和视野<ul><li>如果员工的眼睛只看内部，只盯着自己的职责，即使绩效很好，也很难被称为高潜力员工。</li><li>管理者需要的是可以站在更高层级上思考问题的员工。</li><li>团队在工作中遇到一些问题，给出问题答案的时候，可以点出这个过程中需要哪些部门、岗位、流程和资源去配合才能高效解决问题</li><li>在实践中，还能够将复杂的问题向前推进，直到最后落地实现</li></ul></li><li><strong>人际关系</strong> 必备素质<ul><li>高潜力员工应该是一个高情商的人</li><li>员工要善于仔细地聆听他人的观点，而不是妄下结论</li><li>要学会主动理解他人，尊重他人，能够看到并恰当地表扬他人的优点和长处。</li></ul></li><li><strong>抗压能力</strong> 重要素质 情绪恢复能力<ul><li>情绪的稳定性高，不会因压力而导致情绪崩溃或爆发</li><li>可以很快地从失败中走出来，并把失败当作一次学习</li><li>面对周围同事和领导的批评，可以理性面对，并从中选择出合理的建议</li></ul></li></ul></li><li><p><strong>设计培养模式</strong></p><ul><li><strong>误区</strong> 全都交给了人力资源部门来集中实施<ul><li>培训更多的是概念，外面现在流行什么，就对员工培训什么；</li><li>培训成了普惠制，反正已经花钱请人培训了，人人都参与；</li><li>培训等于听讲座，员工的参与度很低；</li><li>只培训，不跟踪落地，导致对员工的培训和培养，最终几乎没有对工作产生正面影响。</li></ul></li><li>当一家企业总是人才“倍”出时，那么这家企业对员工的赋能和培养机制一定是灵活的、高效的。</li><li>以华为为例，华为在人才赋能方面应该说是举全公司之力去构建人才发展的架构，人才发展也不只是某个组织的职责，而是用人部门、人力资源部门和培训部门要通力协同的任务。</li><li><strong>赋能模式</strong><ul><li>华为建立了一整套向员工赋能的平台体系，包括线下平台和线上平台<ul><li>线下平台以华为大学以及分布在全球各地的培训中心和能力中心为主，目前主要提供满足华为公司全局的、共同性的赋能需求。</li><li>随着 IT 互联网系统的发展，华为的基于线上的 E-Learning 学习系统更多的是提供知识类内容，而技能类课程则设计成面授或在岗实践模式。</li></ul></li><li>华为建立了一整套的案例共享平台<ul><li>要求项目经理将每一个项目执行过程中的关键场景、重点事件做记录，并上传到案例平台，方便后续所有员工在平台内进行检索。</li><li>对于项目中员工能力的提升起到了很好的引导作用，也使得华为成为第一个让优质组织经验在内部流动起来的企业。</li></ul></li></ul></li><li><strong>能力赋能</strong><ul><li>华为从 1998 年开始建立任职资格体系，<ul><li><strong>组织层面</strong>：提供清晰的标准以支撑组织对人才价值的评估，为岗位匹配和输入人才资源；整合学习资源，引导员工学习发展。</li><li><strong>员工层面</strong>：成为员工能力提升的“指南针”，体现员工所在岗位的职责要求；据此，员工得以提升职位胜任能力，获得更多的任用机会。</li></ul></li><li><strong>导师制</strong> 导师会对新员工进行帮助和指导<ul><li>帮助员工快速地提升了技能</li><li>当员工在工作或思想上遇到问题的时候，导师还会帮助员工解决问题，或者扮演心理咨询师角色，起到心理疏导的作用。</li><li>为了更好地推广导师制，也为了使得导师们更加愿意去帮助员工，华为对导师会有适当的物质激励，同时还以制度的形式规定：没有担任过导师的员工，不得提拔为行政干部；不能继续担任导师的，不能再晋升。</li></ul></li></ul></li><li><strong>资源赋能</strong> 让听得见炮声的人呼唤炮火<ul><li>在“呼叫炮火”的过程中，华为投入的资源一定是非常高端和优质的</li><li>华为在不同的层级都配置了不同的专家资源，从地区部到总部，专家的级别也会越来越高，</li><li>对于一线员工而言，越是重要和难度大的项目，越能得到高端专家的支持，这个过程就是专家向一线员工赋能的过程。</li></ul></li></ul></li><li><p><strong>实施培养方案</strong></p><ol><li><strong>员工是自我发展的第一责任人</strong> 在设置培训目标时，要基于员工的岗位职责对其做出任职要求，提倡员工自我学习和终身学习，强调学习是员工自己的事情，是员工对自己的投资行为。</li><li><strong>参与培训的学员均为责任结果优异的高潜力员工，采用的培训方式是训战结合式</strong><ul><li>在培训中构建实战化场景，让学员研讨或练习在该场景下如何去处理所遇到的问题</li><li>然后邀请项目管理领域的资深专家，让专家站在客户的角度评判学员制定的解决方案；</li><li>根据专家建议完善方案，对整个过程进行复盘。除此之外，学完后还会有考试</li><li>考完试在实战中再总结、提高，最终让学员自己悟出“原理”。华为通过这样的闭环，更直接、有效地提升学员的实战能力。</li></ul></li><li>多岗历练，循环赋能<ul><li>多岗历练一方面能激活人才和优化队伍结构，另一方面也能锻炼员工的综合能力</li><li>鼓励员工培训一段时间就去实践，实践一段时间再回来重复训练，通过这种循环的培训方式，在一次一次实践中提升员工能力。</li></ul></li></ol></li><li><p><strong>反馈培养结果</strong><br>这个结果反馈可以帮助企业看到在员工选拔、培养方案设置和执行方面的成绩和不足，从而做出调整，以确保员工培养模式可以持续并且价值不断提升。</p><ul><li><strong>结果反馈</strong><ul><li>在培训过程中，培训部门可以将员工的培训情况反馈给员工所在的部门。但企业如果是矩阵型组织架构的话，还要反馈给员工的行政管理部门。</li><li>培训完成以后，用人部门会通过绩效等方式，将员工的培训效果反馈给员工所属部门和人力资源部门。</li><li>员工也可以将培训的整个过程和流程反馈给所在部门，这样可以有效地帮助培训部门提升培训的组织和实施能力。</li></ul></li></ul></li></ol><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/train.png"></p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端用户体验的思考</title>
      <link href="2022/04/22/%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2022/04/22/%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前端用户体验的思考"><a href="#前端用户体验的思考" class="headerlink" title="前端用户体验的思考"></a>前端用户体验的思考</h2><p>最近在埃森哲交付做动态表的业务， 看了其他人写的和我写完的，开始思考怎么能写好。</p><ul><li>业务要求动态表单用每行选一个或多个地区，</li><li>后端接受的数据是平铺的。</li></ul><h3 id="写出来的"><a href="#写出来的" class="headerlink" title="写出来的"></a>写出来的</h3><p>别人的</p><ul><li>一行只接受一个地区，和后端数据保持一致。</li><li>没有处理其他行选择的重复情况。</li></ul><p>我的</p><ul><li>一行接受多个地区，给后端的时候转换为平铺，接受后端数据的时候分组</li><li>当其他行选到与之外冲突的时候，对用户做出覆盖提示，确认后，移除其他的重复内容</li><li>通过直观的内容告诉用户，一共多少，完成了多少，</li><li>每次编辑即时回显，自动懒加载对应层级的树结构。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>从时间的维度看，我至少花了3倍于上者的时间，即时后期做了逻辑复用。</li><li>从用户体验看，除了ui之外(我也努力了)，提升用户操作速度和增加友好提示，</li><li>为了优化选择，对区域树组件进行了大量的扩展，也花费了大量时间</li></ul><h3 id="对前端体验的理解"><a href="#对前端体验的理解" class="headerlink" title="对前端体验的理解"></a>对前端体验的理解</h3><p>其实也不是特别想要彰显自己，每个人上手都想找最块的方式去完成任务，我只是把自己当做使用者，<br>我不愿意使用操作繁琐的软件</p><p>前端体验的个人愚见：</p><ol><li>把分散的数据，做结构化，可视化，实现数据的价值。一般用图表来呈现。</li><li>优化用户操作，提高性能，帮助使用者高效工作和生活。体验在优化流程。</li><li>优化设计，化繁为简，识别重要的内容，以更好的设计交互来循序渐进的呈现。</li></ol><h3 id="技术展望"><a href="#技术展望" class="headerlink" title="技术展望"></a>技术展望</h3><ol><li>最近做抽象，做复用，使用vue2+js最大的瓶颈，在于 进一步抽象的时候，没有ts，会花时间在数据结构上。</li><li>还有就是this的问题，本身vue内部的都是普通函数，在抽象到外部的时候，不一定是vue内部的this,是一个心智负担。</li><li>之前用vue3和react，本身两个都是很不错的方向，vue3偏中庸，react偏激进，编程的本质应该是逻辑，个人也是技术比较激进派的，还是想好好修炼react</li><li>前端阶段的思考(好像只是一个业务工厂，不具有创新性)<ol><li>写好代码-代码整洁，业务分离，逻辑复用…</li><li>掌控项目<ul><li>积淀通用逻辑(虚拟工程重写业务实现),</li><li>组件库业务改造通用化</li><li>模块拆分，隔离个人开发环境</li><li>工程化，前期准备做好(环境，网络层，通用层，打包发布，组件选型，开发思想)</li></ul></li><li>平台赋能 <ul><li>开发平台，脚手架定制开发项目，快速增加功能，平台设计。</li><li>数据中台，对开发平台的数据进行价值分析，推动开发平台进化</li></ul></li></ol></li><li>前端创新的思考（价值在于项目的方向）<ol><li>写好代码-代码整洁，业务分离，逻辑复用…</li><li>掌控项目<ul><li>积淀通用逻辑(虚拟工程重写业务实现),</li><li>组件库业务改造通用化</li><li>模块拆分，隔离个人开发环境</li><li>工程化，前期准备做好(环境，网络层，通用层，打包发布，组件选型，开发思想)</li></ul></li><li>横向打通<ul><li>精通业务，市场</li><li>精通多项技术，复合型。</li><li>可复制的思想，前端的价值在于业务的价值</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.跟着华为学管理-认知准备</title>
      <link href="2022/04/20/%E7%AE%A1%E7%90%86/1.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E8%AE%A4%E7%9F%A5%E5%87%86%E5%A4%87/"/>
      <url>2022/04/20/%E7%AE%A1%E7%90%86/1.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E8%AE%A4%E7%9F%A5%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-跟着华为学管理-认知准备"><a href="#1-跟着华为学管理-认知准备" class="headerlink" title="1.跟着华为学管理-认知准备"></a>1.跟着华为学管理-认知准备</h2><h3 id="1-如何确定管理风格"><a href="#1-如何确定管理风格" class="headerlink" title="1.如何确定管理风格"></a>1.如何确定管理风格</h3><p>管理分为 人和事</p><ul><li><strong>事的维度</strong></li></ul><table><thead><tr><th>维度</th><th>指令型</th><th>启发型</th></tr></thead><tbody><tr><td>工作流程</td><td>容易标准化</td><td>不容易标准化</td></tr><tr><td>个体特征</td><td>团队步调一致,个体特征不明显</td><td>团队要协同互补,个体特征明显</td></tr><tr><td>团队工作结果</td><td>确定性高</td><td>确定性低</td></tr></tbody></table><ul><li><strong>指令型</strong><br>通过工作流程标准化，体系化来强化管理指令。</li><li><strong>启发型</strong><br>通过营造轻松开放的团队氛围，来激发员工的思想和智慧，提高团队竞争力。</li></ul><ul><li><strong>人的维度</strong></li></ul><table><thead><tr><th>维度</th><th>授权型</th><th>指导型</th></tr></thead><tbody><tr><td>团队整体绩效水平</td><td>较高且稳定</td><td>较低或不稳定</td></tr><tr><td>团队成员熟悉程度</td><td>熟悉,团队配合默契度高</td><td>不熟悉，团队配合默契度低</td></tr><tr><td>团队知识库建设水平</td><td>高，员工容易自我学习</td><td>低，员工较难自我学习</td></tr></tbody></table><ul><li><strong>授权型</strong><br>团队比较成熟，明确”责权利”，给团队适度授权，让团队运作有更大的自主权，能够激发主观能动性，避免管理者事无巨细的追踪团队工作的细节。</li><li><strong>指导型</strong><br>团队在磨合，通过对团队的全面指导，让下属理解管理者的想法和理念。在团队中设计导师制模式，形成小群体的互助学习模式，为团队或个体进行指导的模式。</li></ul><table><thead><tr><th>维度</th><th>支持型</th><th>培养型</th></tr></thead><tbody><tr><td>个体绩效结果</td><td>较高</td><td>较低</td></tr><tr><td>个体知识技能</td><td>较高</td><td>较低</td></tr><tr><td>个体工作经验</td><td>丰富</td><td>欠缺</td></tr></tbody></table><ul><li><strong>支持型</strong><br>对于成熟的个体，要给予支持，不用讲很细节的工作内容。相信团队能把事情做好，定好一些求助规则、问题的升级规则，确保个体出问题能够及时反馈，不用追踪员工的日常工作。</li><li><strong>培养型</strong><br>对于非成熟的个体，更多要关注进行能力培养和提升，要在导师制的基础上，强调案例式的训战结合模式，包括设计一些标准化的培训培养项目，帮助个体成熟。</li></ul><h4 id="解读华为管理思想"><a href="#解读华为管理思想" class="headerlink" title="解读华为管理思想"></a>解读华为管理思想</h4><ul><li><strong>开放</strong><br>不把个人思想强加在别人身上，更多去倾听，去沟通，以开发的心态吸纳大家的智慧。</li><li><strong>妥协</strong><br>接纳不同的声音，听取和换位思考，激发团队成员的主动思考。</li><li><strong>灰度</strong><br>所有事情不是非黑即白的，找到一个对各方都最有利的方法</li></ul><h3 id="2-如何适配团队沟通风格"><a href="#2-如何适配团队沟通风格" class="headerlink" title="2.如何适配团队沟通风格"></a>2.如何适配团队沟通风格</h3><h4 id="团队管理中语言风格的误区"><a href="#团队管理中语言风格的误区" class="headerlink" title="团队管理中语言风格的误区"></a>团队管理中语言风格的误区</h4><ul><li><strong>认为严肃型语言风格有助于建立权威</strong><br>员工会觉得管理者呈现出强势的个性，或者觉得跟管理者有明显的沟通鸿沟，进而产生更大的距离感。</li><li><strong>认为随意型语言风格有助于建立和员工的连接</strong><br>会让员工觉得管理者说话缺少分寸感，甚至觉得专业性不够，进而降低团队对管理者工作能力的认可度</li><li><strong>认为复述型语言风格才能正确传递管理意图</strong><br>会让团队觉得管理者没有自己的管理思想，进而降低团队对管理者能力的认可度</li><li><strong>认为统一型语言风格有助于建立内部公平</strong><br>一致的风格忽视了个体认知能力、性格特点及抗压能力的差异,每个人的承受能力有差异</li></ul><h4 id="语言表述的“黄金圈法则"><a href="#语言表述的“黄金圈法则" class="headerlink" title="语言表述的“黄金圈法则"></a>语言表述的“黄金圈法则</h4><blockquote><p>人的思维分为三个层次：What、How和Why，<br>管理者要注意不能只是传递分配任务（What）的信息，而应该首先让团队明白，为什么要这么做（Why）</p></blockquote><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/circle.png"></p><h4 id="如何适配团队沟通的语言风格"><a href="#如何适配团队沟通的语言风格" class="headerlink" title="如何适配团队沟通的语言风格"></a>如何适配团队沟通的语言风格</h4><ol><li><strong>群体沟通</strong> 管理者首先要根据“黄金圈法则”来理顺 Why、How 和 What，沟通的过程要突出逻辑性、感染力和专业性三个要素<ul><li>针对<strong>逻辑性</strong> 可以考虑沟通的结构设计，从“总、分、总”这样的逻辑结构来设计内容，能让语言风格体现逻辑性</li><li>针对<strong>感染力</strong> 可以考虑在沟通中引用一些有哲理的名人名言，或者通过讲故事的方式，来唤起现场人的共鸣。</li><li>针对<strong>专业性</strong> 要在沟通前理顺沟通内容的前因后果，包括理论依据、数据资料等，做到有备而来。</li></ul></li></ol><p>1.1 <strong>群体沟通的三个工具</strong></p><ul><li><strong>头脑风暴</strong> 适合收集尽可能多的方案的场景，关注创新和个性。管理者向所有参与者阐明问题，说明会议的规则，创造融洽轻松的会议气氛。管理者先不发表意见，而是让每个与会者“自由”提出尽可能多的方案</li><li><strong>团队研讨</strong> 适合收集经过沟通讨论的方案，关注方案可行性。团队研讨分不同小组，管理者向各小组提出需要研讨的课题，说明研讨的时间和输出要求。各小组通常需要一名组长，由组长带着团队成员研讨。</li><li><strong>自我批判</strong> 这是极具华为特色的团队沟通工具，在企业文化落地和团队融合中非常适用。在自我批判中，每个人首先要对自己做深度剖析，提出自己的缺点和不足，然后再接受其他与会人员的客观公正的评价。这个互动沟通在华为各层级团队（包括高管）都定期开展，以确保华为能坚守企业核心价值观。</li></ul><hr><ol start="3"><li><strong>个体沟通</strong> 低情商的人讲道理，高情商的人懂共情<ul><li>和绩效差的沟通，先让他发言，从帮助他的维度出发，给他提建议，</li><li>提建议避免命令的方式，所有事情，只有自己想通了才有意义</li><li>给建议的时候，如果我来做的话，会这样，你可以参考一下。</li><li>管理者跟一个后进的个体沟通，专业程度已经不是最重要了，最重要的是情商</li><li>巧妙地通过共情这个语言风格的使用，就能让员工激发出巨大的潜能。</li></ul></li></ol><h3 id="3-如何具备团队管理的同理心-《刷新》"><a href="#3-如何具备团队管理的同理心-《刷新》" class="headerlink" title="3.如何具备团队管理的同理心 《刷新》"></a>3.如何具备团队管理的同理心 《刷新》</h3><blockquote><p>同理心体现在三个层次：微观的产品层面、中间的团队管理层面和宏观的技术及智能层面。<br>在团队工作中，没有人是一座孤岛，管理者需要走出去，与每个人面对面沟通，学会倾听员工的想法，建立团队共识</p></blockquote><p>如何理解同理心  </p><ul><li><strong>认知</strong><br>就是可以从对方的角度看问题，理解对方所说的，这属于智脑的认知</li><li><strong>情绪</strong><br>就是“我”与“你”感同身受，这属于情绪脑的认知</li></ul><h4 id="同理心的四个等级"><a href="#同理心的四个等级" class="headerlink" title="同理心的四个等级"></a>同理心的四个等级</h4><ol><li><strong>漠视他人的观点和感受</strong><br>表现不愿意倾听，很少从他人的角度思考问题，做事情完全不考虑他人的感受</li><li><strong>理解他人的观点，但漠视感受</strong><br>对对方所谈论的内容和问题会有反应，着重问题的解决，但会忽视对方的真实感受</li><li><strong>理解他人的观点，也理解他人的感受</strong><br>能够站在对方的角度考虑问题，想对方之所想，急对方之所急；能够用心倾听，让人觉得被理解、被包容。在安排事务时，也能尽量照顾到对方的需要，并愿意做出调整</li><li><strong>完全了解对方的内容和感受，而且比对方更深入</strong><br>人们往往不能清晰地认知自己，这个层次的人会比对方更深入理解他自己，能够领悟对方所有的音调、字眼、表情、语速和肢体语言等，可以根据这些线索进行重组、发问，并把感受反馈给对方，帮助对方更好地了解自己。</li></ol><h4 id="同理心应对的四步法"><a href="#同理心应对的四步法" class="headerlink" title="同理心应对的四步法"></a>同理心应对的四步法</h4><ol><li><strong>分析诉求</strong><br>这个员工可能的诉求是什么？是来求助？是来诉苦？还是来解压？或者其他什么目的？</li><li><strong>体会感受</strong><br>体会一下员工当时的心情和感受，他是无奈？惊慌？还是痛苦？或者其他？</li><li><strong>描述感受</strong><br>用语言描述你看到的他好的一面，描述事情的客观情况，以及你看到的他的状态、你对他的感受。</li><li><strong>鼓励沟通</strong><br>鼓励对方说出他的内心所想</li><li>同理心不等于同情心，同情心仅仅是一种精神层面的活动</li></ol><h4 id="华为的同理心领导力"><a href="#华为的同理心领导力" class="headerlink" title="华为的同理心领导力"></a>华为的同理心领导力</h4><ol><li><strong>产品层面</strong><br>正确看待自己的竞争对手</li><li><strong>团队管理层面</strong><br>员工没有十全十美，不完美的人也是英雄，管理者要了解员工的优缺点，鼓励员工试错，宽容他们的失败</li><li><strong>企业治理层面</strong><br>华为的股权激励，任正非个人仅持华为不到 1% 的股份，其余的股份由公司员工持有，共享利益，这样才能让员工和公司同频，形成强大的作战力量。</li></ol><h3 id="4-如何评估自己的优势和劣势"><a href="#4-如何评估自己的优势和劣势" class="headerlink" title="4.如何评估自己的优势和劣势"></a>4.如何评估自己的优势和劣势</h3><blockquote><p>认知自我是一件不太容易的事情，通过自我评价得出的答案有时也往往不够客观。<br>经理人反馈计划（Manager Feedback Program，简称MFP）</p></blockquote><h4 id="华为管理者如何进行优劣势评估"><a href="#华为管理者如何进行优劣势评估" class="headerlink" title="华为管理者如何进行优劣势评估"></a>华为管理者如何进行优劣势评估</h4><p>优秀管理者的 7 项行为标准</p><ol><li><strong>目标管理</strong> 确保员工理解自己的工作，指引员工设定清晰的工作目标与计划，以支撑公司的战略目标达成。</li><li><strong>沟通管理</strong> 倾听员工的声音，以尊重的方式提供坦率的反馈，解决他们的问题。</li><li><strong>培训发展</strong> 教练、指导并发展员工能力，帮助员工成长。</li><li><strong>绩效管理</strong> 设定明确的绩效标准，识别杰出贡献者， 并积极管理低贡献者。</li><li><strong>激励管理</strong> 设置有效的激励方案，对不同层次的贡献者给予相应的回报。</li><li><strong>鼓励创新</strong> 鼓励员工表达不同观点，鼓励创新，并支持员工将想法付诸实施。</li><li><strong>文化建设</strong> 培育团队协作精神与包容性，推动公司的价值观传承和文化落地。</li></ol><hr><p>MFP 的定位不是对管理者评价，而是一种反馈，或者说这更像是一种对行为的可量化的沟通。</p><ol><li><p>MFP 的操作流程</p><ol><li>向管理者的直接下属发布问卷,收集反馈（注意是匿名的哦）</li><li>人力资源部收集分析问卷，并形成分析报告</li><li>将分析报告反馈给管理者，并准备反馈会议；</li><li>组织召开反馈会议，在会上管理者和员工们进行充分沟通；</li><li>管理者根据反馈会议的建议，制定个人提升计划。</li></ol></li><li><p>MFP 问卷的内容(11 个打分项和 4 个开放问题)</p><ol><li>领导帮助我了解自己的工作内容如何为公司的战略以及我们组织的目标做出贡献</li><li>领导以尊敬的方式向我提供清晰的建设性反馈，以帮助我更好的工作</li><li>领导在我需要支持时能帮助我排忧解难</li><li>领导对我所做的贡献表示很欣赏</li><li>领导的言行举止值得我信任(例如，倾听和考虑不同的观点，公平公正，持续跟进，恪守承诺)</li><li>领导会根据需要帮助我在不同的组织和地理区域之间进行协作</li><li>领导鼓励我持续改进工作(例如，尝试更好的方法工作，支持我的新想法，并愿意承担一定风险)</li><li>领导和我一起，帮助我培养自己的专业知识并朝着自己的职业目标前进。</li><li>领导鼓励我表达不同的观点，和我的”双向”沟通非常有效</li><li>领导在所有员工中培育团队精神，及跨地域和跨文化的包容性，其决策和行为体现了公司的价值观</li><li>总体来说，你觉得领导的管理水平如何。</li><li>怎样才会使你的领导的工作变得更出色，请举例说明</li><li>你的领导怎样才能加强你对公司的贡献，改善你的工作满意度或者激励你努力工作，请举例说明</li><li>目前你的领导花多大精力在人员管理，培养团队方面，你的期望是多少</li><li>你认为你的领导可以在哪些工作上更多的对你进行授权。</li></ol></li><li><p>MFP结果反馈会<br>简单说 充分准备，真诚沟通，清晰总结，具体行动<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/MFP.png"></p></li></ol><h4 id="管理者如何有效扬长避短"><a href="#管理者如何有效扬长避短" class="headerlink" title="管理者如何有效扬长避短"></a>管理者如何有效扬长避短</h4><p><strong>木桶理论</strong></p><ul><li>应用到个体身上就是，要不断去寻求长板，如果确实有短板，可以把木桶斜着，让木桶的容量变大</li><li>在团队当中，团队的能力构成了一块块木板，团队管理者可以通过不同的组合搭配和人员调换，来减少能力短板，让木桶的木板越来越均衡，这样才能使团队能力越来越强。</li></ul><ol><li><strong>聚焦优势</strong></li></ol><ul><li>为什么你会有这些优势，是什么使你与众不同，</li><li>要花更多时间和精力培养团队，将个人的优势变成团队的优势，从而提高团队的整体能力</li></ul><ol start="2"><li><strong>规避劣势</strong></li></ol><ul><li>但要想准确和客观地了解自己，认清劣势是非常重要的</li><li>你要在团队内找到和自己能力互补的成员，形成团队作战，这样才能有效规避你的劣势</li></ul><ol start="3"><li><strong>找准机会</strong></li></ol><ul><li>管理者非常重要的工作包括：制定目标、制定工作策略和计划、进行团队人员的布局等</li><li>从这些工作内容出发，梳理要着重解决的问题，有意识地运用自己的优势</li><li>在你认为拿不定主意、找不到下手点的时候，听取他人给出的策略和建议</li><li>尤其在团队中遇到需要决策的点，要刻意提醒自己聚焦优势和规避劣势，在自己不熟悉或者不擅长的领域更多依赖团队的聪明才智，做到取长补短。</li></ul><h3 id="5-如何避开管理的4大误区"><a href="#5-如何避开管理的4大误区" class="headerlink" title="5.如何避开管理的4大误区"></a>5.如何避开管理的4大误区</h3><h4 id="团队管理的四个误区"><a href="#团队管理的四个误区" class="headerlink" title="团队管理的四个误区"></a>团队管理的四个误区</h4><ol><li><strong>管理者成了团队管家</strong>  </li></ol><ul><li><strong>错误行为</strong> 忙得焦头烂额，但团队绩效还是上不去。管理者遇到求助，会直接给出问题的答案，甚至直接代替员工进行操作。<ul><li>对于有潜力,希望成长的员工,可能无法进步,要授人以渔。</li><li>对于想混的人，会如鱼得水，只会让员工更懒，影响团队发展</li></ul></li></ul><ol start="2"><li><strong>管理者带领团队一起成了加班狂</strong></li></ol><ul><li><strong>错误行为</strong> 如果一个团队，天天加班，那一定是团队的管理出了问题</li><li><strong>反思</strong> <ul><li>目标与能力的匹配如何，加班过长，是不是目标和能力的匹配出问题了。</li><li>如果能力偏低，考虑如何帮助团队提升能力。</li><li>如果目标过高，考虑做目标分解，根据团队资源和人的优势特点，合理分配</li></ul></li></ul><ol start="3"><li><strong>过分强调“团队利益高于一切”</strong></li></ol><ul><li><strong>过分强调团队利益会导致个体利益受到忽视</strong>  <ul><li>员工作为团队的组成部分，如果员工的应得利益不能得到保证，其积极性和创造性无疑会遭受重创。影响团队凝聚力。</li></ul></li><li><strong>过分强调团队利益容易滋生小团队主义</strong><ul><li>对于单个团队而言，自身的团队利益就是全部，但对于企业而言，单个团队的利益却只是其中的一部分，</li><li>过分强调团队的利益，会造成团队与团队、团队与企业之间的价值目标错位，影响企业整体战略目标的达成。</li></ul></li></ul><ol start="4"><li><strong>管理者成了老好人</strong></li></ol><ul><li><strong>热衷于当和事佬，追求“你好我好大家好”的氛围，短期内团队矛盾确实不会爆发，但长久来说，对团队管理是有百害而无一利的</strong><ul><li>严重影响团队的士气，“好人”被压制，“坏人”必然就会神气</li></ul></li></ul><h4 id="如何规避团队管理的四大误区"><a href="#如何规避团队管理的四大误区" class="headerlink" title="如何规避团队管理的四大误区"></a>如何规避团队管理的四大误区</h4><ol><li><strong>当教练，而不是当管家</strong><ul><li><strong>给员工一定的压力</strong>  <ul><li>管理者有义务帮助员工成长，而适当的压力可以促进员工成长</li><li>每个人都是矛盾的集合体，都有追求自我价值实现的想法，但同时又有惰性，很容易缺乏动力</li><li>压力必须要恰当，如果巨大的压力让员工一直处于紧张、焦虑的状态的话，还会有适得其反的效果</li></ul></li><li><strong>以身作则</strong><ul><li>管理者本身必须是一个敢于承担责任，也善于承担责任的人</li><li>当管理者能够做出表率、成为团队的标杆时，员工也就有了努力的方向</li></ul></li><li><strong>培养员工的自信心</strong><ul><li>在员工取得成绩的时候，管理者也要从物质和精神层面给予适当的激励</li><li>员工的自豪感和成就感也是自我成长的重要推动因素。</li></ul></li><li><strong>让员工学会独立思考</strong><ul><li>为了培养员工，管理者需要不断抛出问题，让员工自己去思考，自己给出解决方案</li><li>只在适当的时候，给予一些启发和少量的指导</li><li>员工得到成长，管理者也可以考虑更多更深入的问题</li></ul></li></ul></li><li><strong>给授权，不当加班狂</strong><blockquote><p><strong>授权机制</strong> 让人尽其才、物尽其用，最终实现团队绩效最大化。</p></blockquote></li></ol><ul><li><strong>根据员工的能力和水平，给予相应水平的授权</strong><ul><li>明显超出或者低于员工水平的授权是不适合的，可能影响工作效果。</li></ul></li><li><strong>用人不疑，疑人不用, 充分的信任</strong><ul><li>出现一些偏差或错误，应该给予适当的指导</li><li>如果出现大的问题，则要及时调整授权策略，必要情况下通过审计等手段予以纠正。</li></ul></li><li><strong>责权对等</strong> 授权要和责任对等  <ul><li>员工得到了授权的同时，也需要承担对应的责任</li></ul></li><li><strong>尽量避免跨级授权</strong><ul><li>管理者只向直接下属进行授权</li><li>跨级授权会造成下级组织的职责被架空，容易导致管控混乱的问题出现</li></ul></li><li><strong>授权要明确具体</strong><ul><li>授权必须向被授权者、团队成员公开和明确所授权力的任务、目标、性质、职权范围和标准等</li><li>使被授权者工作时能有所遵循，并受到其他成员的监督</li></ul></li></ul><ol start="3"><li><p><strong>正确处理个体利益和团队利益的关系</strong></p><blockquote><p>个体利益和团队利益不是对立的,在团队里，管理者和员工的关系是协同的，双方都应该能站在对方的立场考虑问题：员工要更多考虑团队利益，管理者也要更多关注员工正常的诉求，以确保个体利益与团队利益的一致性</p></blockquote></li><li><p><strong>团队利益是从团队的成果中获得的，而不是来源于削减员工的正常利益</strong></p><ul><li>团队管理者本身也是个体，应该具备同理心，找到让团队和员工达成双赢的平衡点。</li><li>管理者要关注团队成员的工作，尤其在考核和激励上，要做到公平公正，以确保团队利益和个体利益的平衡</li></ul></li><li><p><strong>管理者应该为团队成员提供好的环境和机会</strong></p><ul><li>员工的积极性和才华的发挥有赖于团队的支持</li><li>管理者应该尽可能让员工的创造力得以发挥，最大限度地激发个体活力，确保员工能真正为团队利益做贡献。</li></ul></li><li><p><strong>在个体利益和团队利益发生冲突时，要引导员工以大局为重</strong></p><ul><li>团队目标的达成，可以为员工利益提供保障</li><li>优秀的员工都会有团队合作的精神，会与团队成员密切配合，来一起达成团队目标</li><li>管理者在人才招募和培养上要注意识别有团队精神的个体，要能培养员工的大局观，以及能构建有凝聚力的团队</li></ul></li><li><p><strong>不当“老好人”，坚持定规则</strong></p><ul><li><strong>提前亮出自己的原则与价值观</strong>，在员工加入团队的时候，就告诉他你的原则和立场</li><li><strong>遇到棘手的问题或重大冲突，不两头讨好，不随便妥协</strong> 宁可滞后解决，也不要打太极</li><li><strong>制定明确的规则、流程与制度</strong><ul><li>尽可能依据制度处理，减少人为的干预</li><li>从经常发生的典型问题中，梳理和总结流程、制度、规则上的缺陷和不足，及时加以完善和纠偏。</li><li>再通过制度建设和流程再造，机制性地解决问题，这样至少可以减少类似问题的发生。</li></ul></li></ul></li></ol><h3 id="6-团队管理的-8-项基本能力"><a href="#6-团队管理的-8-项基本能力" class="headerlink" title="6.团队管理的 8 项基本能力"></a>6.团队管理的 8 项基本能力</h3><p><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/ability.png"></p><ol><li><p><strong>人性理解力和人际连接力</strong></p><blockquote><p>管理不但要管事情，还要管人。支撑“员工激发者”这个角色的两个能力分别是人性理解力和人际连接力</p></blockquote><ul><li><strong>人性理解力</strong> 优秀的团队管理者应该具备了解员工工作动机、意愿、兴趣爱好、优势和劣势的能力</li><li><strong>人际连接力</strong> 基于对员工理解的基础上，能够走进员工的内心，让员工愿意把你当成可以坦诚沟通和交流的对象，做到有效的连接</li><li><strong>如何提升</strong><ul><li><strong>要重视人性理解力的提高</strong><ul><li>理解一个人，要了解他的家庭背景、教育背景、生活和工作经历等，这些很能影响一个人的性格。</li><li>还要从动机理论上去理解一个人，即在分析一个人的行为时，要能从深层次理解他的所思所想。</li></ul></li><li><strong>管理者要有开放的心态和包容的胸怀，要能听得进不同的声音，甚至要能直面批评和指责</strong><ul><li>放下身段，让员工感觉没有距离感</li><li>日常管理工作中，要多创造机会让员工跟你进行沟通交流。</li><li>每天团队下午茶的 Free talk、每周半天的管理者 Open day 等，都是非常好的做法。</li></ul></li></ul></li></ul></li><li><p><strong>沟通影响力和组织协同力</strong></p><blockquote><p>作为“组织融合者”，管理者需要具备沟通影响力和组织协同力。需注意，这两个力是有前后顺序的，沟通影响力在前，组织协同力在后。  </p></blockquote><ul><li><strong>沟通影响力</strong> <ul><li>通过和员工的有效沟通和对话，去影响员工的思想和行为。借助团队的力量来完成组织的目标。</li><li><strong>如何提升</strong><ul><li><strong>聆听</strong><ul><li>只听懂字面意思，不代表你能听懂了别人的内心。</li><li>在听完对方的话后，可以试着问一句，“我这么理解，你看对不对？”</li></ul></li><li><strong>表达</strong> 表达的逻辑性是重点<ul><li><strong>结论先行</strong> 让对方快速理解你的想法，减少对方对你意图的误判，也就减少跑题的可能性。</li><li><strong>点不过三</strong> 总结不超过三点，因为过多、过杂的点会让沟通效果明显下降。</li><li><strong>换位表达</strong> 站在对方的角度思考问题，要思考什么样的表达能让对方更容易理解。</li></ul></li><li><strong>互动</strong> 明确地告诉对方，双方的分歧点在哪儿，征求对方的意见后，给出自己的解决方案。</li><li><strong>共识</strong> 达不成共识，在沟通中找到双方利益的交集是核心。<ul><li>着眼于利益而不是分歧，能提高达成共识的可能性。</li><li>沟通影响力的大小，不在于完全把自己的思想强加在他人身上，而是循序渐进地强化影响，</li></ul></li></ul></li></ul></li><li><strong>组织协同力</strong><ul><li>除了影响个体以外，更强调的是影响一个群体以及群体与群体之间关系的能力</li><li>要求管理者具备构建协同机制、协同目标、协同资源和协同工作节奏的能力。</li></ul></li></ul></li><li><p>目标分解力和员工赋能力</p><blockquote><p>管理者履行“目标管理者”角色时，首先需要理解公司目标，并分解到团队目标，进而再到个人目标，最终形成可落地的目标，这就是管理者需要具备的目标分解力。</p><ol><li><strong>方向一致</strong> 由总目标分解成各子目标过程中， 必须确保各目标的一致性。</li><li><strong>进度统一</strong> 各分解目标是紧密相关的，必须过程同步，一步步靠近总目标。</li><li><strong>责权对等</strong> 承接目标的个体，必须对目标负责，同时享有和责权对等的权力或一定的授权。</li></ol></blockquote></li></ol><ul><li>对于一些难度较大的目标，管理者首先要识别能承担这个目标结果的人，如果找不到合适的人选，管理者就需要亲自牵头来完成。</li><li>不同能力和特点的人，适配相应的工作内容。基于工作具体内容和轻重缓急，安排合适的员工。比如，有些员工适合做流程性的工作，而有些员工适合做开创性的工作，那么在目标分解的过程中，就要有意识地进行目标和人的适配。</li><li>针对不同的个体，赋能的方式各有不同。针对职场小白，可以采取培训、导师带教等方式；而针对有经验的人，可以选择专题讨论或头脑风暴等方式。</li><li>赋能不是简单地把答案告诉员工，而是要引导员工理顺思路、理解工作流程、方法和工具。最后员工通过实践去理解和形成了自己的能力，并能举一反三。</li></ul><ol start="4"><li><p>科学评价力和有效激励力</p><blockquote><p>管理者在履行“结果评价者”这个角色时，需要做两件很重要的事情：①对结果的评价，②对人的激励。这分别对应科学评价力和有效激励力。</p></blockquote><ul><li>绩效评价是对事情的评价，而不是对人的评价。</li><li><strong>如何做好</strong><ul><li><p>评价要有客观依据，而非以管理者自己感性的认识去评价；</p></li><li><p>评价标准要科学可量化，评价维度要多元，避免个体的认知偏颇；</p></li><li><p>评价过程要公平和公正，评价结果要公开。</p></li><li><p>有效激励力, 内部和外部两种驱动力。激励是要在公平的原则下，做差异化设计的。</p><ul><li>区分不同岗位的工资标准。结合外部薪酬水平和公司的薪酬定位，确定团队中不同岗位的工资标准，并每年刷新迭代。</li><li>区分员工和管理者的奖金浮动比例。通常管理者的奖金浮动比例要高于普通员工，越是高层的岗位，奖金的浮动比例应该越高。</li><li>区分总部和外派的津贴差异等。通常来说，应该给外派员工更多的津贴，以支持外派政策的实现。以华为为例，它的外派员工可以享受离家补助、伙食补助、住房补助等多项津贴。</li></ul></li><li><p>最大化激励效果</p><ul><li>在<strong>精神激励</strong>上，加大对日常工作的及时反馈，对员工能及时给予肯定、点赞和表扬，让员工感受到持续的激励力量；</li><li>在<strong>机会激励</strong>上，尽可能让员工参与更重要的工作或项目，给予更大的工作自主权，让员工感受到信任和使命的力量。</li></ul><h4 id="如何提高这些管理能力"><a href="#如何提高这些管理能力" class="headerlink" title="如何提高这些管理能力"></a>如何提高这些管理能力</h4></li></ul></li></ul></li><li><p>多读一些经典的管理书籍，比如德鲁克管理学系列丛书就是一个非常不错的选择。</p></li><li><p>多向你的上级或者有经验的前辈请教，了解他们遇到相关问题时的解决办法以及心得体会。</p></li><li><p>你也可以像现在这样，多听一些外部管理学者的课程或者讲座，体系化地去理解管理的逻辑架构。</p></li><li><p>在不断的应用过程中深化你对这些能力的理解，真正做到“有认知、有逻辑、有方法、有实践”，最终形成自己扎实的能力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="2022/04/06/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BF%AE%E8%A8%80/"/>
      <url>2022/04/06/%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BF%AE%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前端设计模式"><a href="#前端设计模式" class="headerlink" title="前端设计模式"></a>前端设计模式</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>程序员的核心竞争力 </p><ul><li>编码能力   健壮的代码解决具体问题</li><li>设计思维   抽象的思维应对复杂的系统</li><li>计算机基础 工程化思想规划更大规模的业务</li></ul><p>而设计模式可以帮助我们写出健壮的代码，这样看来我居然是第一阶段都还没到。</p><ul><li>基本围绕着 单一职责 开放封闭 2个原则</li><li>核心思想 封装变化</li></ul><h3 id="创建型-工厂模式"><a href="#创建型-工厂模式" class="headerlink" title="创建型-工厂模式"></a>创建型-工厂模式</h3><ul><li>构造器解决是多个对象实例的问题</li><li>简单工厂模式解决多个构造器的问题</li><li>抽象工厂 完美的践行开放封闭原则<ul><li>抽象工厂 申明共性</li><li>具体工厂 实现抽象工厂</li><li>抽象产品 抽象类，申明个性</li><li>具体产品 进行生产</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.跟着华为学管理-铁军养成</title>
      <link href="2022/04/06/%E7%AE%A1%E7%90%86/3.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E9%93%81%E5%86%9B%E5%85%BB%E6%88%90/"/>
      <url>2022/04/06/%E7%AE%A1%E7%90%86/3.%E8%B7%9F%E7%9D%80%E5%8D%8E%E4%B8%BA%E5%AD%A6%E7%AE%A1%E7%90%86-%E9%93%81%E5%86%9B%E5%85%BB%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="3-跟着华为学管理-铁军养成"><a href="#3-跟着华为学管理-铁军养成" class="headerlink" title="3.跟着华为学管理-铁军养成"></a>3.跟着华为学管理-铁军养成</h2><h3 id="1-如何设计团队组织架构"><a href="#1-如何设计团队组织架构" class="headerlink" title="1.如何设计团队组织架构"></a>1.如何设计团队组织架构</h3><ul><li>领导模式都需要在一个适合自己企业发展的组织中来推行，如果组织架构不合理，那很多管理措施和手段的推行效果就会大打折扣，甚至可能会做很多的无用功。</li><li>组织架构是指组织内部各个部门和层次之间的构成方式，</li><li>组织架构的有效性是一个组织能够高效运转并取得良好绩效的先决条件。</li></ul><h4 id="项目型组织架构"><a href="#项目型组织架构" class="headerlink" title="项目型组织架构"></a>项目型组织架构</h4><ul><li>当一个团队或企业的组织架构是依托项目而设立的，并且团队中的绝大多数工作都是围绕项目进行的，那这种就属于项目型组织架构。</li><li>这样的组织架构更适合初创的小规模企业<ul><li>企业人员少</li><li>以项目立业,内部的目标也非常清晰</li><li>这个阶段的企业，本身职责和边界就是不清晰的，完成企业的目标</li></ul></li><li>项目型组织架构的优点<ul><li>以项目为主，目标明确，沟通顺畅</li><li>结构简单，责权分明，利于统一指挥</li><li>决策快速，管理简单，比较适合初创企业</li></ul></li><li>项目型组织架构的不足<ul><li>各项目之间存在一些“壁垒”，不是那么容易沟通或进行能力共享等操作；</li><li>项目是一种周期性的工作，缺乏连续性，会给员工带来不稳定的感受。</li><li>随着企业的发展和壮大,这种简单高效但却较为粗放的管理模式会渐渐拖累企业和项目的长期发展</li></ul></li></ul><h4 id="职能型组织架构"><a href="#职能型组织架构" class="headerlink" title="职能型组织架构"></a>职能型组织架构</h4><ul><li>介绍<ul><li>当企业发展到一定阶段以后，人员规模壮大、对专业化人才的需求，以及所面对的客户群体的多样性，都对企业的管理提出了更高的要求。</li><li>此时，企业会对管理方式进行大的改变，按照各专业要求的不同，划分不同的职能部门，这就是职能型组织架构。</li><li>有利于企业内部知识的积累和传承，也有利于人才的快速培养，是目前很普遍的组织架构。</li><li>这些企业有一个特点，基本上都是生产类企业，并且是相对传统的产品或行业，生产的重复性较高，在行业内的专业性也比较强，短期内没有太多的生存压力。</li><li>职能型组织架构所特有的高度专业性、秩序感对于重复性生产（包括实体产品和软件等）为主的企业是非常有利的。</li></ul></li><li>职能型组织架构的优点<ul><li>各部门的专业性很强，内部交流顺畅；</li><li>员工的职业发展通道比较清晰；</li><li>责权利的划分很清晰；</li><li>有利于重复性工作为主的过程管理。</li></ul></li><li>职能型组织架构的不足<ul><li>组织的专业性强但比较死板，不能有效地求新、求变；</li><li>部门利益优先，不利于业务的统筹推进；</li><li>各职能部门横向联系薄弱，部门间协调难度大；</li><li>项目经理的资源调配能力弱，管理难度大。</li></ul></li></ul><h4 id="矩阵型组织架构"><a href="#矩阵型组织架构" class="headerlink" title="矩阵型组织架构"></a>矩阵型组织架构</h4><ul><li><p>介绍<br>-融合了前面两种组织架构的优点，既有按职能设置岗位的职能模式的特点，又有按项目划分的项目型组织的特点，</p><ul><li>从结构上看，构成了一个纵横交叉的体系，所以被称为矩阵型组织架构。</li><li>这种组织架构是把资源配置和资源使用这两个维度做了有效结合。</li></ul></li><li><p>矩阵型组织架构的优点</p><ul><li>组织内按照项目运作，机动、灵活，可随项目状态设立或解散</li><li>任务清楚，目的明确，人员专业性强，可以有效促进项目的实现</li><li>加强了不同部门之间的配合和信息交流，克服了职能型组织中各部门互相脱节的现象。</li><li>有着项目型的灵活高效，以及职能型的专业和有序</li></ul></li><li><p>矩阵型组织架构的缺陷：对于组织管理能力的要求非常高。</p><ul><li>员工面临多头领导，管理难度显著增加，管理成本高</li><li>对员工的绩效难以有效监测</li><li>资源分配与项目优先的问题产生冲突</li><li>责权利难以保持平衡</li><li>华为在发展的这几十年间，一直通过跟国内外的管理咨询公司合作，来不断提升自身的管理水平和能力，使得矩阵型组织架构在华为得到了很好的运作，通过各种机制保证了项目运作的专业性和敏捷性。<br><img src="/images/%E7%AE%A1%E7%90%86/%E5%8D%8E%E4%B8%BA/huawei-org.png"></li></ul><h4 id="事业部制组织架构"><a href="#事业部制组织架构" class="headerlink" title="事业部制组织架构"></a>事业部制组织架构</h4></li><li><p>介绍</p><ul><li>按产品（比如，美的集团）或区域（比如，中兴通讯）设立事业部，每个事业部都有自己较完整的职能机构，具有较大经营自主权；</li><li>总部，则只掌握重大问题决策权，从而能从日常生产经营活动中解放出来</li><li>事业部制适用于规模庞大、品种繁多、技术复杂的大型企业。</li><li>组织结构的基本原则是“集中决策，分散经营”，也就是说，重大事项由集团公司最高决策层进行决策，事业部独立经营核算。</li><li>对于大型企业和集团，在产品繁复、区域广阔的情况下，事业部制是一个非常值得考虑和采用的组织架构。</li><li>事业部制对于管理能力的要求也非常高，同时也要把事业部制容易出现的人员冗余等问题提前考虑好，否则，在大集团或大企业内部会出现严重的资源浪费问题。</li></ul></li><li><p>事业部制的优点</p><ul><li>总公司领导可以摆脱日常经营事务，可以更多思考战略性问题；</li><li>各事业部独立核算，更有积极性，更加专业化，内部协调方便；</li><li>事业部间有竞争，有利于企业的发展；</li><li>有利于人才的培养和发展。</li></ul></li><li><p>事业部制的缺点</p><ul><li>总部与事业部的职能机构有重叠，人员会浪费；</li><li>独立性强，容易忽视企业整体利益；</li></ul></li><li><p>过于强调经济利益，事业部间协调难度大。</p></li></ul><h4 id="新型组织架构"><a href="#新型组织架构" class="headerlink" title="新型组织架构"></a>新型组织架构</h4><ul><li>平台型组织<ul><li>滴滴 抢单机制</li><li>华住</li></ul></li><li>生态型组织</li><li>学习型组织</li><li>共生型组织 陈春花</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>优秀的组织架构并没有固定的模式，但会有如下一些共性。</p><ul><li>组织目标明确： 不管采用何种组织架构，共同目标需要明确。</li><li>团队互相信任： 在组织内部，不管是团队内部还是团队之间，有很强的信任机制。</li><li>业务稳定发展： 当前的组织架构有利于企业的业务统筹推进和稳定发展。</li><li>运作效率提高： 组织能够高效运转并取得良好绩效。</li></ul><h3 id="2-如何构筑团队文化氛围"><a href="#2-如何构筑团队文化氛围" class="headerlink" title="2.如何构筑团队文化氛围"></a>2.如何构筑团队文化氛围</h3><p>要判断这样的口号是不是真正的团队文化，关键在于：它是不是已经在团队内部成为一种共识，一种根植在团队成员潜意识里的想法？大家在工作的时候是不是真的在围绕着这样的口号来实践？如果是，那就是真正的团队文化；如果不是，那就仅仅是贴在墙上的口号而已。</p><h4 id="如何构建"><a href="#如何构建" class="headerlink" title="如何构建"></a>如何构建</h4><ol><li><strong>价值观提炼</strong></li></ol><ul><li>团队文化最终都一定要跟创业的初心以及做这个事情的愿景相结合。</li><li>华为公司的价值观是：以客户为中心，以奋斗者为本，长期艰苦奋斗，坚持自我批判。在这个价值观的指引下，华为的每个部门基于自己的业务特色，都形成了具有自身组织特色的价值观和文化理念。<ul><li>华为的市场团队，素以“英勇善战”闻名，被外界称为“狼文化”的代表。在市场部内部，“胜则举杯相庆，败则拼死相救”的口号很深入人心，</li><li>华为的研发团队，持之以恒、孜孜不倦地投入研究，很多时候要花费几年甚至十几年的时间才能看到成果，因此研发团队的特色文化是“板凳要坐十年冷”</li><li>供应链团队，工作是及时准确地交付高质量的产品，这个过程中不仅要求团队持续提高产品的质量，而且还要逐渐降低成本，因此供应链团队的特色文化是“持续改进，精益求精”。</li><li>消费者业务 BG，团队不断地求新求变，以满足消费者快速变化的需求，因此消费者业务 BG 信奉的文化理念是“Nothing is impossible（没有什么不可能）”。</li><li>基于公司的价值观，结合团队的工作特性，提炼出属于团队自己的文化表述。</li></ul></li></ul><ol start="2"><li><strong>文化成形</strong><ul><li>真正的团队文化是在工作中逐渐形成的</li></ul></li><li><strong>文化强化</strong><ul><li><strong>正向强化</strong><ol><li><strong>在团队的日常运作中，要尽量以团队文化作为行为的标准。</strong>做最终决策的时候就要考虑跟团队文化导向是否匹配的问题。这样的决策过程就是对文化的正向强化。</li><li><strong>对于符合和认同团队文化，并将其运用到工作实践中的员工，要在精神和物质层面进行鼓励、表扬和激励</strong></li></ol></li><li><strong>负面强化</strong> 热炉效应<ul><li>在企业的管理中，如果有人打碎了规则和底线的“第一扇窗”，而没有被惩罚的话，那么接下来面对的将是“破窗效应”带来的“千疮百孔”；</li><li>而对违反团队文化和价值观行为的负面强化和“小题大做”，就可以真正有效地避免“破窗效应”的发生。</li></ul></li></ul></li><li><strong>文化传播</strong><ol><li>当通过工作过程形成了团队文化，并且不断得到加深和加强，真正变成了企业的内在精神以后，</li><li>我们还应该把这些积极的、正面的东西传递出去，使得原本小范围内的团队文化可以得到扩大，从而有更大的影响力。</li></ol></li></ol><h3 id="3-如何激发团队个人活力"><a href="#3-如何激发团队个人活力" class="headerlink" title="3.如何激发团队个人活力"></a>3.如何激发团队个人活力</h3><p>有了个体活力，才有组织活力，才能促进组织的业绩达成。但关键时刻总会有卓越的领导者或教练带领大家走出低谷，去攀登另一个高峰。</p><ol><li><strong>明确组织发展目标</strong><ul><li>确定业务规划，带领团队进步和突破，让员工能看到组织发展的前景。只要企业有发展，团队就会更有活力，也就有更多的能动性。</li><li><strong>方向大致正确</strong> 方向很难要求绝对正确，在一定时间内或许有偏差。</li><li><strong>组织充满活力</strong> 有了自己的纠错能力，就能让方向不至于产生大的偏差，避免企业发展“错误”出现。</li></ul></li><li><strong>帮助员工理解和做好工作</strong><ul><li>首先得让员工知道要做什么，以及为什么要做这个事情。</li><li>要经常关注员工工作中的状态，要注意他们的情绪，也要去发现他们是否在工作中遭受了大的挫折，进而<strong>“对症下药”，对员工进行持续干预，并且给予及时的反馈和帮助</strong>。</li></ul></li><li><strong>让员工远离舒适圈</strong><ul><li>员工就进入了舒适圈,考虑给员工一些有挑战性的工作任务</li><li>在安排工作的时候，团队的一些工作不一定就只安排给一个人，可以考虑安排给不同的人，这样不同员工之间能够互相取长补短，能力也更加均衡。</li><li>轮岗制<ul><li><strong>业务轮换</strong><ul><li>研发人员去做测试、服务，从而让研发人员能真正理解研发工作跟测试、服务的衔接，同时，也可以把研发的一些管理经验和思想带到测试和服务岗位。</li><li>对于员工而言，在新的岗位上，工作内容和工作方式跟原来都有了很大的变化，员工会更有新鲜感，从而可以更加全身心投入工作中。</li></ul></li><li><strong>区域轮换</strong><ul><li>将总部的员工派去海外和一线工作，这样可以把总部的管理方法和思想带到一线，也可以把一线的想法反馈回总部</li><li>并且一线的工作更加贴近客户，节奏更快，也更有挑战性，这也会推着员工不断努力进步。</li></ul></li><li>在华为，要成为管理者，是必然要有多个部门、多个区域的工作经历的，所以员工是愿意被“轮岗”的。也正是通过这样的方式，华为员工才能不断保持工作活力。</li></ul></li></ul></li><li><strong>提升员工的工作需求层次</strong></li></ol><ul><li>马斯洛需求层次理论来看，当员工的温饱、生存等基本需求得到满足以后，就会有更多的外部需求，这些需求就是他们新的工作动力</li><li>作为管理者，就要考虑如何进一步赋予员工工作更高层次的意义，否则，员工还是会慢慢失去活力和动力的。</li><li>2019 年，华为内部评选出了“全球十佳食堂”和“金牌厨师”。</li></ul><ol start="5"><li><strong>让年轻员工发挥主观能动性</strong></li></ol><ul><li>在物质激励以外找到符合他们心理特征的激励方式，帮助他们提高工作动力和活力。</li><li>在安排工作的时候，可以提前做好沟通，然后再安排一些员工自己觉得很有价值、很重要，并且之于员工自己的位置还非常关键的工作。</li><li>在必要的时候，管理者要学会放手，愿意把一些重要的事情交给年轻人操刀。</li><li>还可以调动相关的资源和团队的力量来配合员工。</li></ul><h3 id="4-如何提高团队抗压能力"><a href="#4-如何提高团队抗压能力" class="headerlink" title="4.如何提高团队抗压能力"></a>4.如何提高团队抗压能力</h3><ol><li><strong>管理层对压力要积极应对</strong></li></ol><ul><li>管理者也是团队应对压力的第一责任人,遇到危机，一定要身先士卒</li></ul><ol start="2"><li><strong>团结一致对抗压力</strong></li></ol><ul><li>首先，从员工的主观感受层面，员工只有高度认同企业的核心价值观和企业文化，才能从内心深处真正做到对企业的认同。<ul><li>“以客户为中心，以奋斗者为本，长期艰苦奋斗，坚持自我批判”“胜则举杯相庆，败则拼死相救”等理念被员工高度认可，这是员工持续保持高昂斗志的精神支柱。</li></ul></li><li>另外，从员工利益层面，当员工和公司的利益统一的时候，员工就会和公司共同努力奋斗。<ul><li>华为在公司内部长期坚持的是“不让雷锋吃亏”“给火车头加满油”的管理思想</li><li>通过合理的价值分配，包括员工持股计划、时间单位计划等形式，把企业经营的收益跟员工分享，从利益层面，把员工和公司绑定在一起。</li></ul></li></ul><ol start="3"><li><strong>分析压力找到解决办法</strong></li></ol><ul><li>当分析清楚压力后，就要针对这些来源采取必要的措施，将问题解决。<ul><li>该把应对压力的工作做细分，交给团队或员工的可以是其中的一小块任务，这样完成起来会相对容易，感受到的压力也会比较小</li></ul></li></ul><ol start="4"><li><strong>用压力激发个体潜力</strong><ul><li>在战略上要藐视敌人，但在战术上要重视敌人，压力让我们意识到自己的不足。</li><li>适当的外部压力也会激发组织和个体的潜力，帮助每个人更好地成长。</li></ul></li></ol><h3 id="5-如何强化团队协同互助"><a href="#5-如何强化团队协同互助" class="headerlink" title="5.如何强化团队协同互助"></a>5.如何强化团队协同互助</h3><p>“周边协同”，指的是团队内部、团队与团队之间，员工互相帮助、互相协同的行为，以取得更佳的工作成果和效率。</p><ol><li><strong>提高协同意识</strong><ul><li>团队精神是在招聘的时候就会特别强调的个人基本素质，并且在后续员工培训的时候，也无时无刻不在强调团队协同。</li><li>团队协作、群体奋斗和鼓励求助</li><li>信息分享，配合他人，善于学习，有包容心，主动求助，乐于助人，遵从规则。</li><li>新员工培训的时候，还有一些强调团队协作的游戏和比赛，比如，拔河、旱地龙舟、辩论赛等，全部都是以集体为单位来 PK 的，都是在不断强调协同的重要性。</li><li>是用制度强化、用文化牵引的。</li></ul></li><li><strong>设计协作机制</strong><br>建立一套让团队协作可以顺利且有效开展的制度和流程。</li></ol><ul><li><strong>导师制度</strong> 全员导师制<ul><li>不仅仅是在工作时间实行，给新员工工作上的帮助；同时也会在生活和思想上给员工以指导，帮助员工在这些方面都能得到快速的提高。</li><li>也会在生活和思想上给员工以指导，帮助员工在这些方面都能得到快速的提高。</li><li>通过制度来保证“导师制”运作的有效性<ul><li>作为导师，需要经过上岗认证才有资格正式带徒弟；</li><li>每年还会对优秀导师进行评选，记录在带教过程中出现的正、反面的关键事件，做得好的导师，会被优先考虑提拔为基层干部。</li></ul></li></ul></li><li><strong>“铁三角”模式</strong> 以客户经理、解决方案专家/经理和交付专家/经理为三个顶点的“三角形组织模型”有着很强的稳定性，这就是后来大名鼎鼎的“铁三角”模式。<ul><li>在这一核心团队中，第一责任人由直接面向客户的客户经理担任，解决方案专家/经理和交付专家/经理全力协同。</li></ul></li><li><strong>组织绩效优于个人绩效</strong><ul><li>华为的考核和激励体系，对于组织的考核和激励是优先于对个人的。</li><li>华为的考核不仅仅是考个人，更是考团队。<ul><li>如果团队的考核结果不理想，作为团队的个体，也很难有很好的考核结果，甚至团队考核结果不好，团队内打 C 和 D（考核结果较落后）的比例也会相应增加。</li></ul></li></ul></li></ul><ol start="3"><li><strong>文化和激励牵引</strong></li></ol><ul><li>华为企业文化强调的是群体奋斗<ul><li>华为内部有一个“最佳协作奖”，就是专门奖励在工作中团队协作方面做得出色的团队或组织；</li><li>“金牌团队奖”，奖励的是以团队为单位，在年度工作中为公司做出突出贡献的集体。</li></ul></li><li>奖金分配上采用“获取分享制”<ul><li>任何组织与个人的物质回报都来自为客户创造价值的项目，各级组织凭价值创造过程中所做的直接或间接贡献分享奖金。</li><li>一线团队根据经营结果获取奖金，后台支撑部门通过为一线团队提供服务分享奖金。</li></ul></li></ul><ol start="6"><li><strong>如何处理团队矛盾冲突</strong></li></ol><ul><li>对于管理者而言，具备好的冲突管理技能，对于团队能力的提升和组织绩效的发展都有着非常重要的作用</li><li>冲突方式<ul><li><strong>业务方向的冲突</strong> 特别是企业在变革转型期，业务发展的方向不明确的时候，容易出现较大的内部冲突。</li><li><strong>关键举措的冲突</strong> 即使大家都认可统一的战略目标，但在实施路径上思路不一致，矛盾也会很容易暴露出来。</li><li><strong>团队间利益的冲突</strong> 屁股决定脑袋，从局部视角看，他们的道理都是充分的；但站在企业全局角度，这种冲突可能会导致企业整体利益受损。</li><li><strong>团队内个人间的冲突</strong> 主要是沟通不畅、思想不一致带来的</li><li>首先要从思想意识层面入手，然后再辅以有效的工具方法</li></ul></li><li><strong>思想意识层面</strong><ul><li><strong>理性面对冲突</strong><ul><li>在看待矛盾和冲突的过程中，一定要客观理性。矛盾和冲突的解决与否不能以冲突是否显性为标准。</li><li>冲突是发展、变化或创新带来的副产物。</li><li><strong>分类</strong><ul><li><strong>建设性冲突</strong><ul><li>这种冲突中的员工，有着比较一致的价值观和目标，仅仅由于工作方法的差异、思想的碰撞，导致了冲突的产生。</li><li>管理者应该帮助员工沟通、改进或改变工作方法，从而更好地在解决冲突的过程中，提升员工之间的竞争意识，提高组织绩效。</li></ul></li><li><strong>破坏性冲突</strong><ul><li>有着不一样甚至完全背离的价值观和组织目标，同时，这样的冲突往往伴随着思想对立和情绪化，对于组织目标的实现有着巨大的负面作用。</li><li>管理者要快刀斩乱麻地去解决，如果任由其发展，可能会使得冲突不断扩大和影响到其他人，造成组织氛围的恶化。</li></ul></li></ul></li></ul></li><li><strong>就事论事，公开沟通</strong><ul><li>要做到就事论事，只讨论导致冲突的具体问题，不做扩大化。特别是不能放任冲突上升到人身攻击层面，同时也不能翻旧账。</li><li>作为管理者，你要能够帮助员工把冲突的范围限定在具体的问题上，并且尽量让员工相互之间没有敌意，可以坐下来理性地沟通，这就已经取得了解决冲突的第一步胜利。</li><li>还需要遵循几个原则：就事论事，公开讨论，兼听则明。</li></ul></li></ul></li><li><strong>工具方法层面</strong><ul><li><strong>通过固化流程和制度化解冲突</strong><ul><li>有了沟通途径，并不一定就能解决矛盾和冲突。在沟通的基础上，你还需要做进一步分析，了解矛盾和冲突的来源；</li><li>分析清楚来源以后，要在组织内部寻找到解决措施，这样的措施不仅要解决当前的冲突，还要能够避免和预防未来可能的冲突。<ul><li>华为“铁三角”模式</li><li>IPD 变革，从产品研发的最初阶段，就要从需求端进行把控，各个不同的部门，包括市场、销售、研发、测试、生产、服务等相关部门，都要在评审中参与并提出意见。</li></ul></li><li>你要清楚地知道问题的根源，在找到解决问题的方法以后，就需要以自身的领导者地位，来推进“以机制解决问题，以流程固化措施”的方式，使得冲突双方能够主动合作，实现共赢。</li></ul></li><li><strong>合理“制造冲突</strong><ul><li>这里所谓的“制造冲突”，是基于团队内部的建设性冲突而言的。</li><li>适当的冲突可以帮助管理者从不同角度看到问题的多个方面，可以有效帮助决策，也可以促进团队的创新和变革。</li><li>对于员工而言，建设性的冲突可以激发员工的潜能，帮助员工更好地投入学习和竞争中，从而进一步提升团队的组织绩效。</li><li>某些时候制造一些建设性的矛盾冲突，对于组织的发展也是很有好处的。</li><li><strong>华为蓝军</strong> 用放大镜甚至显微镜看问题，提出“冲突性观点”，引发相关部门的关注和思考，避免后续发展走弯路。通过这样的方式，华为的战略制定会更加严谨。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 通用能力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react重学</title>
      <link href="2022/03/28/%E6%8A%80%E6%9C%AF/react-%E4%BF%AE%E8%A8%80/"/>
      <url>2022/03/28/%E6%8A%80%E6%9C%AF/react-%E4%BF%AE%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="react-重学"><a href="#react-重学" class="headerlink" title="react 重学"></a>react 重学</h2><ul><li>what react是什么 <ul><li>react是一个视图库，使用了jsx，jsx本身是js的一种拓展</li><li>createElement 内部处理了props，children，type</li><li>生命周期的顺序 父子</li><li>生命周期的弊端 </li><li>fiber架构 同步递归的进程占用 改为异步可中断的链表</li><li>hooks的发展 类组件与函数组件的区别 ui=render(data)<ul><li>why class模板的上手难度搞，生命周期的顺序</li><li>why this上下文的变化，难以控制</li><li>why 函数是把数据和渲染绑定到了一起</li><li>what 链表式的状态存储，所以顺序不能变  mountState updateState</li></ul></li><li>虚拟dom<ul><li>why 数据驱动视图 通用的跨平台描述</li><li>what 描述dom的数据结构 dom级渲染会比js计算开销少，但是缓冲</li></ul></li><li>diff <ul><li>what 协调的一部分</li><li>复杂度o3降低 只比较同级别的节点 只比较类型一样的节点</li></ul></li><li>setState  是异步的，多个会合并，被包在wrapper内部，执行过程会被打标记，而微任务和异步，会让执行顺序延后，</li><li>fiber架构动机 从同步reconciler到scheduler优先级调度</li><li>render如何渲染链路 render 三个模式 legacy 执行过程被打标记了 concurrent<ul><li>legacy 是同步渲染的，</li><li>concurrent是异步渲染， fiber是一个兼容异步和异步的设计</li><li>workInProgress树， 创建fiberRoot 和current 通过 alternate关联</li><li>fiberRoot是一个链表树，深度优先递归，child nextSlibing returnNode，收集effectList，副作用链表,</li><li>scheduler  采用双缓存 复用节点， 通过时间切片，优先渲染，让出进程，通过小顶堆的结构，取得优先级高的渲染进程</li><li>虚拟dom 合成事件委托 document 元素dom nativeEvent<ul><li>抹平了不同浏览器的差异，提供了稳定的事件接口</li><li>把握住了事情处理的主动权</li></ul></li><li>redux 严格单向数据流 发布订阅优化 稳定执行 dispatch 就是生产新的state，触发发布 内部上锁<ul><li>中间件  面向切面</li></ul></li><li>优化  shouldComponentUpdate | pureComponent immediate | useMemo</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊加班</title>
      <link href="2022/03/02/%E9%9A%8F%E7%AC%94/%E5%8A%A0%E7%8F%AD/"/>
      <url>2022/03/02/%E9%9A%8F%E7%AC%94/%E5%8A%A0%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="加班是什么"><a href="#加班是什么" class="headerlink" title="加班是什么"></a>加班是什么</h2><p>中文解释 在规定的工作时间结束后增加工作时间<br>我的理解 利用休息时间来解决工作时间没有完成但本该完成的事，有几个重点</p><ul><li>工作时间没完成</li><li>工作时间应该完成<br>很多时候，加班的量真的是工作时间该完成的么，还有加班的意义。</li></ul><h2 id="这么多年来我印象中的加班"><a href="#这么多年来我印象中的加班" class="headerlink" title="这么多年来我印象中的加班"></a>这么多年来我印象中的加班</h2><ul><li>刚进去工作，那个时候团队加班一起下班，刚毕业很不喜欢这样。</li><li>苏州开始做前端，加班学习，因为无知和挑战性，所以觉得很有意思</li><li>苏州后来客户出差，时间紧任务重，但是团队成员为了共同目标，积极努力，寻求最优解。</li><li>大连一家公司，负责人保证了结果，赶进度加班，很累，完全是超出了正常的工作的度，效果还不好，问题很大。</li><li>大连后面，为了在客户面前表现，或是平时大家工作效率低下，从风险控制上强制加班。</li></ul><p>总之，加班如果是为了提升还是团队的共同目标偏优化方向，没有人会有异议。如果是为了面子工程，或者弥补其他时候的效率，反而是很让人厌恶的。<br>归纳 提升自己，提高团队是好的，其他，从发展的角度来看，都不是合适的。</p><h2 id="为什么要说这个"><a href="#为什么要说这个" class="headerlink" title="为什么要说这个"></a>为什么要说这个</h2><p>今天宣布强制加班，其实也点名了是面子工程。</p><ul><li>个人原因，特别讨厌对个人和团队没有提升的加班</li><li>心态原因，本来在一个大家低效的团队里，我高效的运转，还要额外加班。</li><li>家庭原因，在工作的时候认真工作，休息的时候，需要对家庭负责。</li></ul><p>也不知道我写的东西会不会有人看，it行业现在比较卷，卷的有时候我真想知道我还能做什么，<br>最近出了开发，还要做管理，我的风格是把我觉得好的方法传授给别人，很多人不理解我，会觉得我是<br>在他们毛病，觉得我是好表现，想升职。</p><p>我一直都以我们是一个团队，目标就是追求更好，不管是代码的优雅，还是设计的优雅，我希望能够<br>带每一个人，写的更好。或许管理应该中庸，毕竟不是每个人都是我，我不该强迫每一个人。</p><p>现在的思路，大概就是，我会去理业务细节和实现思路，虽然你做出来的不一样，不优雅，我知道就行了，<br>如果你和我的期望相似，我会觉得你理解我，虽然我不是神，你可以比我期望的更好，你一定是优秀的，<br>我愿意把我的想法和你沟通，我们碰撞出火花，把工作做的更好。<br>如果不是我期望的，看上去也不太优雅，hack出来的，我也不会怪你，毕竟工作，谋个生计。<br>晚安。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp多个小程序和app开发复盘</title>
      <link href="2022/02/16/%E9%9A%8F%E7%AC%94/uniapp%E5%A4%8D%E7%9B%98/"/>
      <url>2022/02/16/%E9%9A%8F%E7%AC%94/uniapp%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="uniapp-开发复盘"><a href="#uniapp-开发复盘" class="headerlink" title="uniapp 开发复盘"></a>uniapp 开发复盘</h2><h3 id="开发时间线"><a href="#开发时间线" class="headerlink" title="开发时间线"></a>开发时间线</h3><ul><li>2021年11月4号，开始单端小程序开发，1月7号停止维护</li><li>2021年11月20号，开始另一端小程序开发，1月10号停止维护</li><li>2021年12月16号，开始APP开发</li><li>2021年12月29号，准备改造成双端小程序和app共用。</li><li>2021年1月17号，整体改造完成</li></ul><h3 id="改造初衷"><a href="#改造初衷" class="headerlink" title="改造初衷"></a>改造初衷</h3><ul><li>本身两个小程序都是app的一部分，适合做在一起</li><li>两个小程序单独发布，多个环境，切换比较麻烦</li><li>多个项目，并行开发起来较为麻烦，一致性不方便，dry也很严重</li></ul><h3 id="改造后"><a href="#改造后" class="headerlink" title="改造后"></a>改造后</h3><ul><li><p>优点</p><ul><li>在一个分支里面可以进行多个小程序和app的发布。</li><li>共用一份代码，保持一致性</li><li>不同平台有各自独自的代码，保持可不一致性</li><li>通过路由配置各端可灵活配置</li></ul></li><li><p>仍未解决</p><ul><li>不能同时开发多个项目，原因是路由是共用一份的，uniapp的规则</li></ul></li><li><p>如何解决</p><ul><li>多个小程序可以指定目录进行调试，避免互相干扰</li><li>app是HbuilderX启动的，暂时不清楚可不可以单项目多端开发</li></ul><h3 id="改造思路"><a href="#改造思路" class="headerlink" title="改造思路"></a>改造思路</h3></li></ul><ol><li>确认uniapp是可以支持多端的</li><li>不同端的区别分为路由和环境和运行时的代码<ul><li>路由通过配置，node做区分</li><li>环境通过配置，node区分和运行时动态判断</li><li>运行时通过uniapp运行时区分和当前的运行环境区分</li></ul></li><li>以上都可以解决之后，做出设计方案</li></ol><h3 id="其他心得"><a href="#其他心得" class="headerlink" title="其他心得"></a>其他心得</h3><ol><li>软件需要做整体设计</li><li>软件的设计并不是整体设计完就好了，在后续的时候得不停的去思考去优化</li><li>小程序分包比较简单，主要是考虑好，入口和模块就行</li><li>分层是减少软件间互相依赖的问题</li></ol><h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><p>代码倒没有太多参考的，因为业务场景和遇到的情况大家都不一样，简单说是dry和solid原则。</p><ul><li>避免dry，避免重复，要求我们尽可能提高复用性，不要害怕变化</li><li>solid<ul><li>srp 单一职责 一个类只有一个职责，一个方法只有一个功能</li><li>ocp 开放封闭原则,类应该支持拓展，但是避免修改</li><li>LSP 里式替换 子类是可以替换父类的，要注意出现异常</li><li>ISP 接口隔离 接口减少关联度</li><li>DIP 依赖倒置 高层模块不该依赖低层，减少耦合，应该面向接口编程</li></ul></li><li>做到随时可迁移，这个是我个人想法，其实也是高内聚低耦合的表现。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以编程本质是整体思维和细节思维的结合，需要在过程中不断思考，不断优化。<br>尽可能的去偷懒，可能为了偷一点懒，反而设计了一套短期收益低长期收益高的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> 多端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storybook和mdx</title>
      <link href="2022/02/15/%E6%8A%80%E6%9C%AF/storybook/"/>
      <url>2022/02/15/%E6%8A%80%E6%9C%AF/storybook/</url>
      
        <content type="html"><![CDATA[<h1 id="storybook"><a href="#storybook" class="headerlink" title="storybook"></a>storybook</h1><p>storybook体验下来，应该是一个框架，专注于做ui组件相关的内容，无需前端项目可启动<br>比较适合做组件库和想统一组件规范的团队</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>核心是.storybook文件夹的配置<ul><li>main.js storybook的核心配置，决定解析那里的故事，和插件</li><li>preview.js 用来处理预览的情况</li></ul></li><li>故事是用来展示组件的。<ul><li>默认导出的是组件的描述，定义输出和不需要渲染的信息</li><li>命名导出的是真实渲染的组件，可以通过参数来传值渲染</li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件库 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 提效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pnpm</title>
      <link href="2022/02/09/%E9%9A%8F%E7%AC%94/pnpm/"/>
      <url>2022/02/09/%E9%9A%8F%E7%AC%94/pnpm/</url>
      
        <content type="html"><![CDATA[<h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p>一直以前使用的都是npm和yarn,在看modern.js的时候发现已经开始大规模使用pnpm了，突然就感觉自己落伍了。<br>所以看到了，就来研究下pnpm到底是什么。</p><h3 id="npm-yarn-pnpm"><a href="#npm-yarn-pnpm" class="headerlink" title="npm, yarn, pnpm"></a>npm, yarn, pnpm</h3><p>首先，这三个都是前端的包管理工具。</p><ul><li>首先前端项目的包会很多，所以会出现互相依赖的情况</li><li>npm在处理互相依赖的时候，需要先遍历完在决定如何生成扁平的结构，所以安装会慢</li><li>yarn在npm基础上默认了并行安装的配置，缓存可以离线安装，增加了包的签名和安全性校验。</li><li>pnpm运行非常快，超过了上面2个，它有很大的优势<ul><li>多项目共享依赖，无需都安装，通过软连接来索引包依赖。大大节省了空间</li><li>支持monorepo，比如在根目录下 pnpm add A -r，所有的package都会安装A</li><li>安全性高，pnpm自创了一套依赖管理方式，解决了互相依赖非法访问的问题。</li><li>使用起来几乎没有区别，简单上手，这样的话会继续推进所有项目使用pnpm。</li></ul></li></ul><h3 id="monorepo-lerna-workspace"><a href="#monorepo-lerna-workspace" class="headerlink" title="monorepo, lerna, workspace"></a>monorepo, lerna, workspace</h3><p>monorepo 是管理项目的一种方式，</p><ul><li>一个项目中有很多独立的包，有自己的package.json,发布调试都是在自己内部进行，比较方便</li><li>但是带来了一个问题就是，很多包会共享依赖，目前常用解决方案是yarn的wordspaces</li></ul><p>yarn workspace解决了monorepo共享依赖的问题</p><ul><li>配置好packages目录后，会自动分析共享依赖</li><li>可以在根级通过workspace名直接运行内部的命令行</li></ul><p>lerna 是一个互相独立包的git库管理方式</p><ul><li>通过lerna.json配置来一键发布所有管理的包</li></ul><p>总结 </p><ul><li>使用monorepo管理项目，使用yarn workspace管理依赖， 使用lerna管理发布</li><li>上面提到了pnpm支持monorepo，配置pnpm-workspace.yaml</li><li>可以使用pnpm管理依赖和项目结构，lerna发布也是一种不错的选择</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年度目标</title>
      <link href="2022/02/09/%E7%9B%AE%E6%A0%87/2022/"/>
      <url>2022/02/09/%E7%9B%AE%E6%A0%87/2022/</url>
      
        <content type="html"><![CDATA[<h1 id="2021总结"><a href="#2021总结" class="headerlink" title="2021总结"></a>2021总结</h1><ul><li><p>2021年已经过去，去年的经历现在回想起来好像似乎没有什么变化，自己在这一年进步了多少也无法考证。</p></li><li><p>翺晟又干了8个月，一直以自己的喜好点进行技术研究，产出还算可以，算比较小众的吧。</p><ul><li>推进公司使用vue3，在处理grpc-web时降级vite到webpack，完成项目的整体基座。</li><li>结合vben组件库，将组件思想抽离，在公司内部结合闭包使用 table formModel form modal等组件</li><li>统一写法，把状态抽离到闭包内部，简化代码，抽离了部分配置来简化功能，打成共识可以减少代码量，也不易出错</li><li>完成大屏开发，组件只负责渲染，入口统一做数据管理，增加拦截层，通过参数返回mock，业务组件模块自成一体，做到可迁移</li></ul></li><li><p>埃森哲干了3个月，主要方向正在微信公众号，小程序框架uniapp上</p><ul><li>完成微信公众号紧急上线</li><li>小程序开发准备和整体设计，抽离通用库，支撑小程序的开发，</li><li>2个小程序多个环境集成到一个项目中，同时拓展出app业务，</li><li>使用node整体进行代码整合，使得1套代码，2端，3种不同业务的开发发布。</li><li>对代码进行分层优化，使每一层职责单一，同时抽象方法进行更详细的loading提升用户体验，</li></ul></li><li><p>做的不好的事情</p><ul><li>光顾着埋头干，没有去统筹全局，应该更积极的参与到业务中去，把控业务细节，因为后期发现想改，成本很高</li><li>没有进行较多的code review，导致成员的提升有限，并且没有对成员在提升上有所指导</li><li>工程化能力较为欠缺，只站在代码细节去解决问题，忽略了更加重要的设计问题。</li></ul><h1 id="2022年度目标"><a href="#2022年度目标" class="headerlink" title="2022年度目标"></a>2022年度目标</h1></li><li><p>工作上</p><ul><li>花1/3时间用来产品和开发对接中，确认业务细节和风险</li><li>花1/3时间用于代码review中，确保每一个人的能力和提升的关键点</li><li>花1/3时间用于node和工程化架构上，确保未来架构切换的可能性，</li></ul></li><li><p>生活上</p><ul><li>阅读时间欠缺，文学作品和技术要兼顾，每个月至少一本文学作品和技术书籍</li><li>照顾身体，健康同样重要，每周2-3次持续15分钟的锻炼，</li><li>照顾他人，对待爱人需要更加细心，主动承担家务，每天扫地拖地1次，周末做饭2次，</li><li>见识少，每年1-2次旅游，写游记，不可走马观花</li><li>兴趣爱好少，培养1-2个兴趣爱好，每周花1-3个小时</li></ul></li></ul><h2 id="2022第一季度回顾"><a href="#2022第一季度回顾" class="headerlink" title="2022第一季度回顾"></a>2022第一季度回顾</h2><ul><li><p>4.22 说来惭愧，时间基本上是被工作压满了</p><ul><li>阅读 半本大佬的技术书，文学作品没有涉猎，</li><li>照顾身体 基本上算可以</li><li>照顾他人 做饭的次数少很多</li><li>见识 还没执行</li><li>兴趣爱好 唱歌，准备培养，健身算的话，也是准备培养</li><li>3月份确立了今年要考研的目标，把大学的分数打出来看，平均分差0.9分就有学位证。悔不当初。</li></ul><h2 id="2022第二季度展望-6月30日回顾"><a href="#2022第二季度展望-6月30日回顾" class="headerlink" title="2022第二季度展望(6月30日回顾)"></a>2022第二季度展望(6月30日回顾)</h2><p>时间剩下3个月1周，考研是今年的核心目标，其他的允许搁置。</p><ul><li><p>下班时</p><ul><li>英语单词跟着课程学完 大约3500个，至少过10遍</li><li>长难句每天都锻炼。记录。</li><li>数据跟课学完，专业课学完,8月后开始补弱做题。</li></ul></li><li><p>工作时</p><ul><li>学习管理能力，及时输出，</li><li>学习设计模式，及时输出，</li><li>学习性能优化，及时输出，</li><li>继续保持技术的前瞻性。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 年度目标 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度目标 </tag>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint指南</title>
      <link href="2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/"/>
      <url>2021/10/17/%E6%8A%80%E6%9C%AF/eslint%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="eslint指南"><a href="#eslint指南" class="headerlink" title="eslint指南"></a>eslint指南</h1><h2 id="eslint是什么"><a href="#eslint是什么" class="headerlink" title="eslint是什么"></a>eslint是什么</h2><p>eslint是node写出来的一个代码静态分析工具，与之匹配的还有prettier代码美化工具</p><h2 id="eslint特点"><a href="#eslint特点" class="headerlink" title="eslint特点"></a>eslint特点</h2><ul><li>可插拔</li><li>规则独立</li><li>不限制编码风格，规则自由</li></ul><h2 id="eslint-使用指南"><a href="#eslint-使用指南" class="headerlink" title="eslint 使用指南"></a>eslint 使用指南</h2><ol><li>安装</li></ol><p><code>npm install eslint --save-dev</code></p><ol start="2"><li>生成配置文件</li></ol><p><code>./node_modules/.bin/eslint --init</code></p><ol start="3"><li>校验文件</li></ol><p><code>./node_modules/.bin/eslint yourfile.js</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目脚手架解决方案</title>
      <link href="2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2021/08/01/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="脚手架解决方案"><a href="#脚手架解决方案" class="headerlink" title="脚手架解决方案"></a>脚手架解决方案</h1><p>在多个项目中，很多内容都是可以复用的，手动通过脚手架创建的只是一个很基础的功能，所以需要构建自己的脚手架</p><h2 id="yeoman"><a href="#yeoman" class="headerlink" title="yeoman"></a><a href="https://yeoman.io/">yeoman</a></h2><h3 id="yeoman是什么"><a href="#yeoman是什么" class="headerlink" title="yeoman是什么"></a>yeoman是什么</h3><p>yeoman 是一个快速建立项目的工具，它其实是下面的集合</p><ul><li>yo –脚手架，生成工具</li><li>grunt，gulp – 构建工具</li><li>bower，npm – 包管理工具  </li></ul><p>任何人可以通过它创建通用的模板，命名为generator-xxx, 执行的时候运行yo xxx就行</p><h3 id="yeoman-快速创建项目"><a href="#yeoman-快速创建项目" class="headerlink" title="yeoman 快速创建项目"></a>yeoman 快速创建项目</h3><ol><li>首先(全局)安装yo  <code>yarn global add yo</code></li><li>我们以generator-node模块为例，安装  <code>yarn global add generator-node</code> 里面有很多功能</li><li>创建文件夹<code>mkdir yo-quick</code>, 进入运行 <code>yo node</code>,回答一些问题，会自动创建模板文件<br><img src="/images/2021/8/1/yo-quick.png"></li></ol><h3 id="yeoman-创建自定义的脚手架"><a href="#yeoman-创建自定义的脚手架" class="headerlink" title="yeoman 创建自定义的脚手架"></a>yeoman 创建自定义的脚手架</h3><p>创建generator，其实就是创建一个npm模块，依赖于<a href="https://yeoman.io/authoring/index.html">yeoman-generator</a> 模块</p><ol><li>创建一个文件夹叫generator-self,新建<code>generators/app/index.js</code>文件，</li><li>问题的内容在prompting中，把答案存入this上下文的内容中,写入文件的内容在writing中，<ul><li>直接写文件 <code>this.fs.write(目标地址, 携带参数(用于ejs解析))</code></li><li>写入模板 <code>this.fs.copyTml(源文件, 目标地址, 携带参数(用于ejs解析))</code></li></ul></li><li>本地使用的话 <code>yarn link</code>，或者发到npm包里</li><li>运行的时候需要yo 包名，跑的是app目录下的</li><li>可以在app同级目录简历其他名称，yo 包名:名称就可以跑额外任务了</li></ol><p>列举一些this上下文方法</p><ul><li>安装依赖npm <code>this.npmInstall([&#39;lodash&#39;], &#123; &#39;save-dev&#39;: true &#125;);</code></li><li>安装依赖yarn <code>this.yarnInstall([&#39;lodash&#39;], &#123; &#39;dev&#39;: true &#125;);</code></li><li>运行脚本 <code>this.spawnCommand(&#39;composer&#39;, [&#39;install&#39;]);</code></li><li>用户输入<pre class="line-numbers language-none"><code class="language-none">this.prompt([&#123;  type: &quot;confirm&quot;,  name: &quot;cool&quot;,  message: &quot;Would you like to enable the Cool feature?&quot;&#125;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>打印log <code>this.log(&quot;cool feature&quot;, this.answers.cool);</code> // user answer <code>cool</code> used</li><li>验证额外参数 <pre class="line-numbers language-none"><code class="language-none">this.option(&quot;coffee&quot;);  this.scriptSuffix &#x3D; this.options.coffee ? &quot;.coffee&quot; : &quot;.js&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>获取根级目录 <code>this.destinationRoot();</code></li><li>获取目标路径 <code>this.destinationPath(&#39;index.js&#39;);</code></li><li>使用ejs模板和数据填充内容<pre class="line-numbers language-none"><code class="language-none">this.fs.copyTpl(  this.templatePath(&#39;index.html&#39;),  this.destinationPath(&#39;public&#x2F;index.html&#39;),  &#123; title: &#39;Templating with Yeoman&#39; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="plop"><a href="#plop" class="headerlink" title="plop"></a><a href="https://plopjs.com/">plop</a></h2><p>plop是一个帮你节省时间，帮助你的团队创建一致的新文件的小工具。<br>plop是根据配置模板，统一创建新文件的工具，类似 ng g page那种类型<br>其实类似webstorm创建项目的一些模板</p><ol><li>使用plop，首先在项目中安装plop依赖 <code>yarn add global plop</code>也行</li><li>在项目根目录创建<code>plopfile.js</code>文件<pre class="line-numbers language-none"><code class="language-none">   module.exports &#x3D; function (plop) &#123;    &#x2F;&#x2F; create your generators here    plop.setGenerator(&#39;component&#39;, &#123;        description: &#39;create component&#39;,        prompts: [&#123; &#x2F;&#x2F; 类似之前的提问            type: &#39;input&#39;,            name: &#39;name&#39;,            message: &#39;component name&#39;,            default: &#39;my component&#39;        &#125;],        actions: [&#123; &#x2F;&#x2F; 创建的操作            type: &#39;add&#39;,            path: &#39;src&#x2F;components&#x2F;&#123;&#123;name&#125;&#125;&#x2F;&#123;&#123;name&#125;&#125;.vue&#39;,            templateFile: &#39;template&#x2F;components.hbs&#39;        &#125;]    &#125;);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>创建生成的模板,以hbs文件结尾，内部用<code>&#123;&#123;name&#125;&#125;</code>来表示变量</li><li><code>yarn link</code>后可以使用了，运行用<code>yarn plop 名称</code>代替比如说<code>yarn plop component</code></li></ol><h2 id="node自己实现"><a href="#node自己实现" class="headerlink" title="node自己实现"></a>node自己实现</h2><p>node自己实现原理也都是脚手架的原理 </p><ol><li>在项目里面加入cli.js,第一行写成 <code>#!/usr/bin/env node</code>，里面可以写node对文件的操作</li><li>先在package.json里面加入<code>bin: &quot;cli.js&quot;</code>，这样link之后通过名称会自动找到对应的执行文件，</li><li>之后npm link之后就可以使用包名来执行了,</li><li>问答库可以使用<code>inquirer</code>，用法和以上类似</li><li>渲染库使用 <code>ejs</code>,用法是<code>ejs.renderFile(path.join(tmplDir,file), answer, (err,res) =&gt; &#123; fs.writeFileSync(path.join(destDir,file), result) &#125;,</code></li><li>基本上使用的都是node的fs文件模块的命令。</li><li>总结下，通过包名找到执行的node文件，通过命令行输入参数，保存临时变量，通过node把文件写出来</li></ol><h2 id="代码查看，以上的实践代码，点击查看"><a href="#代码查看，以上的实践代码，点击查看" class="headerlink" title="代码查看，以上的实践代码，点击查看"></a>代码查看，以上的实践代码，<a href="https://github.com/swliu920322/lagou-code/tree/main/2.FE-Engine/2.scaffold">点击查看</a></h2>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 拉钩大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105.从前序与中序遍历序列构造二叉树</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h3><p>给定一棵树的前序遍历 preorder 与中序遍历 inorder。请构造二叉树并返回其根节点</p><p>示例 1:</p><pre class="line-numbers language-none"><code class="language-none">Input: preorder &#x3D; [3,9,20,15,7], inorder &#x3D; [9,3,15,20,7]Output: [3,9,20,null,null,15,7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>前序遍历是，先遍历根节点，再遍历左子树，再遍历右子树</li><li>中序遍历是，先遍历左子树，再遍历根节点，再遍历右子树</li><li>后续遍历是，先遍历左子树，再遍历右子树，再遍历根节点。</li><li>如何记忆，只看某一个节点，前序遍历在遍历左右之前，中序遍历在遍历左右之中，右序遍历在遍历左右之后.</li></ol><ul><li>解题例子 前序[1, 2, 4, 7, 3, 5, 6, 8]<br>中序[4, 7, 2, 1, 5, 3, 8, 6];</li></ul><ol><li>前序第一个肯定是根节点，从中序中找到根节点位置，分成左右2部分.</li><li>对左右部分的前序继续进行处理，</li></ol><h4 id="硬解法，复杂度为O-n2"><a href="#硬解法，复杂度为O-n2" class="headerlink" title="硬解法，复杂度为O(n2)"></a>硬解法，复杂度为O(n2)</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;number[]&#125; preorder * @param &#123;number[]&#125; inorder * @return &#123;TreeNode&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> preLeft <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorLeft <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preLeft<span class="token punctuation">,</span> inorLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> preRight <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> inorRight <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>preRight<span class="token punctuation">,</span> inorRight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存解法-少了循环"><a href="#缓存解法-少了循环" class="headerlink" title="缓存解法,少了循环"></a>缓存解法,少了循环</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  inorder<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pStart<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> iEnd</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pStart <span class="token operator">></span> pEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rootNode <span class="token operator">=</span> preorder<span class="token punctuation">[</span>pStart<span class="token punctuation">]</span>    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> midIndex <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leftNum <span class="token operator">=</span> midIndex <span class="token operator">-</span> iStart<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pStart <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> iStart<span class="token punctuation">,</span> midIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rooot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>pStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> leftNum<span class="token punctuation">,</span> pEnd<span class="token punctuation">,</span> midIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> iEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>124.二叉树中的最大路径和</title>
      <link href="2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>2021/07/14/%E7%AE%97%E6%B3%95/leetcode/124.%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124.二叉树中的最大路径和"></a>124.二叉树中的最大路径和</h3><p>路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p><p>路径和 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) &#123; *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * &#125; */</span><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number&#125; */</span><span class="token comment">// 每个二叉树的路径等于它的左子树加右子树加自己的和，如果左右子树小于0，则加0，</span><span class="token comment">// 这里需要计算左子树和右子树和，采用后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">const</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> right <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">+</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 向父类提供的最大值，因为向父类提供了，所以只有一个子</span>       <span class="token keyword">return</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 还有种解法，穷举，总之核心是树的后序遍历</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 所有可能性中去最大</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">,</span> i<span class="token punctuation">.</span>val <span class="token operator">+</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必读的事业规划书</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="程序员必读的事业规划书"><a href="#程序员必读的事业规划书" class="headerlink" title="程序员必读的事业规划书"></a>程序员必读的事业规划书</h1><h2 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h2><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>你的价值不在于你的技术，而在于你为公司提供的价值，即使用价值，提升解决问题能力</p><h3 id="供需"><a href="#供需" class="headerlink" title="供需"></a>供需</h3><p>信息不对称影响价值，短时间争取大量机会</p><h3 id="跳槽"><a href="#跳槽" class="headerlink" title="跳槽"></a>跳槽</h3><p>不只是价值，看未来发展和感受， 之前要考虑得失， 永远不要因为现在很差而跳槽，要用未来更好，保证一直往上走</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>应届生-小组长-主管-部门经理-总监-CTO，提升能力，如果长时间得不到成长再选择跳槽。脑子里要有清晰的模板</p><h2 id="2-准备篇"><a href="#2-准备篇" class="headerlink" title="2. 准备篇"></a>2. 准备篇</h2><h3 id="自我认识和自我实现"><a href="#自我认识和自我实现" class="headerlink" title="自我认识和自我实现"></a>自我认识和自我实现</h3><ol><li>找不到目标的话，定1年期目标，  </li><li>多挣钱</li></ol><h3 id="四大象限"><a href="#四大象限" class="headerlink" title="四大象限"></a>四大象限</h3><ul><li>E象限 雇员  低风险低收益，天花板明显。</li><li>S象限 自己  做标准化产品 免费+收费定制，做细分、专业的工具。</li><li>B象限 创业 规模化为前提 投资，上市 出售，不喜欢伺候一群爷（用户），别做CEO。<br>A轮融资之前寻找商业模式，变更频繁，敏捷开发，A之后着力规模化，高并发高可用，处理团队和资源。</li><li>I象限 投资</li></ul><h3 id="分析招聘需求"><a href="#分析招聘需求" class="headerlink" title="分析招聘需求"></a>分析招聘需求</h3><ul><li>简历模板 <a href="https://github.com/geekcompany/ResumeSample/blob/master/web.md">https://github.com/geekcompany/ResumeSample/blob/master/web.md</a></li><li>调整自己定位 1.学会观察技术趋势 坚持在发展方向上   2.投资新兴市场和细分市场  每个企业都有可取之处，</li></ul><h3 id="职业画布"><a href="#职业画布" class="headerlink" title="职业画布"></a>职业画布</h3><h3 id="个人品牌-高价值输出"><a href="#个人品牌-高价值输出" class="headerlink" title="个人品牌 高价值输出"></a>个人品牌 高价值输出</h3><ul><li>github博客</li><li>微博加V， 大小问题在这里处理</li><li>技术社区账号StackOverFlow  大量内容的文章在这里发表</li></ul><h3 id="沟通和写作"><a href="#沟通和写作" class="headerlink" title="沟通和写作"></a>沟通和写作</h3><p>金字塔原则 </p><ul><li>条理 </li><li>逻辑</li></ul><h3 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h3><p>充分交流</p><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>可以做技术尝试.  从小做起， 真实的需求  持续更新的毅力</p><h3 id="架构能力"><a href="#架构能力" class="headerlink" title="架构能力"></a>架构能力</h3><ul><li>dry  </li><li>尽量自动化 </li><li>正交性（隔离）</li></ul><h2 id="3-操作篇"><a href="#3-操作篇" class="headerlink" title="3. 操作篇"></a>3. 操作篇</h2><h3 id="简历的本质-约面试"><a href="#简历的本质-约面试" class="headerlink" title="简历的本质 约面试"></a>简历的本质 约面试</h3><h4 id="FAB原则"><a href="#FAB原则" class="headerlink" title="FAB原则"></a>FAB原则</h4><ul><li>是什么</li><li>比别人好在哪点</li><li>如果雇佣我，得到的价值是什么</li><li>原则是数字化,没有成绩 讲成长<h3 id="书写工具"><a href="#书写工具" class="headerlink" title="书写工具"></a>书写工具</h3>markDown,尽量提供pdf的，文件名，xxx简历.WEB开发工程师.pdf</li></ul><h3 id="内推-猎头-网站投"><a href="#内推-猎头-网站投" class="headerlink" title="内推 猎头 网站投"></a>内推 猎头 网站投</h3><h3 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h3><ol><li>遍历简历知识点</li><li>技能树</li><li>多用咱</li><li>离职原因，要以未来更好</li><li>遇到的最大挑战， 可以讲一个最近发生的</li><li>你希望三年后成为什么样的人  考察职业规划</li><li>有什么要问我们的，带兴趣指标的问题，技术或者产品</li></ol><p><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E8%B1%A1%E9%99%90.png"><br><img src="/images/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%AF%BB%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E4%B9%A6/%E7%94%BB%E5%B8%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视力从0.1到1，不开刀不吃药</title>
      <link href="2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/"/>
      <url>2021/07/01/%E8%AF%BB%E4%B9%A6/%E8%A7%86%E5%8A%9B%E4%BB%8E0.1%E5%88%B01%EF%BC%8C%E4%B8%8D%E5%BC%80%E5%88%80%E4%B8%8D%E5%90%83%E8%8D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="视力从0-1到1，不开刀不吃药"><a href="#视力从0-1到1，不开刀不吃药" class="headerlink" title="视力从0.1到1，不开刀不吃药"></a>视力从0.1到1，不开刀不吃药</h1><p>本书的根据是人体自身是一个可自我调节修复的系统，参考人体使用指南。我主要关注了如何恢复，原因就不说了</p><h2 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h2><ol><li>有氧运动，书上说时弹跳500次或深蹲100，排除内脏脂肪</li><li>眼保健操，书上说按摩眼睛和头，来回敲打手臂上半部分和小腿两侧</li><li>揉搓耳朵，很多眼睛的穴位</li><li>腹式呼吸，多吸入氧气，提高氧气的摄取。</li><li>远眺，保持放松</li><li>均衡饮食，早睡，拒烟酒</li><li>在看清的基础上，后退，努力继续看清，相信自己可以看清</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 养生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包在vue3的使用</title>
      <link href="2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/20/%E6%8A%80%E6%9C%AF/%E9%97%AD%E5%8C%85%E5%9C%A8vue3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包在vue3的使用"><a href="#闭包在vue3的使用" class="headerlink" title="闭包在vue3的使用"></a><a href="/images/%E5%88%98%E5%9C%A3%E4%BC%9F%E7%AE%80%E5%8E%86.docx">闭包在vue3的使用</a></h1><ul><li>早期做项目，基于简单这一个出发点，所谓的封装也只是一些执行顺序的问题。<br>对闭包用的也少。</li><li>最近看了一个开源vue3后台的处理方式，可能这就是闭包该有的写法吧。<br>本质是闭包内部维持状态，暴露闭包set函数的集合和内部状态的set，通过vue的emit传回到组件本身。<br>把属性合并作为v-bind的对象体，使用者只关心函数调用即可。</li><li>封装本身用来控制抽象的内容，分可预测和难预测的部分，通常解决掉是重复的可预测内容。<br>之前简单的封装一部分是对于模板的，wrapper函数，一部分是逻辑的logic函数，之前是做了2份的，本身还得配合使用。<br>现在wrapper函数和模板通过内部闭包状态合并了，对于使用者来说是一个很舒服的状态。</li></ul><h2 id="vue3配合闭包目前的封装思想"><a href="#vue3配合闭包目前的封装思想" class="headerlink" title="vue3配合闭包目前的封装思想"></a>vue3配合闭包目前的封装思想</h2><h3 id="真实组件使用"><a href="#真实组件使用" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">const</span> app <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;BasicTable @register="register" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      register<span class="token punctuation">,</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装"><a href="#组件内部封装" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initialProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> loadingRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token comment">// 监听props之后的变化，更新状态</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>initialProps<span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      getLoadingRef<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">unref</span><span class="token punctuation">(</span>loadingRef<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loadingRef<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> Table <span class="token operator">=</span> vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ATable ref="tableRef" v-bind="getBindValue" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tableRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> innerPropsRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 始终获取最新的props</span>    <span class="token keyword">const</span> getProps <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoadingRef<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">setInnerPropRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      innerPropsRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>innerPropsRef<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 使用最新的状态</span>    <span class="token keyword">const</span> getBindValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>attrs<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">unref</span><span class="token punctuation">(</span>getProps<span class="token punctuation">)</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> <span class="token function">unref</span><span class="token punctuation">(</span>getLoadingRef<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tableAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> setLoading<span class="token punctuation">,</span> setInnerPropRef <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 把闭包函数集合emit为事件参数</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">,</span> tableAction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> tableRef<span class="token punctuation">,</span> getBindValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部"><a href="#useTable内部" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    actions<span class="token punctuation">.</span><span class="token function">setInnerPropRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> otherMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> otherMethods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js通过闭包简单实现"><a href="#js通过闭包简单实现" class="headerlink" title="js通过闭包简单实现"></a>js通过闭包简单实现</h2><h3 id="真实组件使用-1"><a href="#真实组件使用-1" class="headerlink" title="真实组件使用"></a>真实组件使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 组件类本身会自动实例化，我这边是手动</span>  <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">register</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自己逻辑处理位置</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  methods<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">realUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件内部封装-1"><a href="#组件内部封装-1" class="headerlink" title="组件内部封装"></a>组件内部封装</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假设的loading响应式函数</span>  <span class="token keyword">let</span> loading <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> loading<span class="token punctuation">,</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>loading <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 一个假设的状态响应式函数 同上</span><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> state <span class="token operator">=</span> initial<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>state <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 真实table组件内部状态</span><span class="token keyword">function</span> <span class="token function">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getLoading<span class="token punctuation">,</span> setLoading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getState<span class="token punctuation">,</span> setState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getComputedState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    setState<span class="token punctuation">,</span>    setLoading<span class="token punctuation">,</span>    getComputedLoading<span class="token punctuation">,</span>    getComputedState<span class="token punctuation">,</span>    <span class="token function">setProps</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setLoading</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setState</span><span class="token punctuation">(</span>props<span class="token operator">?.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// emit的东西暂时存起来</span>  actions <span class="token operator">=</span> setMethods<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    getMethods<span class="token operator">:</span> <span class="token punctuation">&#123;</span> getComputedLoading<span class="token punctuation">,</span> getComputedState <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    setMethods<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useTable内部-1"><a href="#useTable内部-1" class="headerlink" title="useTable内部"></a>useTable内部</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useTable</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 解析业务逻辑的核心</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> actions<span class="token punctuation">;</span>    actions<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"instance has not init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getLoading</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComputedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">setState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">,</span> methods<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash.concat</title>
      <link href="2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/"/>
      <url>2021/03/20/%E6%BA%90%E7%A0%81/lodash/lodash_array/concat/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 自己实现</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
            <tag> lodash_array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心</title>
      <link href="2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/"/>
      <url>2021/03/20/%E8%AF%BB%E4%B9%A6/%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="心-稻盛和夫一生嘱托"><a href="#心-稻盛和夫一生嘱托" class="headerlink" title="心 - 稻盛和夫一生嘱托"></a>心 - 稻盛和夫一生嘱托</h1><ol><li>提到稻盛和夫，大家都知道他是一个很厉害的企业家，<br>现在也有自己的心学系统和企业管理法阿米巴。<br>读完这本书。</li><li>他是一个伟人，一个谦虚的伟人。<br>谦虚到什么程度呢，虽然做好了很多企业，但是他认为才能不是自己的，是上天暂时给他的，所以不能傲慢。<br>我也反思，有时候做好就会慢慢傲慢，反而出现问题。</li><li>核心观就是’利他’二字，人活一辈子，大都是为自己活，<br>真正为了别人好而活的人太少，所以为什么他能成功。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="/images/%E5%BF%83.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稻盛和夫 </tag>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你为什么而工作</title>
      <link href="2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/"/>
      <url>2021/03/10/%E8%AF%BB%E4%B9%A6/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="你为什么而工作"><a href="#你为什么而工作" class="headerlink" title="你为什么而工作"></a>你为什么而工作</h1><ul><li><p>之前从来没有考虑过工作的意义，最舒服的时候是做出公司的组件， 服务于大众的时候。能够让大家开发的舒服，真是特别的满足。 尤其是人性那块，因为我都是尽自己努力在做事情，</p></li><li><p>最近说在管理，也不算管理，从领导上来看，他希望我可以多做一点。 我早期本着技术的角度，在技术上承担的比较多，在人性上从来没有考虑过。 最近的人员流动率过于高了，我也开始在想管理这方面的事情了。<br>这本书从人性上讲了如何驱动大家，从使命和环境上开始改变。 让大家都可以尽其所能，找到自己更伟大的使命和意义。 ￼</p></li></ul><p><img src="/images/%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E8%80%8C%E5%B7%A5%E4%BD%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人性 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇特的一生</title>
      <link href="2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/"/>
      <url>2021/03/09/%E8%AF%BB%E4%B9%A6/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="奇特的一生"><a href="#奇特的一生" class="headerlink" title="奇特的一生"></a>奇特的一生</h1><p>奇特的一生这本书很奇怪，如何阅读比正本反而更容易看，可能是正本是他的朋友写的，主要是介绍他的才华什么的，<br>而指导阅读的确实围绕着管理时间的核心来讲的。</p><p>柳比歇夫 从26岁开始执行记录时间的习惯，一直到去世，56年没有断过，到了老年还是保持的高效的工作能力。<br>我从中学到了一些东西</p><ol><li>记录时间，可以主要是自己有效的工作和阅读时间，</li><li>每天每周每月每年去回顾一下，好好统计下做一个回顾，时间就了就可以精准的感知时间，</li><li>立下广大的志向，通过跟时间做朋友去慢慢的接近他。</li><li>围绕着自己的终极目标，完善自我，管理学，数学，文学，音乐，运动缺一不可</li><li>等到年老了，累了马上就休息，高效休息高效工作、</li><li>目前要好好想想自己的终点，陪着时间去慢慢接近他。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
